[module generateMainMethods('/org.cirad.dsl.behavior.metamodel/model/metamodel.ecore')]
[import org::cirad::dsl::gen::cormas::common::common/]
[import org::cirad::dsl::gen::cormas::common::generateExpressions /]
[import org::cirad::dsl::gen::cormas::services::numberservices/]

[template public generateInstanceCreationMain(m : Model)]
[comment METHODS TO PUT ON THE SCHEDULER ??/]

<methods>
<class-id>CormasNS.Models.[m.name/].[m.name/]</class-id> <category>instance-creation</category>
<body package="[m.name/]" selector="initAgents">initAgents
"To be completed"</body>
</methods>
[/template]

[template public generateInitMain(m : Model)]
[comment ]
[if (m.eContents(Init).eContents(Enviromment).LoadEnviroment->size() > 0)]

<methods>
<class-id>[m.parameters.ModelName/].[m.parameters.ModelName/]</class-id> <category>init</category>
[for (env : Enviromment | m.eAllContents(Enviromment))]
	[if (current("Enviromment").LoadEnviroment->size() > 0)]
	<body package="ECEC" selector="[current("Enviromment").Name/]">[current("Enviromment").Name/]
	"initialize an space (from env file)"
 	 self spaceModel loadEnvironmentFromFile: '[current("Enviromment").Name/].env'.</body>
	 [/if]
[/for]
</methods>
[/if]
[/comment]
[/template]

[template public generateControlMain(m : Model)]

<methods>
<class-id>[m.name/].[m.name/]</class-id> <category>control</category>
<body package="[m.name/]" selector="step:">step: t
"To be completed"</body>
</methods>
<methods>
[/template]

[template public generateAccessingMain(m : Model)]

<methods>
<class-id>CormasNS.Models.[m.name/].[m.name/]</class-id> <category>accessing</category>
[for (att : AttributeClass | m.eAllContents(Entity).attributes)]

	
	<body package="[m.name/]" selector="[att.name/]">[att.name/]
	"Getter accessor of attribute [att.name/]" </body>

	<body package="ECEC" selector="catabolicRate:">[att.name/]: anObject
	"Setter accessor of attribute [att.name/]"</body>
	
[/for]
[/template]
[comment Probes are generated on the main class of model /]
[template public generateProbes(m : Model)]
[comment] [if (m.eContents(Probe).classes->size() > 0)] 
[for (p : Probe | m.eAllContents(Probe))]
<methods>
<class-id>CormasNS.Models.[m.parameters.ModelName/].[m.eContents(Class).Name/]</class-id> <category>probes</category>
	<body package="[m.parameters.ModelName/]" selector="[p.Name/]">[p.Name/]
	"modify this instruction to calculate the number to be recorded"
	^self the[p.classes.Name.toUpperFirst()/]s messageX</body>
[/for]
[/if]
[/comment]
[/template]

[template public generateDefaultValuesforMain(m : Model)]
[comment  Generate for each attribute contained in the scheduler/]
[comment] [if (m.eContents(Scheduler).Attributes->size() > 0)] [/comment]
<class-id>CormasNS.Models.[m.name/].[m.name/] class</class-id> <category>- default value</category>
[for (attsched : AttributeClass | m.eAllContents(Entity).eAllContents(AttributeClass))]
<body package="[m.name/]" selector="[attsched.name/]_default">[attsched.name/]_default 
	"Return the default value of [attsched.name/] attribute"	
	^[attsched.generateAssigmentValue()/]</body>
[/for]
[comment][/if] [/comment]
[/template]


[template public generateColorProbes(m : Model)]

<methods>
<class-id>CormasNS.Models.[m.name/].[m.name/] class</class-id> <category>- probes</category>

	<body package="[m.name/]" selector="colorOfProbe_TO-DO">colorOfProbe_TO-DO
  	^ (ColorValue red: [getRandomDouble()/] green: [getRandomDouble()/] blue: [getRandomDouble()/])</body>

</methods>
[/template]


[template public generateInstVariablesforMainClass(m : Model)]
[for (c : Entity | m.eAllContents(Entity))]the[c.name.toUpperFirst()/]s [/for]
[/template]


[template public generateProbesNamesforMainClass(m : Model)]
Probes for main class
[/template]

