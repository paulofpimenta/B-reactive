/*
 * generated by Xtext 2.10.0
 */
package org.cirad.dsl.xtext.ui.labeling

import behaviorMetamodel.ActivityBehavior
import behaviorMetamodel.ActivityDiagramBehavior
import behaviorMetamodel.Add
import behaviorMetamodel.AttributeClass
import behaviorMetamodel.Decision
import behaviorMetamodel.DeclaredAttributes
import behaviorMetamodel.DeclaredLocalVariable
import behaviorMetamodel.DeclaredParameter
import behaviorMetamodel.End
import behaviorMetamodel.Entity
import behaviorMetamodel.EquationBehavior
import behaviorMetamodel.IfFalseEdge
import behaviorMetamodel.IfTrueEdge
import behaviorMetamodel.InitEntity
import behaviorMetamodel.InitSpace
import behaviorMetamodel.LocalVariable
import behaviorMetamodel.Model
import behaviorMetamodel.Move
import behaviorMetamodel.ParameterClass
import behaviorMetamodel.Remove
import behaviorMetamodel.Reproduce
import behaviorMetamodel.Start
import behaviorMetamodel.UnconditionedEdge
import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import behaviorMetamodel.DeclaredVariable
import behaviorMetamodel.Die
import behaviorMetamodel.DeclaredBehavior
import behaviorMetamodel.ConstantExpression
import behaviorMetamodel.FunctionCallExpression
import behaviorMetamodel.Function
import behaviorMetamodel.NamedFunction

import org.eclipse.emf.ecore.EObject

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class BreactiveLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:
	
	def text(UnconditionedEdge ele) {
		""
	}
	def text(IfTrueEdge ele) {
		"Yes"
	}
	def text(IfFalseEdge ele) {
		"No"
	}
	def text(ConstantExpression const) {
		const.value.toString
	}
	def text(DeclaredBehavior db) {
		db.behavior.name
	}
	def text(DeclaredVariable dv) {
		dv.variableclass.name
	}
	def text(DeclaredAttributes da) {
		da.attributeclass.name
	}
	def text(DeclaredParameter dp) {
		dp.parameterclass.name
	}
	def text(DeclaredLocalVariable dl) {
		dl.localvariable.name
	}	
	def text(InitEntity initE) {
		initE.initName + " " + initE.entity.iterator.next.name
	}
	def text(InitSpace initS) {
		 "Init Space of " + initS.entity.iterator.next.name
	}	
	
	def text(Decision decision) {
		"Decide"
	}
	
//	def text(FunctionCallExpression fc) {
//		val function = fc.function		
//		 if (function instanceof NamedFunction)
// 			function.name else {
//			"test"
//		}
//	}
	
//
	def image(Model ele) {
		'Model.png'
	}
	def image(Entity ele) {
		'Entity.png'
	}
	def image(AttributeClass a) {
		'Attribute.png'
	}
	def image(ParameterClass p) {
		'Parameter.png'
	}
	def image(LocalVariable l) {
		'Local.png'
	}
	def image(DeclaredAttributes da) {
		'Attribute.png'
	}
	def image(DeclaredParameter dp) {
		'Parameter.png'
	}
	def image(DeclaredLocalVariable dl) {
		'Local.png'
	}
	def image(DeclaredBehavior db) {
		'Behavior.png'
	}				
	def image(ActivityDiagramBehavior ele) {
		'ActivityDiagram.png'
	}
	def image(ActivityBehavior a) {
		'ActivityBehavior.png'
	}
	def image(EquationBehavior eq) {
		'Equation.png'
	}
	def image(InitSpace ele) {
		'initSpace.png'
	}
	def image(InitEntity ele) {
		'toilet-male.png'
	}	
	def image(Decision dec) {
		'Decide.png'
	}		
		
	def image(Start ele) {
		'start.png'
	}
	def image(Reproduce ele) {
		'Reproduce.png'
	}
	def image(Move ele) {
		'Move.png'
	}
	def image(Add ele) {
		'Add.png'
	}
	def image(Remove ele) {
		'Remove.png'
	}
	def image(Die ele) {
		'Die.png'
	}
	def image(End ele) {
		'End.png'
	}
	def image(IfTrueEdge ele) {
		'TrueEdge.png'
	}
	def image(IfFalseEdge ele) {
		'FalseEdge.png'
	}		
	def image(UnconditionedEdge ele) {
		'UnconditionedEdge.png'
	}
	
}
