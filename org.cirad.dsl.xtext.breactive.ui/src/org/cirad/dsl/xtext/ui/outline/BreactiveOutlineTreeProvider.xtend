/*
 * generated by Xtext 2.10.0
 */
package org.cirad.dsl.xtext.ui.outline

import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.eclipse.emf.ecore.EObject
import behaviorMetamodel.Decision
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import java.util.List
import org.eclipse.ui.menus.UIElement

/**
 * Customization of the default outline structure.
 *
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class BreactiveOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
//	override protected _createChildren(DocumentRootNode parentNode, EObject modelElement) {
//		val done = newArrayList
//		if (modelElement instanceof Model) {
//			for (menu : modelElement.elements.filter(Menu)) {
//				if (!done.contains(menu)) {
//					menu.addTo(parentNode, done)
//				}
//			}
//			
//		}
//	}
//	
//	def private dispatch void addTo(Model model, IOutlineNode parentNode, List<UIElement> done) {
//		done.add(model)
//		val node = createEObjectNode(parentNode, decision) 
//		decision.uielements.forEach[it.addTo(node, done)]
//	}
//	
//	def private dispatch void addTo(UIVariable variable, IOutlineNode parentNode, List<UIElement> done) {
//		createEObjectNode(parentNode, variable)
//	}
//	def private dispatch void addTo(UIMethod method, IOutlineNode parentNode, List<UIElement> done) {
//		createEObjectNode(parentNode, method)
//	}
	
}
