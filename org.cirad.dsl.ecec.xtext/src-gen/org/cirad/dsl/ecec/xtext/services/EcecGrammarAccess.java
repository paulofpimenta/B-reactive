/*
* generated by Xtext
*/
package org.cirad.dsl.ecec.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EcecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cAgentAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cAgentAgentEntityParserRuleCall_0_0 = (RuleCall)cAgentAssignment_0.eContents().get(0);
		private final Assignment cSpatialEntityAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cSpatialEntitySpatialEntityParserRuleCall_1_0 = (RuleCall)cSpatialEntityAssignment_1.eContents().get(0);
		private final Assignment cSpaceAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cSpaceSpaceParserRuleCall_2_0 = (RuleCall)cSpaceAssignment_2.eContents().get(0);
		
		/// *----------------------------------------RULES DEFINITION------------------------------------------------------------* /
		//Model:
		//	agent+=AgentEntity* & spatialEntity+=SpatialEntity* & space=Space;
		public ParserRule getRule() { return rule; }

		//agent+=AgentEntity* & spatialEntity+=SpatialEntity* & space=Space
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//agent+=AgentEntity*
		public Assignment getAgentAssignment_0() { return cAgentAssignment_0; }

		//AgentEntity
		public RuleCall getAgentAgentEntityParserRuleCall_0_0() { return cAgentAgentEntityParserRuleCall_0_0; }

		//spatialEntity+=SpatialEntity*
		public Assignment getSpatialEntityAssignment_1() { return cSpatialEntityAssignment_1; }

		//SpatialEntity
		public RuleCall getSpatialEntitySpatialEntityParserRuleCall_1_0() { return cSpatialEntitySpatialEntityParserRuleCall_1_0; }

		//space=Space
		public Assignment getSpaceAssignment_2() { return cSpaceAssignment_2; }

		//Space
		public RuleCall getSpaceSpaceParserRuleCall_2_0() { return cSpaceSpaceParserRuleCall_2_0; }
	}

	public class SpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Space");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberOfCellsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNumcellsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumcellsINTTerminalRuleCall_3_1_0 = (RuleCall)cNumcellsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cTypeOfNeighborhoodKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cTypeneighAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cTypeneighTypeofNeighbourhoodEnumRuleCall_3_4_0 = (RuleCall)cTypeneighAssignment_3_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Space:
		//	"Space" name=ID "{" ("Number of cells" numcells=INT ";" "Type of Neighborhood" typeneigh=TypeofNeighbourhood ";")
		//	"}";
		public ParserRule getRule() { return rule; }

		//"Space" name=ID "{" ("Number of cells" numcells=INT ";" "Type of Neighborhood" typeneigh=TypeofNeighbourhood ";") "}"
		public Group getGroup() { return cGroup; }

		//"Space"
		public Keyword getSpaceKeyword_0() { return cSpaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"Number of cells" numcells=INT ";" "Type of Neighborhood" typeneigh=TypeofNeighbourhood ";"
		public Group getGroup_3() { return cGroup_3; }

		//"Number of cells"
		public Keyword getNumberOfCellsKeyword_3_0() { return cNumberOfCellsKeyword_3_0; }

		//numcells=INT
		public Assignment getNumcellsAssignment_3_1() { return cNumcellsAssignment_3_1; }

		//INT
		public RuleCall getNumcellsINTTerminalRuleCall_3_1_0() { return cNumcellsINTTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"Type of Neighborhood"
		public Keyword getTypeOfNeighborhoodKeyword_3_3() { return cTypeOfNeighborhoodKeyword_3_3; }

		//typeneigh=TypeofNeighbourhood
		public Assignment getTypeneighAssignment_3_4() { return cTypeneighAssignment_3_4; }

		//TypeofNeighbourhood
		public RuleCall getTypeneighTypeofNeighbourhoodEnumRuleCall_3_4_0() { return cTypeneighTypeofNeighbourhoodEnumRuleCall_3_4_0; }

		//";"
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOccupiedbyspatialEntityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOccupiedbyspatialEntitySpatialEntityCrossReference_1_0 = (CrossReference)cOccupiedbyspatialEntityAssignment_1.eContents().get(0);
		private final RuleCall cOccupiedbyspatialEntitySpatialEntityIDTerminalRuleCall_1_0_1 = (RuleCall)cOccupiedbyspatialEntitySpatialEntityCrossReference_1_0.eContents().get(1);
		private final Keyword cCellKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cOccupiedKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cOcuppiedAssignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cOcuppiedBooleanExpressionParserRuleCall_3_0_2_0 = (RuleCall)cOcuppiedAssignment_3_0_2.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cXKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cXAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_3_1_2_0 = (RuleCall)cXAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cYKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cYAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cYINTTerminalRuleCall_3_2_2_0 = (RuleCall)cYAssignment_3_2_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cIsOccupiedByKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cOccupiedbyAgentEntityAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cOccupiedbyAgentEntityAgentEntityCrossReference_3_3_1_0 = (CrossReference)cOccupiedbyAgentEntityAssignment_3_3_1.eContents().get(0);
		private final RuleCall cOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cOccupiedbyAgentEntityAgentEntityCrossReference_3_3_1_0.eContents().get(1);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cIsNotOccupiedByKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cOccupiedbyAgentEntityAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final CrossReference cOccupiedbyAgentEntityAgentEntityCrossReference_3_4_1_0 = (CrossReference)cOccupiedbyAgentEntityAssignment_3_4_1.eContents().get(0);
		private final RuleCall cOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_4_1_0_1 = (RuleCall)cOccupiedbyAgentEntityAgentEntityCrossReference_3_4_1_0.eContents().get(1);
		
		//Cell:
		//	{Cell} occupiedbyspatialEntity+=[SpatialEntity] ".cell." (("occupied" ":" ocuppied=BooleanExpression)? ("x" ":"
		//	x=INT)? ("y" ":" y=INT)? ("is occupied by" occupiedbyAgentEntity+=[AgentEntity])? ("is not occupied by"
		//	occupiedbyAgentEntity+=[AgentEntity])?);
		public ParserRule getRule() { return rule; }

		//{Cell} occupiedbyspatialEntity+=[SpatialEntity] ".cell." (("occupied" ":" ocuppied=BooleanExpression)? ("x" ":" x=INT)?
		//("y" ":" y=INT)? ("is occupied by" occupiedbyAgentEntity+=[AgentEntity])? ("is not occupied by"
		//occupiedbyAgentEntity+=[AgentEntity])?)
		public Group getGroup() { return cGroup; }

		//{Cell}
		public Action getCellAction_0() { return cCellAction_0; }

		//occupiedbyspatialEntity+=[SpatialEntity]
		public Assignment getOccupiedbyspatialEntityAssignment_1() { return cOccupiedbyspatialEntityAssignment_1; }

		//[SpatialEntity]
		public CrossReference getOccupiedbyspatialEntitySpatialEntityCrossReference_1_0() { return cOccupiedbyspatialEntitySpatialEntityCrossReference_1_0; }

		//ID
		public RuleCall getOccupiedbyspatialEntitySpatialEntityIDTerminalRuleCall_1_0_1() { return cOccupiedbyspatialEntitySpatialEntityIDTerminalRuleCall_1_0_1; }

		//".cell."
		public Keyword getCellKeyword_2() { return cCellKeyword_2; }

		//("occupied" ":" ocuppied=BooleanExpression)? ("x" ":" x=INT)? ("y" ":" y=INT)? ("is occupied by"
		//occupiedbyAgentEntity+=[AgentEntity])? ("is not occupied by" occupiedbyAgentEntity+=[AgentEntity])?
		public Group getGroup_3() { return cGroup_3; }

		//("occupied" ":" ocuppied=BooleanExpression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"occupied"
		public Keyword getOccupiedKeyword_3_0_0() { return cOccupiedKeyword_3_0_0; }

		//":"
		public Keyword getColonKeyword_3_0_1() { return cColonKeyword_3_0_1; }

		//ocuppied=BooleanExpression
		public Assignment getOcuppiedAssignment_3_0_2() { return cOcuppiedAssignment_3_0_2; }

		//BooleanExpression
		public RuleCall getOcuppiedBooleanExpressionParserRuleCall_3_0_2_0() { return cOcuppiedBooleanExpressionParserRuleCall_3_0_2_0; }

		//("x" ":" x=INT)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"x"
		public Keyword getXKeyword_3_1_0() { return cXKeyword_3_1_0; }

		//":"
		public Keyword getColonKeyword_3_1_1() { return cColonKeyword_3_1_1; }

		//x=INT
		public Assignment getXAssignment_3_1_2() { return cXAssignment_3_1_2; }

		//INT
		public RuleCall getXINTTerminalRuleCall_3_1_2_0() { return cXINTTerminalRuleCall_3_1_2_0; }

		//("y" ":" y=INT)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"y"
		public Keyword getYKeyword_3_2_0() { return cYKeyword_3_2_0; }

		//":"
		public Keyword getColonKeyword_3_2_1() { return cColonKeyword_3_2_1; }

		//y=INT
		public Assignment getYAssignment_3_2_2() { return cYAssignment_3_2_2; }

		//INT
		public RuleCall getYINTTerminalRuleCall_3_2_2_0() { return cYINTTerminalRuleCall_3_2_2_0; }

		//("is occupied by" occupiedbyAgentEntity+=[AgentEntity])?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"is occupied by"
		public Keyword getIsOccupiedByKeyword_3_3_0() { return cIsOccupiedByKeyword_3_3_0; }

		//occupiedbyAgentEntity+=[AgentEntity]
		public Assignment getOccupiedbyAgentEntityAssignment_3_3_1() { return cOccupiedbyAgentEntityAssignment_3_3_1; }

		//[AgentEntity]
		public CrossReference getOccupiedbyAgentEntityAgentEntityCrossReference_3_3_1_0() { return cOccupiedbyAgentEntityAgentEntityCrossReference_3_3_1_0; }

		//ID
		public RuleCall getOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_3_1_0_1() { return cOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_3_1_0_1; }

		//("is not occupied by" occupiedbyAgentEntity+=[AgentEntity])?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"is not occupied by"
		public Keyword getIsNotOccupiedByKeyword_3_4_0() { return cIsNotOccupiedByKeyword_3_4_0; }

		//occupiedbyAgentEntity+=[AgentEntity]
		public Assignment getOccupiedbyAgentEntityAssignment_3_4_1() { return cOccupiedbyAgentEntityAssignment_3_4_1; }

		//[AgentEntity]
		public CrossReference getOccupiedbyAgentEntityAgentEntityCrossReference_3_4_1_0() { return cOccupiedbyAgentEntityAgentEntityCrossReference_3_4_1_0; }

		//ID
		public RuleCall getOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_4_1_0_1() { return cOccupiedbyAgentEntityAgentEntityIDTerminalRuleCall_3_4_1_0_1; }
	}

	public class NeighborhoodExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NeighborhoodExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNeighborhoodExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNNeighbourhooEnumEnumRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		private final Assignment cAAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAAttributionTypeParserRuleCall_2_0 = (RuleCall)cAAssignment_2.eContents().get(0);
		
		//NeighborhoodExpression:
		//	{NeighborhoodExpression} n+=NeighbourhooEnum a=AttributionType;
		public ParserRule getRule() { return rule; }

		//{NeighborhoodExpression} n+=NeighbourhooEnum a=AttributionType
		public Group getGroup() { return cGroup; }

		//{NeighborhoodExpression}
		public Action getNeighborhoodExpressionAction_0() { return cNeighborhoodExpressionAction_0; }

		//n+=NeighbourhooEnum
		public Assignment getNAssignment_1() { return cNAssignment_1; }

		//NeighbourhooEnum
		public RuleCall getNNeighbourhooEnumEnumRuleCall_1_0() { return cNNeighbourhooEnumEnumRuleCall_1_0; }

		//a=AttributionType
		public Assignment getAAssignment_2() { return cAAssignment_2; }

		//AttributionType
		public RuleCall getAAttributionTypeParserRuleCall_2_0() { return cAAttributionTypeParserRuleCall_2_0; }
	}

	public class AgentEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AgentEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityAgentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberOfAgentsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAgentNumbersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAgentNumbersINTTerminalRuleCall_3_1_0 = (RuleCall)cAgentNumbersAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cInitialAgentsLocationKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cInitialAgentLocationAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cInitialAgentLocationInitialLocationTypeParserRuleCall_3_4_0 = (RuleCall)cInitialAgentLocationAssignment_3_4.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cAtKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cSpatialEntityAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final CrossReference cSpatialEntitySpatialEntityCrossReference_3_5_1_0 = (CrossReference)cSpatialEntityAssignment_3_5_1.eContents().get(0);
		private final RuleCall cSpatialEntitySpatialEntityIDTerminalRuleCall_3_5_1_0_1 = (RuleCall)cSpatialEntitySpatialEntityCrossReference_3_5_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cAgentparametersAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final Alternatives cAgentparametersAlternatives_3_7_0 = (Alternatives)cAgentparametersAssignment_3_7.eContents().get(0);
		private final RuleCall cAgentparametersParameterExpressionParserRuleCall_3_7_0_0 = (RuleCall)cAgentparametersAlternatives_3_7_0.eContents().get(0);
		private final RuleCall cAgentparametersDimensionExpressionParserRuleCall_3_7_0_1 = (RuleCall)cAgentparametersAlternatives_3_7_0.eContents().get(1);
		private final RuleCall cAgentparametersRandomBetweenExpressionParserRuleCall_3_7_0_2 = (RuleCall)cAgentparametersAlternatives_3_7_0.eContents().get(2);
		private final Assignment cAgentfunctionAssignment_3_8 = (Assignment)cGroup_3.eContents().get(8);
		private final RuleCall cAgentfunctionFunctionExpressionParserRuleCall_3_8_0 = (RuleCall)cAgentfunctionAssignment_3_8.eContents().get(0);
		private final Assignment cAgentbehaviourdefinitionAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cAgentbehaviourdefinitionBehaviourParserRuleCall_3_9_0 = (RuleCall)cAgentbehaviourdefinitionAssignment_3_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AgentEntity:
		//	"Entity Agent :" name=ID "{" ("Number of Agents :" agentNumbers=INT ";" "Initial Agents Location :"
		//	initialAgentLocation=InitialLocationType ("at" spatialEntity=[SpatialEntity])? ";"
		//	agentparameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)*
		//	agentfunction+=FunctionExpression? agentbehaviourdefinition+=Behaviour*) "}";
		public ParserRule getRule() { return rule; }

		//"Entity Agent :" name=ID "{" ("Number of Agents :" agentNumbers=INT ";" "Initial Agents Location :"
		//initialAgentLocation=InitialLocationType ("at" spatialEntity=[SpatialEntity])? ";"
		//agentparameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)*
		//agentfunction+=FunctionExpression? agentbehaviourdefinition+=Behaviour*) "}"
		public Group getGroup() { return cGroup; }

		//"Entity Agent :"
		public Keyword getEntityAgentKeyword_0() { return cEntityAgentKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"Number of Agents :" agentNumbers=INT ";" "Initial Agents Location :" initialAgentLocation=InitialLocationType ("at"
		//spatialEntity=[SpatialEntity])? ";" agentparameters+=(ParameterExpression | DimensionExpression |
		//RandomBetweenExpression)* agentfunction+=FunctionExpression? agentbehaviourdefinition+=Behaviour*
		public Group getGroup_3() { return cGroup_3; }

		//"Number of Agents :"
		public Keyword getNumberOfAgentsKeyword_3_0() { return cNumberOfAgentsKeyword_3_0; }

		//agentNumbers=INT
		public Assignment getAgentNumbersAssignment_3_1() { return cAgentNumbersAssignment_3_1; }

		//INT
		public RuleCall getAgentNumbersINTTerminalRuleCall_3_1_0() { return cAgentNumbersINTTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"Initial Agents Location :"
		public Keyword getInitialAgentsLocationKeyword_3_3() { return cInitialAgentsLocationKeyword_3_3; }

		//initialAgentLocation=InitialLocationType
		public Assignment getInitialAgentLocationAssignment_3_4() { return cInitialAgentLocationAssignment_3_4; }

		//InitialLocationType
		public RuleCall getInitialAgentLocationInitialLocationTypeParserRuleCall_3_4_0() { return cInitialAgentLocationInitialLocationTypeParserRuleCall_3_4_0; }

		//("at" spatialEntity=[SpatialEntity])?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//"at"
		public Keyword getAtKeyword_3_5_0() { return cAtKeyword_3_5_0; }

		//spatialEntity=[SpatialEntity]
		public Assignment getSpatialEntityAssignment_3_5_1() { return cSpatialEntityAssignment_3_5_1; }

		//[SpatialEntity]
		public CrossReference getSpatialEntitySpatialEntityCrossReference_3_5_1_0() { return cSpatialEntitySpatialEntityCrossReference_3_5_1_0; }

		//ID
		public RuleCall getSpatialEntitySpatialEntityIDTerminalRuleCall_3_5_1_0_1() { return cSpatialEntitySpatialEntityIDTerminalRuleCall_3_5_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_6() { return cSemicolonKeyword_3_6; }

		//agentparameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)*
		public Assignment getAgentparametersAssignment_3_7() { return cAgentparametersAssignment_3_7; }

		//ParameterExpression | DimensionExpression | RandomBetweenExpression
		public Alternatives getAgentparametersAlternatives_3_7_0() { return cAgentparametersAlternatives_3_7_0; }

		//ParameterExpression
		public RuleCall getAgentparametersParameterExpressionParserRuleCall_3_7_0_0() { return cAgentparametersParameterExpressionParserRuleCall_3_7_0_0; }

		//DimensionExpression
		public RuleCall getAgentparametersDimensionExpressionParserRuleCall_3_7_0_1() { return cAgentparametersDimensionExpressionParserRuleCall_3_7_0_1; }

		//RandomBetweenExpression
		public RuleCall getAgentparametersRandomBetweenExpressionParserRuleCall_3_7_0_2() { return cAgentparametersRandomBetweenExpressionParserRuleCall_3_7_0_2; }

		//agentfunction+=FunctionExpression?
		public Assignment getAgentfunctionAssignment_3_8() { return cAgentfunctionAssignment_3_8; }

		//FunctionExpression
		public RuleCall getAgentfunctionFunctionExpressionParserRuleCall_3_8_0() { return cAgentfunctionFunctionExpressionParserRuleCall_3_8_0; }

		//agentbehaviourdefinition+=Behaviour*
		public Assignment getAgentbehaviourdefinitionAssignment_3_9() { return cAgentbehaviourdefinitionAssignment_3_9; }

		//Behaviour
		public RuleCall getAgentbehaviourdefinitionBehaviourParserRuleCall_3_9_0() { return cAgentbehaviourdefinitionBehaviourParserRuleCall_3_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SpatialEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpatialEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpatialEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEntitiesPerCellKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNumberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_3_1_0 = (RuleCall)cNumberAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cInitialLocationTypeKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cLocationtypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cLocationtypeInitialLocationTypeParserRuleCall_3_4_0 = (RuleCall)cLocationtypeAssignment_3_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Keyword cPatchSizeKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cXAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cXINTTerminalRuleCall_3_7_0 = (RuleCall)cXAssignment_3_7.eContents().get(0);
		private final Keyword cXKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Assignment cYAssignment_3_9 = (Assignment)cGroup_3.eContents().get(9);
		private final RuleCall cYINTTerminalRuleCall_3_9_0 = (RuleCall)cYAssignment_3_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_10 = (Keyword)cGroup_3.eContents().get(10);
		private final Keyword cGapBetweenPatchesKeyword_3_11 = (Keyword)cGroup_3.eContents().get(11);
		private final Assignment cGapAssignment_3_12 = (Assignment)cGroup_3.eContents().get(12);
		private final RuleCall cGapINTTerminalRuleCall_3_12_0 = (RuleCall)cGapAssignment_3_12.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_13 = (Keyword)cGroup_3.eContents().get(13);
		private final Assignment cParametersAssignment_3_14 = (Assignment)cGroup_3.eContents().get(14);
		private final Alternatives cParametersAlternatives_3_14_0 = (Alternatives)cParametersAssignment_3_14.eContents().get(0);
		private final RuleCall cParametersParameterExpressionParserRuleCall_3_14_0_0 = (RuleCall)cParametersAlternatives_3_14_0.eContents().get(0);
		private final RuleCall cParametersDimensionExpressionParserRuleCall_3_14_0_1 = (RuleCall)cParametersAlternatives_3_14_0.eContents().get(1);
		private final RuleCall cParametersRandomBetweenExpressionParserRuleCall_3_14_0_2 = (RuleCall)cParametersAlternatives_3_14_0.eContents().get(2);
		private final Assignment cFunctionAssignment_3_15 = (Assignment)cGroup_3.eContents().get(15);
		private final RuleCall cFunctionFunctionExpressionParserRuleCall_3_15_0 = (RuleCall)cFunctionAssignment_3_15.eContents().get(0);
		private final Assignment cBehaviourdefinitionAssignment_3_16 = (Assignment)cGroup_3.eContents().get(16);
		private final RuleCall cBehaviourdefinitionBehaviourParserRuleCall_3_16_0 = (RuleCall)cBehaviourdefinitionAssignment_3_16.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SpatialEntity:
		//	"Spatial Entity :" name=ID "{" ("Entities per cell :" number=INT ";" "Initial Location Type :"
		//	locationtype=InitialLocationType ";" "Patch size :" X=INT "x" Y=INT ";" "Gap between patches:" gap=INT ";"
		//	parameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)* function+=FunctionExpression?
		//	behaviourdefinition+=Behaviour*) "}";
		public ParserRule getRule() { return rule; }

		//"Spatial Entity :" name=ID "{" ("Entities per cell :" number=INT ";" "Initial Location Type :"
		//locationtype=InitialLocationType ";" "Patch size :" X=INT "x" Y=INT ";" "Gap between patches:" gap=INT ";"
		//parameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)* function+=FunctionExpression?
		//behaviourdefinition+=Behaviour*) "}"
		public Group getGroup() { return cGroup; }

		//"Spatial Entity :"
		public Keyword getSpatialEntityKeyword_0() { return cSpatialEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"Entities per cell :" number=INT ";" "Initial Location Type :" locationtype=InitialLocationType ";" "Patch size :" X=INT
		//"x" Y=INT ";" "Gap between patches:" gap=INT ";" parameters+=(ParameterExpression | DimensionExpression |
		//RandomBetweenExpression)* function+=FunctionExpression? behaviourdefinition+=Behaviour*
		public Group getGroup_3() { return cGroup_3; }

		//"Entities per cell :"
		public Keyword getEntitiesPerCellKeyword_3_0() { return cEntitiesPerCellKeyword_3_0; }

		//number=INT
		public Assignment getNumberAssignment_3_1() { return cNumberAssignment_3_1; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_3_1_0() { return cNumberINTTerminalRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//"Initial Location Type :"
		public Keyword getInitialLocationTypeKeyword_3_3() { return cInitialLocationTypeKeyword_3_3; }

		//locationtype=InitialLocationType
		public Assignment getLocationtypeAssignment_3_4() { return cLocationtypeAssignment_3_4; }

		//InitialLocationType
		public RuleCall getLocationtypeInitialLocationTypeParserRuleCall_3_4_0() { return cLocationtypeInitialLocationTypeParserRuleCall_3_4_0; }

		//";"
		public Keyword getSemicolonKeyword_3_5() { return cSemicolonKeyword_3_5; }

		//"Patch size :"
		public Keyword getPatchSizeKeyword_3_6() { return cPatchSizeKeyword_3_6; }

		//X=INT
		public Assignment getXAssignment_3_7() { return cXAssignment_3_7; }

		//INT
		public RuleCall getXINTTerminalRuleCall_3_7_0() { return cXINTTerminalRuleCall_3_7_0; }

		//"x"
		public Keyword getXKeyword_3_8() { return cXKeyword_3_8; }

		//Y=INT
		public Assignment getYAssignment_3_9() { return cYAssignment_3_9; }

		//INT
		public RuleCall getYINTTerminalRuleCall_3_9_0() { return cYINTTerminalRuleCall_3_9_0; }

		//";"
		public Keyword getSemicolonKeyword_3_10() { return cSemicolonKeyword_3_10; }

		//"Gap between patches:"
		public Keyword getGapBetweenPatchesKeyword_3_11() { return cGapBetweenPatchesKeyword_3_11; }

		//gap=INT
		public Assignment getGapAssignment_3_12() { return cGapAssignment_3_12; }

		//INT
		public RuleCall getGapINTTerminalRuleCall_3_12_0() { return cGapINTTerminalRuleCall_3_12_0; }

		//";"
		public Keyword getSemicolonKeyword_3_13() { return cSemicolonKeyword_3_13; }

		//parameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)*
		public Assignment getParametersAssignment_3_14() { return cParametersAssignment_3_14; }

		//ParameterExpression | DimensionExpression | RandomBetweenExpression
		public Alternatives getParametersAlternatives_3_14_0() { return cParametersAlternatives_3_14_0; }

		//ParameterExpression
		public RuleCall getParametersParameterExpressionParserRuleCall_3_14_0_0() { return cParametersParameterExpressionParserRuleCall_3_14_0_0; }

		//DimensionExpression
		public RuleCall getParametersDimensionExpressionParserRuleCall_3_14_0_1() { return cParametersDimensionExpressionParserRuleCall_3_14_0_1; }

		//RandomBetweenExpression
		public RuleCall getParametersRandomBetweenExpressionParserRuleCall_3_14_0_2() { return cParametersRandomBetweenExpressionParserRuleCall_3_14_0_2; }

		//function+=FunctionExpression?
		public Assignment getFunctionAssignment_3_15() { return cFunctionAssignment_3_15; }

		//FunctionExpression
		public RuleCall getFunctionFunctionExpressionParserRuleCall_3_15_0() { return cFunctionFunctionExpressionParserRuleCall_3_15_0; }

		//behaviourdefinition+=Behaviour*
		public Assignment getBehaviourdefinitionAssignment_3_16() { return cBehaviourdefinitionAssignment_3_16; }

		//Behaviour
		public RuleCall getBehaviourdefinitionBehaviourParserRuleCall_3_16_0() { return cBehaviourdefinitionBehaviourParserRuleCall_3_16_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class InitialLocationTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitialLocationType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRandomKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//InitialLocationType:
		//	name="Random";
		public ParserRule getRule() { return rule; }

		//name="Random"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"Random"
		public Keyword getNameRandomKeyword_0() { return cNameRandomKeyword_0; }
	}

	public class BehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Behaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBehaviorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cStartsKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cHasStartAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cHasStartStartActivityDeclarationParserRuleCall_3_0_1_0 = (RuleCall)cHasStartAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_0_2 = (Group)cGroup_3_0.eContents().get(2);
		private final Keyword cCommaKeyword_3_0_2_0 = (Keyword)cGroup_3_0_2.eContents().get(0);
		private final Assignment cHasStartAssignment_3_0_2_1 = (Assignment)cGroup_3_0_2.eContents().get(1);
		private final RuleCall cHasStartStartActivityDeclarationParserRuleCall_3_0_2_1_0 = (RuleCall)cHasStartAssignment_3_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_3 = (Keyword)cGroup_3_0.eContents().get(3);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cFinishesKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cHasEndAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cHasEndFinishActivityParserRuleCall_3_1_1_0 = (RuleCall)cHasEndAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Keyword cCommaKeyword_3_1_2_0 = (Keyword)cGroup_3_1_2.eContents().get(0);
		private final Assignment cHasEndAssignment_3_1_2_1 = (Assignment)cGroup_3_1_2.eContents().get(1);
		private final RuleCall cHasEndFinishActivityParserRuleCall_3_1_2_1_0 = (RuleCall)cHasEndAssignment_3_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cConditionsKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cHasConditionAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cHasConditionConditionParserRuleCall_3_2_1_0 = (RuleCall)cHasConditionAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_2_2 = (Group)cGroup_3_2.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_2_0 = (Keyword)cGroup_3_2_2.eContents().get(0);
		private final Assignment cHasConditionAssignment_3_2_2_1 = (Assignment)cGroup_3_2_2.eContents().get(1);
		private final RuleCall cHasConditionConditionParserRuleCall_3_2_2_1_0 = (RuleCall)cHasConditionAssignment_3_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		private final Keyword cThenKeyword_3_2_4 = (Keyword)cGroup_3_2.eContents().get(4);
		private final Assignment cExecutesAssignment_3_2_5 = (Assignment)cGroup_3_2.eContents().get(5);
		private final RuleCall cExecutesExecutionDeclarationParserRuleCall_3_2_5_0 = (RuleCall)cExecutesAssignment_3_2_5.eContents().get(0);
		private final Group cGroup_3_2_6 = (Group)cGroup_3_2.eContents().get(6);
		private final Keyword cCommaKeyword_3_2_6_0 = (Keyword)cGroup_3_2_6.eContents().get(0);
		private final Assignment cExecutesAssignment_3_2_6_1 = (Assignment)cGroup_3_2_6.eContents().get(1);
		private final RuleCall cExecutesExecutionDeclarationParserRuleCall_3_2_6_1_0 = (RuleCall)cExecutesAssignment_3_2_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2_7 = (Keyword)cGroup_3_2.eContents().get(7);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Behaviour:
		//	"Behavior" name=ID ":" ("Starts {" hasStart+=StartActivityDeclaration ("," hasStart+=StartActivityDeclaration)* "}" &
		//	"Finishes {" hasEnd+=FinishActivity ("," hasEnd+=FinishActivity)* "}" & "Conditions {" hasCondition+=Condition (","
		//	hasCondition+=Condition)* "}" "then {" executes+=ExecutionDeclaration ("," executes+=ExecutionDeclaration)* "}")
		//	"End.";
		public ParserRule getRule() { return rule; }

		//"Behavior" name=ID ":" ("Starts {" hasStart+=StartActivityDeclaration ("," hasStart+=StartActivityDeclaration)* "}" &
		//"Finishes {" hasEnd+=FinishActivity ("," hasEnd+=FinishActivity)* "}" & "Conditions {" hasCondition+=Condition (","
		//hasCondition+=Condition)* "}" "then {" executes+=ExecutionDeclaration ("," executes+=ExecutionDeclaration)* "}")
		//"End."
		public Group getGroup() { return cGroup; }

		//"Behavior"
		public Keyword getBehaviorKeyword_0() { return cBehaviorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"Starts {" hasStart+=StartActivityDeclaration ("," hasStart+=StartActivityDeclaration)* "}" & "Finishes {"
		//hasEnd+=FinishActivity ("," hasEnd+=FinishActivity)* "}" & "Conditions {" hasCondition+=Condition (","
		//hasCondition+=Condition)* "}" "then {" executes+=ExecutionDeclaration ("," executes+=ExecutionDeclaration)* "}"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"Starts {" hasStart+=StartActivityDeclaration ("," hasStart+=StartActivityDeclaration)* "}"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"Starts {"
		public Keyword getStartsKeyword_3_0_0() { return cStartsKeyword_3_0_0; }

		//hasStart+=StartActivityDeclaration
		public Assignment getHasStartAssignment_3_0_1() { return cHasStartAssignment_3_0_1; }

		//StartActivityDeclaration
		public RuleCall getHasStartStartActivityDeclarationParserRuleCall_3_0_1_0() { return cHasStartStartActivityDeclarationParserRuleCall_3_0_1_0; }

		//("," hasStart+=StartActivityDeclaration)*
		public Group getGroup_3_0_2() { return cGroup_3_0_2; }

		//","
		public Keyword getCommaKeyword_3_0_2_0() { return cCommaKeyword_3_0_2_0; }

		//hasStart+=StartActivityDeclaration
		public Assignment getHasStartAssignment_3_0_2_1() { return cHasStartAssignment_3_0_2_1; }

		//StartActivityDeclaration
		public RuleCall getHasStartStartActivityDeclarationParserRuleCall_3_0_2_1_0() { return cHasStartStartActivityDeclarationParserRuleCall_3_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_3() { return cRightCurlyBracketKeyword_3_0_3; }

		//"Finishes {" hasEnd+=FinishActivity ("," hasEnd+=FinishActivity)* "}"
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"Finishes {"
		public Keyword getFinishesKeyword_3_1_0() { return cFinishesKeyword_3_1_0; }

		//hasEnd+=FinishActivity
		public Assignment getHasEndAssignment_3_1_1() { return cHasEndAssignment_3_1_1; }

		//FinishActivity
		public RuleCall getHasEndFinishActivityParserRuleCall_3_1_1_0() { return cHasEndFinishActivityParserRuleCall_3_1_1_0; }

		//("," hasEnd+=FinishActivity)*
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }

		//","
		public Keyword getCommaKeyword_3_1_2_0() { return cCommaKeyword_3_1_2_0; }

		//hasEnd+=FinishActivity
		public Assignment getHasEndAssignment_3_1_2_1() { return cHasEndAssignment_3_1_2_1; }

		//FinishActivity
		public RuleCall getHasEndFinishActivityParserRuleCall_3_1_2_1_0() { return cHasEndFinishActivityParserRuleCall_3_1_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }

		//"Conditions {" hasCondition+=Condition ("," hasCondition+=Condition)* "}" "then {" executes+=ExecutionDeclaration (","
		//executes+=ExecutionDeclaration)* "}"
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"Conditions {"
		public Keyword getConditionsKeyword_3_2_0() { return cConditionsKeyword_3_2_0; }

		//hasCondition+=Condition
		public Assignment getHasConditionAssignment_3_2_1() { return cHasConditionAssignment_3_2_1; }

		//Condition
		public RuleCall getHasConditionConditionParserRuleCall_3_2_1_0() { return cHasConditionConditionParserRuleCall_3_2_1_0; }

		//("," hasCondition+=Condition)*
		public Group getGroup_3_2_2() { return cGroup_3_2_2; }

		//","
		public Keyword getCommaKeyword_3_2_2_0() { return cCommaKeyword_3_2_2_0; }

		//hasCondition+=Condition
		public Assignment getHasConditionAssignment_3_2_2_1() { return cHasConditionAssignment_3_2_2_1; }

		//Condition
		public RuleCall getHasConditionConditionParserRuleCall_3_2_2_1_0() { return cHasConditionConditionParserRuleCall_3_2_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2_3() { return cRightCurlyBracketKeyword_3_2_3; }

		//"then {"
		public Keyword getThenKeyword_3_2_4() { return cThenKeyword_3_2_4; }

		//executes+=ExecutionDeclaration
		public Assignment getExecutesAssignment_3_2_5() { return cExecutesAssignment_3_2_5; }

		//ExecutionDeclaration
		public RuleCall getExecutesExecutionDeclarationParserRuleCall_3_2_5_0() { return cExecutesExecutionDeclarationParserRuleCall_3_2_5_0; }

		//("," executes+=ExecutionDeclaration)*
		public Group getGroup_3_2_6() { return cGroup_3_2_6; }

		//","
		public Keyword getCommaKeyword_3_2_6_0() { return cCommaKeyword_3_2_6_0; }

		//executes+=ExecutionDeclaration
		public Assignment getExecutesAssignment_3_2_6_1() { return cExecutesAssignment_3_2_6_1; }

		//ExecutionDeclaration
		public RuleCall getExecutesExecutionDeclarationParserRuleCall_3_2_6_1_0() { return cExecutesExecutionDeclarationParserRuleCall_3_2_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2_7() { return cRightCurlyBracketKeyword_3_2_7; }

		//"End."
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class BehaviourQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviourQualifiedName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNameBehaviourCrossReference_0 = (CrossReference)cNameAssignment.eContents().get(0);
		private final RuleCall cNameBehaviourQualifiedNameParserRuleCall_0_1 = (RuleCall)cNameBehaviourCrossReference_0.eContents().get(1);
		
		//BehaviourQualifiedName:
		//	name+=[Behaviour|QualifiedName];
		public ParserRule getRule() { return rule; }

		//name+=[Behaviour|QualifiedName]
		public Assignment getNameAssignment() { return cNameAssignment; }

		//[Behaviour|QualifiedName]
		public CrossReference getNameBehaviourCrossReference_0() { return cNameBehaviourCrossReference_0; }

		//QualifiedName
		public RuleCall getNameBehaviourQualifiedNameParserRuleCall_0_1() { return cNameBehaviourQualifiedNameParserRuleCall_0_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ParameterQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterQualifiedNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameParameterExpressionCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameParameterExpressionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cNameParameterExpressionCrossReference_2_0.eContents().get(1);
		private final Assignment cAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAAttributionParserRuleCall_3_0 = (RuleCall)cAAssignment_3.eContents().get(0);
		
		//ParameterQualifiedName:
		//	{ParameterQualifiedName} "parameter" name=[ParameterExpression|QualifiedName] a=Attribution;
		public ParserRule getRule() { return rule; }

		//{ParameterQualifiedName} "parameter" name=[ParameterExpression|QualifiedName] a=Attribution
		public Group getGroup() { return cGroup; }

		//{ParameterQualifiedName}
		public Action getParameterQualifiedNameAction_0() { return cParameterQualifiedNameAction_0; }

		//"parameter"
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }

		//name=[ParameterExpression|QualifiedName]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[ParameterExpression|QualifiedName]
		public CrossReference getNameParameterExpressionCrossReference_2_0() { return cNameParameterExpressionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getNameParameterExpressionQualifiedNameParserRuleCall_2_0_1() { return cNameParameterExpressionQualifiedNameParserRuleCall_2_0_1; }

		//a=Attribution
		public Assignment getAAssignment_3() { return cAAssignment_3; }

		//Attribution
		public RuleCall getAAttributionParserRuleCall_3_0() { return cAAttributionParserRuleCall_3_0; }
	}

	public class FunctionQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionQualifiedNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameFunctionExpressionCrossReference_2_0 = (CrossReference)cNameAssignment_2.eContents().get(0);
		private final RuleCall cNameFunctionExpressionQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cNameFunctionExpressionCrossReference_2_0.eContents().get(1);
		private final Assignment cAAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAAttributionParserRuleCall_3_0 = (RuleCall)cAAssignment_3.eContents().get(0);
		
		//FunctionQualifiedName:
		//	{FunctionQualifiedName} "function" name=[FunctionExpression|QualifiedName] a=Attribution;
		public ParserRule getRule() { return rule; }

		//{FunctionQualifiedName} "function" name=[FunctionExpression|QualifiedName] a=Attribution
		public Group getGroup() { return cGroup; }

		//{FunctionQualifiedName}
		public Action getFunctionQualifiedNameAction_0() { return cFunctionQualifiedNameAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//name=[FunctionExpression|QualifiedName]
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//[FunctionExpression|QualifiedName]
		public CrossReference getNameFunctionExpressionCrossReference_2_0() { return cNameFunctionExpressionCrossReference_2_0; }

		//QualifiedName
		public RuleCall getNameFunctionExpressionQualifiedNameParserRuleCall_2_0_1() { return cNameFunctionExpressionQualifiedNameParserRuleCall_2_0_1; }

		//a=Attribution
		public Assignment getAAssignment_3() { return cAAssignment_3; }

		//Attribution
		public RuleCall getAAttributionParserRuleCall_3_0() { return cAAttributionParserRuleCall_3_0; }
	}

	public class AttributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cEqualityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEqualityEqualityEnumRuleCall_1_0 = (RuleCall)cEqualityAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Attribution:
		//	{Attribution} equality=Equality expression= / *TRY TO CHANGE TO expression=PRIMARY * / Primary;
		public ParserRule getRule() { return rule; }

		//{Attribution} equality=Equality expression= / *TRY TO CHANGE TO expression=PRIMARY * / Primary
		public Group getGroup() { return cGroup; }

		//{Attribution}
		public Action getAttributionAction_0() { return cAttributionAction_0; }

		//equality=Equality
		public Assignment getEqualityAssignment_1() { return cEqualityAssignment_1; }

		//Equality
		public RuleCall getEqualityEqualityEnumRuleCall_1_0() { return cEqualityEqualityEnumRuleCall_1_0; }

		//expression= / *TRY TO CHANGE TO expression=PRIMARY * / Primary
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		/// *TRY TO CHANGE TO expression=PRIMARY * / Primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_0() { return cExpressionPrimaryParserRuleCall_2_0; }
	}

	public class AttributionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributionTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cPAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPParameterQualifiedNameParserRuleCall_0_1_0 = (RuleCall)cPAssignment_0_1.eContents().get(0);
		private final Assignment cFAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFFunctionQualifiedNameParserRuleCall_1_0 = (RuleCall)cFAssignment_1.eContents().get(0);
		
		//AttributionType:
		//	{AttributionType} p=ParameterQualifiedName | f=FunctionQualifiedName;
		public ParserRule getRule() { return rule; }

		//{AttributionType} p=ParameterQualifiedName | f=FunctionQualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AttributionType} p=ParameterQualifiedName
		public Group getGroup_0() { return cGroup_0; }

		//{AttributionType}
		public Action getAttributionTypeAction_0_0() { return cAttributionTypeAction_0_0; }

		//p=ParameterQualifiedName
		public Assignment getPAssignment_0_1() { return cPAssignment_0_1; }

		//ParameterQualifiedName
		public RuleCall getPParameterQualifiedNameParserRuleCall_0_1_0() { return cPParameterQualifiedNameParserRuleCall_0_1_0; }

		//f=FunctionQualifiedName
		public Assignment getFAssignment_1() { return cFAssignment_1; }

		//FunctionQualifiedName
		public RuleCall getFFunctionQualifiedNameParserRuleCall_1_0() { return cFFunctionQualifiedNameParserRuleCall_1_0; }
	}

	public class StartActivityDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StartActivityDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSaefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSaefStarAndEndExpEnumRuleCall_0_0 = (RuleCall)cSaefAssignment_0.eContents().get(0);
		private final Assignment cBe2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBe2BehaviourQualifiedNameParserRuleCall_1_0 = (RuleCall)cBe2Assignment_1.eContents().get(0);
		
		//StartActivityDeclaration:
		//	saef+=StarAndEndExp be2+=BehaviourQualifiedName;
		public ParserRule getRule() { return rule; }

		//saef+=StarAndEndExp be2+=BehaviourQualifiedName
		public Group getGroup() { return cGroup; }

		//saef+=StarAndEndExp
		public Assignment getSaefAssignment_0() { return cSaefAssignment_0; }

		//StarAndEndExp
		public RuleCall getSaefStarAndEndExpEnumRuleCall_0_0() { return cSaefStarAndEndExpEnumRuleCall_0_0; }

		//be2+=BehaviourQualifiedName
		public Assignment getBe2Assignment_1() { return cBe2Assignment_1; }

		//BehaviourQualifiedName
		public RuleCall getBe2BehaviourQualifiedNameParserRuleCall_1_0() { return cBe2BehaviourQualifiedNameParserRuleCall_1_0; }
	}

	public class FinishActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FinishActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSaefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSaefStarAndEndExpEnumRuleCall_0_0 = (RuleCall)cSaefAssignment_0.eContents().get(0);
		private final Assignment cBe2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBe2BehaviourQualifiedNameParserRuleCall_1_0 = (RuleCall)cBe2Assignment_1.eContents().get(0);
		
		//FinishActivity:
		//	saef+=StarAndEndExp be2+=BehaviourQualifiedName;
		public ParserRule getRule() { return rule; }

		//saef+=StarAndEndExp be2+=BehaviourQualifiedName
		public Group getGroup() { return cGroup; }

		//saef+=StarAndEndExp
		public Assignment getSaefAssignment_0() { return cSaefAssignment_0; }

		//StarAndEndExp
		public RuleCall getSaefStarAndEndExpEnumRuleCall_0_0() { return cSaefStarAndEndExpEnumRuleCall_0_0; }

		//be2+=BehaviourQualifiedName
		public Assignment getBe2Assignment_1() { return cBe2Assignment_1; }

		//BehaviourQualifiedName
		public RuleCall getBe2BehaviourQualifiedNameParserRuleCall_1_0() { return cBe2BehaviourQualifiedNameParserRuleCall_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cCeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCeConditionEnumEnumRuleCall_1_0 = (RuleCall)cCeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cAAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cAAttributionTypeParserRuleCall_3_0_0 = (RuleCall)cAAssignment_3_0.eContents().get(0);
		private final Assignment cMAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cMCellParserRuleCall_3_1_0 = (RuleCall)cMAssignment_3_1.eContents().get(0);
		private final Assignment cNAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cNNeighborhoodExpressionParserRuleCall_3_2_0 = (RuleCall)cNAssignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition:
		//	{Condition} ce+=ConditionEnum "(" (a+=AttributionType | m=Cell | n=NeighborhoodExpression) ")";
		public ParserRule getRule() { return rule; }

		//{Condition} ce+=ConditionEnum "(" (a+=AttributionType | m=Cell | n=NeighborhoodExpression) ")"
		public Group getGroup() { return cGroup; }

		//{Condition}
		public Action getConditionAction_0() { return cConditionAction_0; }

		//ce+=ConditionEnum
		public Assignment getCeAssignment_1() { return cCeAssignment_1; }

		//ConditionEnum
		public RuleCall getCeConditionEnumEnumRuleCall_1_0() { return cCeConditionEnumEnumRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//a+=AttributionType | m=Cell | n=NeighborhoodExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//a+=AttributionType
		public Assignment getAAssignment_3_0() { return cAAssignment_3_0; }

		//AttributionType
		public RuleCall getAAttributionTypeParserRuleCall_3_0_0() { return cAAttributionTypeParserRuleCall_3_0_0; }

		//m=Cell
		public Assignment getMAssignment_3_1() { return cMAssignment_3_1; }

		//Cell
		public RuleCall getMCellParserRuleCall_3_1_0() { return cMCellParserRuleCall_3_1_0; }

		//n=NeighborhoodExpression
		public Assignment getNAssignment_3_2() { return cNAssignment_3_2; }

		//NeighborhoodExpression
		public RuleCall getNNeighborhoodExpressionParserRuleCall_3_2_0() { return cNNeighborhoodExpressionParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ExecutionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecutionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExecutionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cAAttributionTypeParserRuleCall_2_0_0 = (RuleCall)cAAssignment_2_0.eContents().get(0);
		private final Assignment cArgAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cArgBehaviourQualifiedNameParserRuleCall_2_1_0 = (RuleCall)cArgAssignment_2_1.eContents().get(0);
		private final Assignment cMAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cMMoveExpressionParserRuleCall_2_2_0 = (RuleCall)cMAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExecutionDeclaration:
		//	{ExecutionDeclaration} "(" (a+=AttributionType | arg=BehaviourQualifiedName | m=MoveExpression) ")";
		public ParserRule getRule() { return rule; }

		//{ExecutionDeclaration} "(" (a+=AttributionType | arg=BehaviourQualifiedName | m=MoveExpression) ")"
		public Group getGroup() { return cGroup; }

		//{ExecutionDeclaration}
		public Action getExecutionDeclarationAction_0() { return cExecutionDeclarationAction_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//a+=AttributionType | arg=BehaviourQualifiedName | m=MoveExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//a+=AttributionType
		public Assignment getAAssignment_2_0() { return cAAssignment_2_0; }

		//AttributionType
		public RuleCall getAAttributionTypeParserRuleCall_2_0_0() { return cAAttributionTypeParserRuleCall_2_0_0; }

		//arg=BehaviourQualifiedName
		public Assignment getArgAssignment_2_1() { return cArgAssignment_2_1; }

		//BehaviourQualifiedName
		public RuleCall getArgBehaviourQualifiedNameParserRuleCall_2_1_0() { return cArgBehaviourQualifiedNameParserRuleCall_2_1_0; }

		//m=MoveExpression
		public Assignment getMAssignment_2_2() { return cMAssignment_2_2; }

		//MoveExpression
		public RuleCall getMMoveExpressionParserRuleCall_2_2_0() { return cMMoveExpressionParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	Primary (({Multi.left=current} "*" | {Div.left=current} "/") right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary (({Multi.left=current} "*" | {Div.left=current} "/") right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_1_0() { return cRightPrimaryParserRuleCall_1_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFLOATParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cParametersAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cParametersParameterExpressionCrossReference_1_0 = (CrossReference)cParametersAssignment_1.eContents().get(0);
		private final RuleCall cParametersParameterExpressionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cParametersParameterExpressionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns Expression:
		//	FLOAT | parameters=[ParameterExpression|QualifiedName] | "(" Addition ")";
		public ParserRule getRule() { return rule; }

		//FLOAT | parameters=[ParameterExpression|QualifiedName] | "(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOAT
		public RuleCall getFLOATParserRuleCall_0() { return cFLOATParserRuleCall_0; }

		//parameters=[ParameterExpression|QualifiedName]
		public Assignment getParametersAssignment_1() { return cParametersAssignment_1; }

		//[ParameterExpression|QualifiedName]
		public CrossReference getParametersParameterExpressionCrossReference_1_0() { return cParametersParameterExpressionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getParametersParameterExpressionQualifiedNameParserRuleCall_1_0_1() { return cParametersParameterExpressionQualifiedNameParserRuleCall_1_0_1; }

		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FLOAT:
		//	value=INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//value=INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAlgebricExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDimensionExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRandomBetweenExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	AlgebricExpression | BooleanExpression | DimensionExpression | RandomBetweenExpression;
		public ParserRule getRule() { return rule; }

		//AlgebricExpression | BooleanExpression | DimensionExpression | RandomBetweenExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//AlgebricExpression
		public RuleCall getAlgebricExpressionParserRuleCall_0() { return cAlgebricExpressionParserRuleCall_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_1() { return cBooleanExpressionParserRuleCall_1; }

		//DimensionExpression
		public RuleCall getDimensionExpressionParserRuleCall_2() { return cDimensionExpressionParserRuleCall_2; }

		//RandomBetweenExpression
		public RuleCall getRandomBetweenExpressionParserRuleCall_3() { return cRandomBetweenExpressionParserRuleCall_3; }
	}

	public class AlgebricExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AlgebricExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgsAdditionParserRuleCall_0_0 = (RuleCall)cArgsAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsAdditionParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cArgParameterExpressionCrossReference_2_1_0 = (CrossReference)cArgAssignment_2_1.eContents().get(0);
		private final RuleCall cArgParameterExpressionQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cArgParameterExpressionCrossReference_2_1_0.eContents().get(1);
		
		//AlgebricExpression:
		//	args+=Addition args+=Addition* ("% of" arg=[ParameterExpression|QualifiedName])?;
		public ParserRule getRule() { return rule; }

		//args+=Addition args+=Addition* ("% of" arg=[ParameterExpression|QualifiedName])?
		public Group getGroup() { return cGroup; }

		//args+=Addition
		public Assignment getArgsAssignment_0() { return cArgsAssignment_0; }

		//Addition
		public RuleCall getArgsAdditionParserRuleCall_0_0() { return cArgsAdditionParserRuleCall_0_0; }

		//args+=Addition*
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//Addition
		public RuleCall getArgsAdditionParserRuleCall_1_0() { return cArgsAdditionParserRuleCall_1_0; }

		//("% of" arg=[ParameterExpression|QualifiedName])?
		public Group getGroup_2() { return cGroup_2; }

		//"% of"
		public Keyword getOfKeyword_2_0() { return cOfKeyword_2_0; }

		//arg=[ParameterExpression|QualifiedName]
		public Assignment getArgAssignment_2_1() { return cArgAssignment_2_1; }

		//[ParameterExpression|QualifiedName]
		public CrossReference getArgParameterExpressionCrossReference_2_1_0() { return cArgParameterExpressionCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getArgParameterExpressionQualifiedNameParserRuleCall_2_1_0_1() { return cArgParameterExpressionQualifiedNameParserRuleCall_2_1_0_1; }
	}

	public class MoveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MoveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameMoveToKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cMoveAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cMoveAlternatives_1_0 = (Alternatives)cMoveAssignment_1.eContents().get(0);
		private final RuleCall cMoveCellParserRuleCall_1_0_0 = (RuleCall)cMoveAlternatives_1_0.eContents().get(0);
		private final RuleCall cMoveNeighborhoodExpressionParserRuleCall_1_0_1 = (RuleCall)cMoveAlternatives_1_0.eContents().get(1);
		
		//MoveExpression:
		//	name="move to " move=(Cell | NeighborhoodExpression);
		public ParserRule getRule() { return rule; }

		//name="move to " move=(Cell | NeighborhoodExpression)
		public Group getGroup() { return cGroup; }

		//name="move to "
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"move to "
		public Keyword getNameMoveToKeyword_0_0() { return cNameMoveToKeyword_0_0; }

		//move=(Cell | NeighborhoodExpression)
		public Assignment getMoveAssignment_1() { return cMoveAssignment_1; }

		//Cell | NeighborhoodExpression
		public Alternatives getMoveAlternatives_1_0() { return cMoveAlternatives_1_0; }

		//Cell
		public RuleCall getMoveCellParserRuleCall_1_0_0() { return cMoveCellParserRuleCall_1_0_0; }

		//NeighborhoodExpression
		public RuleCall getMoveNeighborhoodExpressionParserRuleCall_1_0_1() { return cMoveNeighborhoodExpressionParserRuleCall_1_0_1; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanExpression:
		//	{BooleanExpression} (value?="true" | "false");
		public ParserRule getRule() { return rule; }

		//{BooleanExpression} (value?="true" | "false")
		public Group getGroup() { return cGroup; }

		//{BooleanExpression}
		public Action getBooleanExpressionAction_0() { return cBooleanExpressionAction_0; }

		//value?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value?="true"
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}

	public class DimensionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DimensionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDDimensionsParserRuleCall_0_0 = (RuleCall)cDAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DimensionExpression:
		//	d=Dimensions ";";
		public ParserRule getRule() { return rule; }

		//d=Dimensions ";"
		public Group getGroup() { return cGroup; }

		//d=Dimensions
		public Assignment getDAssignment_0() { return cDAssignment_0; }

		//Dimensions
		public RuleCall getDDimensionsParserRuleCall_0_0() { return cDDimensionsParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class RandomBetweenExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomBetweenExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRandomBetweenExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRMathFunctionsEnumEnumRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBetweenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cFAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cFFLOATParserRuleCall_2_1_0_0 = (RuleCall)cFAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cAlternatives_2_1.eContents().get(1);
		private final Keyword cParameterKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cF1Assignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final CrossReference cF1ParameterExpressionCrossReference_2_1_1_1_0 = (CrossReference)cF1Assignment_2_1_1_1.eContents().get(0);
		private final RuleCall cF1ParameterExpressionQualifiedNameParserRuleCall_2_1_1_1_0_1 = (RuleCall)cF1ParameterExpressionCrossReference_2_1_1_1_0.eContents().get(1);
		private final Keyword cAndKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_3 = (Alternatives)cGroup_2.eContents().get(3);
		private final Assignment cF2Assignment_2_3_0 = (Assignment)cAlternatives_2_3.eContents().get(0);
		private final RuleCall cF2FLOATParserRuleCall_2_3_0_0 = (RuleCall)cF2Assignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cAlternatives_2_3.eContents().get(1);
		private final Keyword cParameterKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cF3Assignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final CrossReference cF3ParameterExpressionCrossReference_2_3_1_1_0 = (CrossReference)cF3Assignment_2_3_1_1.eContents().get(0);
		private final RuleCall cF3ParameterExpressionQualifiedNameParserRuleCall_2_3_1_1_0_1 = (RuleCall)cF3ParameterExpressionCrossReference_2_3_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RandomBetweenExpression:
		//	{RandomBetweenExpression} r=MathFunctionsEnum? ("between" (f=FLOAT | "parameter"
		//	f1=[ParameterExpression|QualifiedName]) "and" (f2=FLOAT | "parameter" f3=[ParameterExpression|QualifiedName]))? ";";
		public ParserRule getRule() { return rule; }

		//{RandomBetweenExpression} r=MathFunctionsEnum? ("between" (f=FLOAT | "parameter" f1=[ParameterExpression|QualifiedName])
		//"and" (f2=FLOAT | "parameter" f3=[ParameterExpression|QualifiedName]))? ";"
		public Group getGroup() { return cGroup; }

		//{RandomBetweenExpression}
		public Action getRandomBetweenExpressionAction_0() { return cRandomBetweenExpressionAction_0; }

		//r=MathFunctionsEnum?
		public Assignment getRAssignment_1() { return cRAssignment_1; }

		//MathFunctionsEnum
		public RuleCall getRMathFunctionsEnumEnumRuleCall_1_0() { return cRMathFunctionsEnumEnumRuleCall_1_0; }

		//("between" (f=FLOAT | "parameter" f1=[ParameterExpression|QualifiedName]) "and" (f2=FLOAT | "parameter"
		//f3=[ParameterExpression|QualifiedName]))?
		public Group getGroup_2() { return cGroup_2; }

		//"between"
		public Keyword getBetweenKeyword_2_0() { return cBetweenKeyword_2_0; }

		//f=FLOAT | "parameter" f1=[ParameterExpression|QualifiedName]
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//f=FLOAT
		public Assignment getFAssignment_2_1_0() { return cFAssignment_2_1_0; }

		//FLOAT
		public RuleCall getFFLOATParserRuleCall_2_1_0_0() { return cFFLOATParserRuleCall_2_1_0_0; }

		//"parameter" f1=[ParameterExpression|QualifiedName]
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"parameter"
		public Keyword getParameterKeyword_2_1_1_0() { return cParameterKeyword_2_1_1_0; }

		//f1=[ParameterExpression|QualifiedName]
		public Assignment getF1Assignment_2_1_1_1() { return cF1Assignment_2_1_1_1; }

		//[ParameterExpression|QualifiedName]
		public CrossReference getF1ParameterExpressionCrossReference_2_1_1_1_0() { return cF1ParameterExpressionCrossReference_2_1_1_1_0; }

		//QualifiedName
		public RuleCall getF1ParameterExpressionQualifiedNameParserRuleCall_2_1_1_1_0_1() { return cF1ParameterExpressionQualifiedNameParserRuleCall_2_1_1_1_0_1; }

		//"and"
		public Keyword getAndKeyword_2_2() { return cAndKeyword_2_2; }

		//f2=FLOAT | "parameter" f3=[ParameterExpression|QualifiedName]
		public Alternatives getAlternatives_2_3() { return cAlternatives_2_3; }

		//f2=FLOAT
		public Assignment getF2Assignment_2_3_0() { return cF2Assignment_2_3_0; }

		//FLOAT
		public RuleCall getF2FLOATParserRuleCall_2_3_0_0() { return cF2FLOATParserRuleCall_2_3_0_0; }

		//"parameter" f3=[ParameterExpression|QualifiedName]
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//"parameter"
		public Keyword getParameterKeyword_2_3_1_0() { return cParameterKeyword_2_3_1_0; }

		//f3=[ParameterExpression|QualifiedName]
		public Assignment getF3Assignment_2_3_1_1() { return cF3Assignment_2_3_1_1; }

		//[ParameterExpression|QualifiedName]
		public CrossReference getF3ParameterExpressionCrossReference_2_3_1_1_0() { return cF3ParameterExpressionCrossReference_2_3_1_1_0; }

		//QualifiedName
		public RuleCall getF3ParameterExpressionQualifiedNameParserRuleCall_2_3_1_1_0_1() { return cF3ParameterExpressionQualifiedNameParserRuleCall_2_3_1_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ParameterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExExpressionParserRuleCall_3_0 = (RuleCall)cExAssignment_3.eContents().get(0);
		
		//ParameterExpression:
		//	"Parameter" name=ID ":" ex=Expression;
		public ParserRule getRule() { return rule; }

		//"Parameter" name=ID ":" ex=Expression
		public Group getGroup() { return cGroup; }

		//"Parameter"
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//ex=Expression
		public Assignment getExAssignment_3() { return cExAssignment_3; }

		//Expression
		public RuleCall getExExpressionParserRuleCall_3_0() { return cExExpressionParserRuleCall_3_0; }
	}

	public class FunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cRightAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cRightAdditionParserRuleCall_3_0_0 = (RuleCall)cRightAssignment_3_0.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionExpression:
		//	"Function" name=ID "=" (right+=Addition right+=Addition*) ";";
		public ParserRule getRule() { return rule; }

		//"Function" name=ID "=" (right+=Addition right+=Addition*) ";"
		public Group getGroup() { return cGroup; }

		//"Function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//right+=Addition right+=Addition*
		public Group getGroup_3() { return cGroup_3; }

		//right+=Addition
		public Assignment getRightAssignment_3_0() { return cRightAssignment_3_0; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_3_0_0() { return cRightAdditionParserRuleCall_3_0_0; }

		//right+=Addition*
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_3_1_0() { return cRightAdditionParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class DimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dimensions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDimAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cDimLengthsKeyword_0_0_0 = (Keyword)cDimAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameFLOATParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cLenAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLenLenghtsUnitsParserRuleCall_0_2_0 = (RuleCall)cLenAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDimAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDimLastsKeyword_1_0_0 = (Keyword)cDimAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameFLOATParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cDurAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDurTimeUnitsParserRuleCall_1_2_0 = (RuleCall)cDurAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDimAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cDimWeightsKeyword_2_0_0 = (Keyword)cDimAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameFLOATParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Assignment cMaAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cMaMassUnitsParserRuleCall_2_2_0 = (RuleCall)cMaAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDimAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDimHasTemperatureKeyword_3_0_0 = (Keyword)cDimAssignment_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameFLOATParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Assignment cTempAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cTempTemperatureUnitsParserRuleCall_3_2_0 = (RuleCall)cTempAssignment_3_2.eContents().get(0);
		
		//Dimensions:
		//	dim="lengths" name=FLOAT len=LenghtsUnits | dim="lasts" name=FLOAT dur=TimeUnits | dim="weights" name=FLOAT
		//	ma=MassUnits | dim="has temperature" name=FLOAT temp=TemperatureUnits;
		public ParserRule getRule() { return rule; }

		//dim="lengths" name=FLOAT len=LenghtsUnits | dim="lasts" name=FLOAT dur=TimeUnits | dim="weights" name=FLOAT ma=MassUnits
		//| dim="has temperature" name=FLOAT temp=TemperatureUnits
		public Alternatives getAlternatives() { return cAlternatives; }

		//dim="lengths" name=FLOAT len=LenghtsUnits
		public Group getGroup_0() { return cGroup_0; }

		//dim="lengths"
		public Assignment getDimAssignment_0_0() { return cDimAssignment_0_0; }

		//"lengths"
		public Keyword getDimLengthsKeyword_0_0_0() { return cDimLengthsKeyword_0_0_0; }

		//name=FLOAT
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//FLOAT
		public RuleCall getNameFLOATParserRuleCall_0_1_0() { return cNameFLOATParserRuleCall_0_1_0; }

		//len=LenghtsUnits
		public Assignment getLenAssignment_0_2() { return cLenAssignment_0_2; }

		//LenghtsUnits
		public RuleCall getLenLenghtsUnitsParserRuleCall_0_2_0() { return cLenLenghtsUnitsParserRuleCall_0_2_0; }

		//dim="lasts" name=FLOAT dur=TimeUnits
		public Group getGroup_1() { return cGroup_1; }

		//dim="lasts"
		public Assignment getDimAssignment_1_0() { return cDimAssignment_1_0; }

		//"lasts"
		public Keyword getDimLastsKeyword_1_0_0() { return cDimLastsKeyword_1_0_0; }

		//name=FLOAT
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//FLOAT
		public RuleCall getNameFLOATParserRuleCall_1_1_0() { return cNameFLOATParserRuleCall_1_1_0; }

		//dur=TimeUnits
		public Assignment getDurAssignment_1_2() { return cDurAssignment_1_2; }

		//TimeUnits
		public RuleCall getDurTimeUnitsParserRuleCall_1_2_0() { return cDurTimeUnitsParserRuleCall_1_2_0; }

		//dim="weights" name=FLOAT ma=MassUnits
		public Group getGroup_2() { return cGroup_2; }

		//dim="weights"
		public Assignment getDimAssignment_2_0() { return cDimAssignment_2_0; }

		//"weights"
		public Keyword getDimWeightsKeyword_2_0_0() { return cDimWeightsKeyword_2_0_0; }

		//name=FLOAT
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//FLOAT
		public RuleCall getNameFLOATParserRuleCall_2_1_0() { return cNameFLOATParserRuleCall_2_1_0; }

		//ma=MassUnits
		public Assignment getMaAssignment_2_2() { return cMaAssignment_2_2; }

		//MassUnits
		public RuleCall getMaMassUnitsParserRuleCall_2_2_0() { return cMaMassUnitsParserRuleCall_2_2_0; }

		//dim="has temperature" name=FLOAT temp=TemperatureUnits
		public Group getGroup_3() { return cGroup_3; }

		//dim="has temperature"
		public Assignment getDimAssignment_3_0() { return cDimAssignment_3_0; }

		//"has temperature"
		public Keyword getDimHasTemperatureKeyword_3_0_0() { return cDimHasTemperatureKeyword_3_0_0; }

		//name=FLOAT
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//FLOAT
		public RuleCall getNameFLOATParserRuleCall_3_1_0() { return cNameFLOATParserRuleCall_3_1_0; }

		//temp=TemperatureUnits
		public Assignment getTempAssignment_3_2() { return cTempAssignment_3_2; }

		//TemperatureUnits
		public RuleCall getTempTemperatureUnitsParserRuleCall_3_2_0() { return cTempTemperatureUnitsParserRuleCall_3_2_0; }
	}

	public class LenghtsUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LenghtsUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKilometerAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cKilometerKmKeyword_0_0 = (Keyword)cKilometerAssignment_0.eContents().get(0);
		private final Assignment cMeterAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMeterMKeyword_1_0 = (Keyword)cMeterAssignment_1.eContents().get(0);
		private final Assignment cMilesAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cMilesMilesKeyword_2_0 = (Keyword)cMilesAssignment_2.eContents().get(0);
		private final Assignment cHectareAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cHectareHaKeyword_3_0 = (Keyword)cHectareAssignment_3.eContents().get(0);
		private final Assignment cSquarekilometerAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cSquarekilometerKmKeyword_4_0 = (Keyword)cSquarekilometerAssignment_4.eContents().get(0);
		
		//LenghtsUnits:
		//	kilometer="km" | meter="m" | miles="miles" | hectare="ha" | squarekilometer="kmÂ²";
		public ParserRule getRule() { return rule; }

		//kilometer="km" | meter="m" | miles="miles" | hectare="ha" | squarekilometer="kmÂ²"
		public Alternatives getAlternatives() { return cAlternatives; }

		//kilometer="km"
		public Assignment getKilometerAssignment_0() { return cKilometerAssignment_0; }

		//"km"
		public Keyword getKilometerKmKeyword_0_0() { return cKilometerKmKeyword_0_0; }

		//meter="m"
		public Assignment getMeterAssignment_1() { return cMeterAssignment_1; }

		//"m"
		public Keyword getMeterMKeyword_1_0() { return cMeterMKeyword_1_0; }

		//miles="miles"
		public Assignment getMilesAssignment_2() { return cMilesAssignment_2; }

		//"miles"
		public Keyword getMilesMilesKeyword_2_0() { return cMilesMilesKeyword_2_0; }

		//hectare="ha"
		public Assignment getHectareAssignment_3() { return cHectareAssignment_3; }

		//"ha"
		public Keyword getHectareHaKeyword_3_0() { return cHectareHaKeyword_3_0; }

		//squarekilometer="kmÂ²"
		public Assignment getSquarekilometerAssignment_4() { return cSquarekilometerAssignment_4; }

		//"kmÂ²"
		public Keyword getSquarekilometerKmKeyword_4_0() { return cSquarekilometerKmKeyword_4_0; }
	}

	public class TimeUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHoursAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cHoursHKeyword_0_0 = (Keyword)cHoursAssignment_0.eContents().get(0);
		private final Assignment cMinutesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMinutesMKeyword_1_0 = (Keyword)cMinutesAssignment_1.eContents().get(0);
		private final Assignment cSecondsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSecondsSKeyword_2_0 = (Keyword)cSecondsAssignment_2.eContents().get(0);
		
		//TimeUnits:
		//	hours="h" | minutes="m" | seconds="s";
		public ParserRule getRule() { return rule; }

		//hours="h" | minutes="m" | seconds="s"
		public Alternatives getAlternatives() { return cAlternatives; }

		//hours="h"
		public Assignment getHoursAssignment_0() { return cHoursAssignment_0; }

		//"h"
		public Keyword getHoursHKeyword_0_0() { return cHoursHKeyword_0_0; }

		//minutes="m"
		public Assignment getMinutesAssignment_1() { return cMinutesAssignment_1; }

		//"m"
		public Keyword getMinutesMKeyword_1_0() { return cMinutesMKeyword_1_0; }

		//seconds="s"
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }

		//"s"
		public Keyword getSecondsSKeyword_2_0() { return cSecondsSKeyword_2_0; }
	}

	public class MassUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MassUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cKilogramAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cKilogramKgKeyword_0_0 = (Keyword)cKilogramAssignment_0.eContents().get(0);
		private final Assignment cGramAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cGramGKeyword_1_0 = (Keyword)cGramAssignment_1.eContents().get(0);
		private final Assignment cPoundsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPoundsLbKeyword_2_0 = (Keyword)cPoundsAssignment_2.eContents().get(0);
		private final Assignment cOuncesAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cOuncesOzKeyword_3_0 = (Keyword)cOuncesAssignment_3.eContents().get(0);
		
		//MassUnits:
		//	kilogram="kg" | gram="g" | pounds="lb" | ounces="oz";
		public ParserRule getRule() { return rule; }

		//kilogram="kg" | gram="g" | pounds="lb" | ounces="oz"
		public Alternatives getAlternatives() { return cAlternatives; }

		//kilogram="kg"
		public Assignment getKilogramAssignment_0() { return cKilogramAssignment_0; }

		//"kg"
		public Keyword getKilogramKgKeyword_0_0() { return cKilogramKgKeyword_0_0; }

		//gram="g"
		public Assignment getGramAssignment_1() { return cGramAssignment_1; }

		//"g"
		public Keyword getGramGKeyword_1_0() { return cGramGKeyword_1_0; }

		//pounds="lb"
		public Assignment getPoundsAssignment_2() { return cPoundsAssignment_2; }

		//"lb"
		public Keyword getPoundsLbKeyword_2_0() { return cPoundsLbKeyword_2_0; }

		//ounces="oz"
		public Assignment getOuncesAssignment_3() { return cOuncesAssignment_3; }

		//"oz"
		public Keyword getOuncesOzKeyword_3_0() { return cOuncesOzKeyword_3_0; }
	}

	public class TemperatureUnitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemperatureUnits");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCelsiusAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cCelsiusCKeyword_0_0 = (Keyword)cCelsiusAssignment_0.eContents().get(0);
		private final Assignment cFahrenheitAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cFahrenheitFKeyword_1_0 = (Keyword)cFahrenheitAssignment_1.eContents().get(0);
		
		//TemperatureUnits:
		//	celsius="C" | Fahrenheit="F";
		public ParserRule getRule() { return rule; }

		//celsius="C" | Fahrenheit="F"
		public Alternatives getAlternatives() { return cAlternatives; }

		//celsius="C"
		public Assignment getCelsiusAssignment_0() { return cCelsiusAssignment_0; }

		//"C"
		public Keyword getCelsiusCKeyword_0_0() { return cCelsiusCKeyword_0_0; }

		//Fahrenheit="F"
		public Assignment getFahrenheitAssignment_1() { return cFahrenheitAssignment_1; }

		//"F"
		public Keyword getFahrenheitFKeyword_1_0() { return cFahrenheitFKeyword_1_0; }
	}
	
	
	public class MathFunctionsEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MathFunctionsEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRandomintEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRandomintRandomIntKeyword_0_0 = (Keyword)cRandomintEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRandomdoubleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRandomdoubleRandomFloatKeyword_1_0 = (Keyword)cRandomdoubleEnumLiteralDeclaration_1.eContents().get(0);
		
		/// *--------------------------------------ENUMERATIONS---------------------------------------------------------------- * /
		//enum MathFunctionsEnum:
		//	randomint="random int" | randomdouble="random float";
		public EnumRule getRule() { return rule; }

		//randomint="random int" | randomdouble="random float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//randomint="random int"
		public EnumLiteralDeclaration getRandomintEnumLiteralDeclaration_0() { return cRandomintEnumLiteralDeclaration_0; }

		//"random int"
		public Keyword getRandomintRandomIntKeyword_0_0() { return cRandomintRandomIntKeyword_0_0; }

		//randomdouble="random float"
		public EnumLiteralDeclaration getRandomdoubleEnumLiteralDeclaration_1() { return cRandomdoubleEnumLiteralDeclaration_1; }

		//"random float"
		public Keyword getRandomdoubleRandomFloatKeyword_1_0() { return cRandomdoubleRandomFloatKeyword_1_0; }
	}

	public class BooleanOperatorsEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanOperatorsEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanOperatorsEnum:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}

	public class StarAndEndExpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StarAndEndExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAfterAfterKeyword_0_0 = (Keyword)cAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWithhEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWithhWithKeyword_1_0 = (Keyword)cWithhEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StarAndEndExp:
		//	after | withh="with";
		public EnumRule getRule() { return rule; }

		//after | withh="with"
		public Alternatives getAlternatives() { return cAlternatives; }

		//after
		public EnumLiteralDeclaration getAfterEnumLiteralDeclaration_0() { return cAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getAfterAfterKeyword_0_0() { return cAfterAfterKeyword_0_0; }

		//withh="with"
		public EnumLiteralDeclaration getWithhEnumLiteralDeclaration_1() { return cWithhEnumLiteralDeclaration_1; }

		//"with"
		public Keyword getWithhWithKeyword_1_0() { return cWithhWithKeyword_1_0; }
	}

	public class StarAndEndRedefExpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StarAndEndRedefExp");
		private final EnumLiteralDeclaration cWhenEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cWhenWhenKeyword_0 = (Keyword)cWhenEnumLiteralDeclaration.eContents().get(0);
		
		//enum StarAndEndRedefExp:
		//	when;
		public EnumRule getRule() { return rule; }

		//when
		public EnumLiteralDeclaration getWhenEnumLiteralDeclaration() { return cWhenEnumLiteralDeclaration; }

		//"when"
		public Keyword getWhenWhenKeyword_0() { return cWhenWhenKeyword_0; }
	}

	public class ConditionEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIfEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIfIfKeyword_0_0 = (Keyword)cIfEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cElseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cElseWhileKeyword_1_0 = (Keyword)cElseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConditionEnum:
		//	if | else="while";
		public EnumRule getRule() { return rule; }

		//if | else="while"
		public Alternatives getAlternatives() { return cAlternatives; }

		//if
		public EnumLiteralDeclaration getIfEnumLiteralDeclaration_0() { return cIfEnumLiteralDeclaration_0; }

		//"if"
		public Keyword getIfIfKeyword_0_0() { return cIfIfKeyword_0_0; }

		//else="while"
		public EnumLiteralDeclaration getElseEnumLiteralDeclaration_1() { return cElseEnumLiteralDeclaration_1; }

		//"while"
		public Keyword getElseWhileKeyword_1_0() { return cElseWhileKeyword_1_0; }
	}

	public class EqualityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBiggerthanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBiggerthanBiggerThanKeyword_0_0 = (Keyword)cBiggerthanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessthanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessthanLessThanKeyword_1_0 = (Keyword)cLessthanEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualToKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBiggerorequalthanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBiggerorequalthanBiggerOrEqualThanKeyword_3_0 = (Keyword)cBiggerorequalthanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLessorequalthanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLessorequalthanLessOrEqualThanKeyword_4_0 = (Keyword)cLessorequalthanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotequaltoEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotequaltoNotEqualToKeyword_5_0 = (Keyword)cNotequaltoEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSmallestEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSmallestIsTheSmallestKeyword_6_0 = (Keyword)cSmallestEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHighestEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHighestIsTheHighestKeyword_7_0 = (Keyword)cHighestEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum Equality:
		//	biggerthan="bigger than" | lessthan="less than" | equal="equal to" | biggerorequalthan="bigger or equal than" |
		//	lessorequalthan="less or equal than" | notequalto="not equal to" | smallest="is the smallest" |
		//	highest="is the highest";
		public EnumRule getRule() { return rule; }

		//biggerthan="bigger than" | lessthan="less than" | equal="equal to" | biggerorequalthan="bigger or equal than" |
		//lessorequalthan="less or equal than" | notequalto="not equal to" | smallest="is the smallest" |
		//highest="is the highest"
		public Alternatives getAlternatives() { return cAlternatives; }

		//biggerthan="bigger than"
		public EnumLiteralDeclaration getBiggerthanEnumLiteralDeclaration_0() { return cBiggerthanEnumLiteralDeclaration_0; }

		//"bigger than"
		public Keyword getBiggerthanBiggerThanKeyword_0_0() { return cBiggerthanBiggerThanKeyword_0_0; }

		//lessthan="less than"
		public EnumLiteralDeclaration getLessthanEnumLiteralDeclaration_1() { return cLessthanEnumLiteralDeclaration_1; }

		//"less than"
		public Keyword getLessthanLessThanKeyword_1_0() { return cLessthanLessThanKeyword_1_0; }

		//equal="equal to"
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }

		//"equal to"
		public Keyword getEqualEqualToKeyword_2_0() { return cEqualEqualToKeyword_2_0; }

		//biggerorequalthan="bigger or equal than"
		public EnumLiteralDeclaration getBiggerorequalthanEnumLiteralDeclaration_3() { return cBiggerorequalthanEnumLiteralDeclaration_3; }

		//"bigger or equal than"
		public Keyword getBiggerorequalthanBiggerOrEqualThanKeyword_3_0() { return cBiggerorequalthanBiggerOrEqualThanKeyword_3_0; }

		//lessorequalthan="less or equal than"
		public EnumLiteralDeclaration getLessorequalthanEnumLiteralDeclaration_4() { return cLessorequalthanEnumLiteralDeclaration_4; }

		//"less or equal than"
		public Keyword getLessorequalthanLessOrEqualThanKeyword_4_0() { return cLessorequalthanLessOrEqualThanKeyword_4_0; }

		//notequalto="not equal to"
		public EnumLiteralDeclaration getNotequaltoEnumLiteralDeclaration_5() { return cNotequaltoEnumLiteralDeclaration_5; }

		//"not equal to"
		public Keyword getNotequaltoNotEqualToKeyword_5_0() { return cNotequaltoNotEqualToKeyword_5_0; }

		//smallest="is the smallest"
		public EnumLiteralDeclaration getSmallestEnumLiteralDeclaration_6() { return cSmallestEnumLiteralDeclaration_6; }

		//"is the smallest"
		public Keyword getSmallestIsTheSmallestKeyword_6_0() { return cSmallestIsTheSmallestKeyword_6_0; }

		//highest="is the highest"
		public EnumLiteralDeclaration getHighestEnumLiteralDeclaration_7() { return cHighestEnumLiteralDeclaration_7; }

		//"is the highest"
		public Keyword getHighestIsTheHighestKeyword_7_0() { return cHighestIsTheHighestKeyword_7_0; }
	}

	public class NeighbourhooEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "NeighbourhooEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNeighcellEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNeighcellNeighborCellWhereKeyword_0_0 = (Keyword)cNeighcellEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCurrentcellEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCurrentcellCurrentCellWhereKeyword_1_0 = (Keyword)cCurrentcellEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSearchEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSearchSearchNeighborhoodWhereKeyword_2_0 = (Keyword)cSearchEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum NeighbourhooEnum:
		//	neighcell="neighbor cell where" | currentcell="current cell where" | search="search neighborhood where";
		public EnumRule getRule() { return rule; }

		//neighcell="neighbor cell where" | currentcell="current cell where" | search="search neighborhood where"
		public Alternatives getAlternatives() { return cAlternatives; }

		//neighcell="neighbor cell where"
		public EnumLiteralDeclaration getNeighcellEnumLiteralDeclaration_0() { return cNeighcellEnumLiteralDeclaration_0; }

		//"neighbor cell where"
		public Keyword getNeighcellNeighborCellWhereKeyword_0_0() { return cNeighcellNeighborCellWhereKeyword_0_0; }

		//currentcell="current cell where"
		public EnumLiteralDeclaration getCurrentcellEnumLiteralDeclaration_1() { return cCurrentcellEnumLiteralDeclaration_1; }

		//"current cell where"
		public Keyword getCurrentcellCurrentCellWhereKeyword_1_0() { return cCurrentcellCurrentCellWhereKeyword_1_0; }

		//search="search neighborhood where"
		public EnumLiteralDeclaration getSearchEnumLiteralDeclaration_2() { return cSearchEnumLiteralDeclaration_2; }

		//"search neighborhood where"
		public Keyword getSearchSearchNeighborhoodWhereKeyword_2_0() { return cSearchSearchNeighborhoodWhereKeyword_2_0; }
	}

	public class TypeofNeighbourhoodElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TypeofNeighbourhood");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVonneumanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVonneumanVonNuenmanKeyword_0_0 = (Keyword)cVonneumanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMooreEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMooreMooreKeyword_1_0 = (Keyword)cMooreEnumLiteralDeclaration_1.eContents().get(0);
		
		/// * ------------------------------------------TERMINALS DEFINITION ------------------------------------* / enum
		//TypeofNeighbourhood:
		//	vonneuman="Von Nuenman" | moore="Moore";
		public EnumRule getRule() { return rule; }

		//vonneuman="Von Nuenman" | moore="Moore"
		public Alternatives getAlternatives() { return cAlternatives; }

		//vonneuman="Von Nuenman"
		public EnumLiteralDeclaration getVonneumanEnumLiteralDeclaration_0() { return cVonneumanEnumLiteralDeclaration_0; }

		//"Von Nuenman"
		public Keyword getVonneumanVonNuenmanKeyword_0_0() { return cVonneumanVonNuenmanKeyword_0_0; }

		//moore="Moore"
		public EnumLiteralDeclaration getMooreEnumLiteralDeclaration_1() { return cMooreEnumLiteralDeclaration_1; }

		//"Moore"
		public Keyword getMooreMooreKeyword_1_0() { return cMooreMooreKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final SpaceElements pSpace;
	private final CellElements pCell;
	private final NeighborhoodExpressionElements pNeighborhoodExpression;
	private final AgentEntityElements pAgentEntity;
	private final SpatialEntityElements pSpatialEntity;
	private final InitialLocationTypeElements pInitialLocationType;
	private final BehaviourElements pBehaviour;
	private final BehaviourQualifiedNameElements pBehaviourQualifiedName;
	private final QualifiedNameElements pQualifiedName;
	private final ParameterQualifiedNameElements pParameterQualifiedName;
	private final FunctionQualifiedNameElements pFunctionQualifiedName;
	private final AttributionElements pAttribution;
	private final AttributionTypeElements pAttributionType;
	private final StartActivityDeclarationElements pStartActivityDeclaration;
	private final FinishActivityElements pFinishActivity;
	private final ConditionElements pCondition;
	private final ExecutionDeclarationElements pExecutionDeclaration;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final FLOATElements pFLOAT;
	private final ExpressionElements pExpression;
	private final AlgebricExpressionElements pAlgebricExpression;
	private final MoveExpressionElements pMoveExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final DimensionExpressionElements pDimensionExpression;
	private final RandomBetweenExpressionElements pRandomBetweenExpression;
	private final ParameterExpressionElements pParameterExpression;
	private final FunctionExpressionElements pFunctionExpression;
	private final DimensionsElements pDimensions;
	private final LenghtsUnitsElements pLenghtsUnits;
	private final TimeUnitsElements pTimeUnits;
	private final MassUnitsElements pMassUnits;
	private final TemperatureUnitsElements pTemperatureUnits;
	private final MathFunctionsEnumElements unknownRuleMathFunctionsEnum;
	private final BooleanOperatorsEnumElements unknownRuleBooleanOperatorsEnum;
	private final StarAndEndExpElements unknownRuleStarAndEndExp;
	private final StarAndEndRedefExpElements unknownRuleStarAndEndRedefExp;
	private final ConditionEnumElements unknownRuleConditionEnum;
	private final EqualityElements unknownRuleEquality;
	private final NeighbourhooEnumElements unknownRuleNeighbourhooEnum;
	private final TypeofNeighbourhoodElements unknownRuleTypeofNeighbourhood;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EcecGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSpace = new SpaceElements();
		this.pCell = new CellElements();
		this.pNeighborhoodExpression = new NeighborhoodExpressionElements();
		this.pAgentEntity = new AgentEntityElements();
		this.pSpatialEntity = new SpatialEntityElements();
		this.pInitialLocationType = new InitialLocationTypeElements();
		this.pBehaviour = new BehaviourElements();
		this.pBehaviourQualifiedName = new BehaviourQualifiedNameElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pParameterQualifiedName = new ParameterQualifiedNameElements();
		this.pFunctionQualifiedName = new FunctionQualifiedNameElements();
		this.pAttribution = new AttributionElements();
		this.pAttributionType = new AttributionTypeElements();
		this.pStartActivityDeclaration = new StartActivityDeclarationElements();
		this.pFinishActivity = new FinishActivityElements();
		this.pCondition = new ConditionElements();
		this.pExecutionDeclaration = new ExecutionDeclarationElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pFLOAT = new FLOATElements();
		this.pExpression = new ExpressionElements();
		this.pAlgebricExpression = new AlgebricExpressionElements();
		this.pMoveExpression = new MoveExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pDimensionExpression = new DimensionExpressionElements();
		this.pRandomBetweenExpression = new RandomBetweenExpressionElements();
		this.pParameterExpression = new ParameterExpressionElements();
		this.pFunctionExpression = new FunctionExpressionElements();
		this.pDimensions = new DimensionsElements();
		this.pLenghtsUnits = new LenghtsUnitsElements();
		this.pTimeUnits = new TimeUnitsElements();
		this.pMassUnits = new MassUnitsElements();
		this.pTemperatureUnits = new TemperatureUnitsElements();
		this.unknownRuleMathFunctionsEnum = new MathFunctionsEnumElements();
		this.unknownRuleBooleanOperatorsEnum = new BooleanOperatorsEnumElements();
		this.unknownRuleStarAndEndExp = new StarAndEndExpElements();
		this.unknownRuleStarAndEndRedefExp = new StarAndEndRedefExpElements();
		this.unknownRuleConditionEnum = new ConditionEnumElements();
		this.unknownRuleEquality = new EqualityElements();
		this.unknownRuleNeighbourhooEnum = new NeighbourhooEnumElements();
		this.unknownRuleTypeofNeighbourhood = new TypeofNeighbourhoodElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.cirad.dsl.ecec.xtext.Ecec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *----------------------------------------RULES DEFINITION------------------------------------------------------------* /
	//Model:
	//	agent+=AgentEntity* & spatialEntity+=SpatialEntity* & space=Space;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Space:
	//	"Space" name=ID "{" ("Number of cells" numcells=INT ";" "Type of Neighborhood" typeneigh=TypeofNeighbourhood ";")
	//	"}";
	public SpaceElements getSpaceAccess() {
		return pSpace;
	}
	
	public ParserRule getSpaceRule() {
		return getSpaceAccess().getRule();
	}

	//Cell:
	//	{Cell} occupiedbyspatialEntity+=[SpatialEntity] ".cell." (("occupied" ":" ocuppied=BooleanExpression)? ("x" ":"
	//	x=INT)? ("y" ":" y=INT)? ("is occupied by" occupiedbyAgentEntity+=[AgentEntity])? ("is not occupied by"
	//	occupiedbyAgentEntity+=[AgentEntity])?);
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}

	//NeighborhoodExpression:
	//	{NeighborhoodExpression} n+=NeighbourhooEnum a=AttributionType;
	public NeighborhoodExpressionElements getNeighborhoodExpressionAccess() {
		return pNeighborhoodExpression;
	}
	
	public ParserRule getNeighborhoodExpressionRule() {
		return getNeighborhoodExpressionAccess().getRule();
	}

	//AgentEntity:
	//	"Entity Agent :" name=ID "{" ("Number of Agents :" agentNumbers=INT ";" "Initial Agents Location :"
	//	initialAgentLocation=InitialLocationType ("at" spatialEntity=[SpatialEntity])? ";"
	//	agentparameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)*
	//	agentfunction+=FunctionExpression? agentbehaviourdefinition+=Behaviour*) "}";
	public AgentEntityElements getAgentEntityAccess() {
		return pAgentEntity;
	}
	
	public ParserRule getAgentEntityRule() {
		return getAgentEntityAccess().getRule();
	}

	//SpatialEntity:
	//	"Spatial Entity :" name=ID "{" ("Entities per cell :" number=INT ";" "Initial Location Type :"
	//	locationtype=InitialLocationType ";" "Patch size :" X=INT "x" Y=INT ";" "Gap between patches:" gap=INT ";"
	//	parameters+=(ParameterExpression | DimensionExpression | RandomBetweenExpression)* function+=FunctionExpression?
	//	behaviourdefinition+=Behaviour*) "}";
	public SpatialEntityElements getSpatialEntityAccess() {
		return pSpatialEntity;
	}
	
	public ParserRule getSpatialEntityRule() {
		return getSpatialEntityAccess().getRule();
	}

	//InitialLocationType:
	//	name="Random";
	public InitialLocationTypeElements getInitialLocationTypeAccess() {
		return pInitialLocationType;
	}
	
	public ParserRule getInitialLocationTypeRule() {
		return getInitialLocationTypeAccess().getRule();
	}

	//Behaviour:
	//	"Behavior" name=ID ":" ("Starts {" hasStart+=StartActivityDeclaration ("," hasStart+=StartActivityDeclaration)* "}" &
	//	"Finishes {" hasEnd+=FinishActivity ("," hasEnd+=FinishActivity)* "}" & "Conditions {" hasCondition+=Condition (","
	//	hasCondition+=Condition)* "}" "then {" executes+=ExecutionDeclaration ("," executes+=ExecutionDeclaration)* "}")
	//	"End.";
	public BehaviourElements getBehaviourAccess() {
		return pBehaviour;
	}
	
	public ParserRule getBehaviourRule() {
		return getBehaviourAccess().getRule();
	}

	//BehaviourQualifiedName:
	//	name+=[Behaviour|QualifiedName];
	public BehaviourQualifiedNameElements getBehaviourQualifiedNameAccess() {
		return pBehaviourQualifiedName;
	}
	
	public ParserRule getBehaviourQualifiedNameRule() {
		return getBehaviourQualifiedNameAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//ParameterQualifiedName:
	//	{ParameterQualifiedName} "parameter" name=[ParameterExpression|QualifiedName] a=Attribution;
	public ParameterQualifiedNameElements getParameterQualifiedNameAccess() {
		return pParameterQualifiedName;
	}
	
	public ParserRule getParameterQualifiedNameRule() {
		return getParameterQualifiedNameAccess().getRule();
	}

	//FunctionQualifiedName:
	//	{FunctionQualifiedName} "function" name=[FunctionExpression|QualifiedName] a=Attribution;
	public FunctionQualifiedNameElements getFunctionQualifiedNameAccess() {
		return pFunctionQualifiedName;
	}
	
	public ParserRule getFunctionQualifiedNameRule() {
		return getFunctionQualifiedNameAccess().getRule();
	}

	//Attribution:
	//	{Attribution} equality=Equality expression= / *TRY TO CHANGE TO expression=PRIMARY * / Primary;
	public AttributionElements getAttributionAccess() {
		return pAttribution;
	}
	
	public ParserRule getAttributionRule() {
		return getAttributionAccess().getRule();
	}

	//AttributionType:
	//	{AttributionType} p=ParameterQualifiedName | f=FunctionQualifiedName;
	public AttributionTypeElements getAttributionTypeAccess() {
		return pAttributionType;
	}
	
	public ParserRule getAttributionTypeRule() {
		return getAttributionTypeAccess().getRule();
	}

	//StartActivityDeclaration:
	//	saef+=StarAndEndExp be2+=BehaviourQualifiedName;
	public StartActivityDeclarationElements getStartActivityDeclarationAccess() {
		return pStartActivityDeclaration;
	}
	
	public ParserRule getStartActivityDeclarationRule() {
		return getStartActivityDeclarationAccess().getRule();
	}

	//FinishActivity:
	//	saef+=StarAndEndExp be2+=BehaviourQualifiedName;
	public FinishActivityElements getFinishActivityAccess() {
		return pFinishActivity;
	}
	
	public ParserRule getFinishActivityRule() {
		return getFinishActivityAccess().getRule();
	}

	//Condition:
	//	{Condition} ce+=ConditionEnum "(" (a+=AttributionType | m=Cell | n=NeighborhoodExpression) ")";
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//ExecutionDeclaration:
	//	{ExecutionDeclaration} "(" (a+=AttributionType | arg=BehaviourQualifiedName | m=MoveExpression) ")";
	public ExecutionDeclarationElements getExecutionDeclarationAccess() {
		return pExecutionDeclaration;
	}
	
	public ParserRule getExecutionDeclarationRule() {
		return getExecutionDeclarationAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	Primary (({Multi.left=current} "*" | {Div.left=current} "/") right=Primary)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//Primary returns Expression:
	//	FLOAT | parameters=[ParameterExpression|QualifiedName] | "(" Addition ")";
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//FLOAT:
	//	value=INT ("." INT)?;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}

	//Expression:
	//	AlgebricExpression | BooleanExpression | DimensionExpression | RandomBetweenExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//AlgebricExpression:
	//	args+=Addition args+=Addition* ("% of" arg=[ParameterExpression|QualifiedName])?;
	public AlgebricExpressionElements getAlgebricExpressionAccess() {
		return pAlgebricExpression;
	}
	
	public ParserRule getAlgebricExpressionRule() {
		return getAlgebricExpressionAccess().getRule();
	}

	//MoveExpression:
	//	name="move to " move=(Cell | NeighborhoodExpression);
	public MoveExpressionElements getMoveExpressionAccess() {
		return pMoveExpression;
	}
	
	public ParserRule getMoveExpressionRule() {
		return getMoveExpressionAccess().getRule();
	}

	//BooleanExpression:
	//	{BooleanExpression} (value?="true" | "false");
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//DimensionExpression:
	//	d=Dimensions ";";
	public DimensionExpressionElements getDimensionExpressionAccess() {
		return pDimensionExpression;
	}
	
	public ParserRule getDimensionExpressionRule() {
		return getDimensionExpressionAccess().getRule();
	}

	//RandomBetweenExpression:
	//	{RandomBetweenExpression} r=MathFunctionsEnum? ("between" (f=FLOAT | "parameter"
	//	f1=[ParameterExpression|QualifiedName]) "and" (f2=FLOAT | "parameter" f3=[ParameterExpression|QualifiedName]))? ";";
	public RandomBetweenExpressionElements getRandomBetweenExpressionAccess() {
		return pRandomBetweenExpression;
	}
	
	public ParserRule getRandomBetweenExpressionRule() {
		return getRandomBetweenExpressionAccess().getRule();
	}

	//ParameterExpression:
	//	"Parameter" name=ID ":" ex=Expression;
	public ParameterExpressionElements getParameterExpressionAccess() {
		return pParameterExpression;
	}
	
	public ParserRule getParameterExpressionRule() {
		return getParameterExpressionAccess().getRule();
	}

	//FunctionExpression:
	//	"Function" name=ID "=" (right+=Addition right+=Addition*) ";";
	public FunctionExpressionElements getFunctionExpressionAccess() {
		return pFunctionExpression;
	}
	
	public ParserRule getFunctionExpressionRule() {
		return getFunctionExpressionAccess().getRule();
	}

	//Dimensions:
	//	dim="lengths" name=FLOAT len=LenghtsUnits | dim="lasts" name=FLOAT dur=TimeUnits | dim="weights" name=FLOAT
	//	ma=MassUnits | dim="has temperature" name=FLOAT temp=TemperatureUnits;
	public DimensionsElements getDimensionsAccess() {
		return pDimensions;
	}
	
	public ParserRule getDimensionsRule() {
		return getDimensionsAccess().getRule();
	}

	//LenghtsUnits:
	//	kilometer="km" | meter="m" | miles="miles" | hectare="ha" | squarekilometer="kmÂ²";
	public LenghtsUnitsElements getLenghtsUnitsAccess() {
		return pLenghtsUnits;
	}
	
	public ParserRule getLenghtsUnitsRule() {
		return getLenghtsUnitsAccess().getRule();
	}

	//TimeUnits:
	//	hours="h" | minutes="m" | seconds="s";
	public TimeUnitsElements getTimeUnitsAccess() {
		return pTimeUnits;
	}
	
	public ParserRule getTimeUnitsRule() {
		return getTimeUnitsAccess().getRule();
	}

	//MassUnits:
	//	kilogram="kg" | gram="g" | pounds="lb" | ounces="oz";
	public MassUnitsElements getMassUnitsAccess() {
		return pMassUnits;
	}
	
	public ParserRule getMassUnitsRule() {
		return getMassUnitsAccess().getRule();
	}

	//TemperatureUnits:
	//	celsius="C" | Fahrenheit="F";
	public TemperatureUnitsElements getTemperatureUnitsAccess() {
		return pTemperatureUnits;
	}
	
	public ParserRule getTemperatureUnitsRule() {
		return getTemperatureUnitsAccess().getRule();
	}

	/// *--------------------------------------ENUMERATIONS---------------------------------------------------------------- * /
	//enum MathFunctionsEnum:
	//	randomint="random int" | randomdouble="random float";
	public MathFunctionsEnumElements getMathFunctionsEnumAccess() {
		return unknownRuleMathFunctionsEnum;
	}
	
	public EnumRule getMathFunctionsEnumRule() {
		return getMathFunctionsEnumAccess().getRule();
	}

	//enum BooleanOperatorsEnum:
	//	true | false;
	public BooleanOperatorsEnumElements getBooleanOperatorsEnumAccess() {
		return unknownRuleBooleanOperatorsEnum;
	}
	
	public EnumRule getBooleanOperatorsEnumRule() {
		return getBooleanOperatorsEnumAccess().getRule();
	}

	//enum StarAndEndExp:
	//	after | withh="with";
	public StarAndEndExpElements getStarAndEndExpAccess() {
		return unknownRuleStarAndEndExp;
	}
	
	public EnumRule getStarAndEndExpRule() {
		return getStarAndEndExpAccess().getRule();
	}

	//enum StarAndEndRedefExp:
	//	when;
	public StarAndEndRedefExpElements getStarAndEndRedefExpAccess() {
		return unknownRuleStarAndEndRedefExp;
	}
	
	public EnumRule getStarAndEndRedefExpRule() {
		return getStarAndEndRedefExpAccess().getRule();
	}

	//enum ConditionEnum:
	//	if | else="while";
	public ConditionEnumElements getConditionEnumAccess() {
		return unknownRuleConditionEnum;
	}
	
	public EnumRule getConditionEnumRule() {
		return getConditionEnumAccess().getRule();
	}

	//enum Equality:
	//	biggerthan="bigger than" | lessthan="less than" | equal="equal to" | biggerorequalthan="bigger or equal than" |
	//	lessorequalthan="less or equal than" | notequalto="not equal to" | smallest="is the smallest" |
	//	highest="is the highest";
	public EqualityElements getEqualityAccess() {
		return unknownRuleEquality;
	}
	
	public EnumRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//enum NeighbourhooEnum:
	//	neighcell="neighbor cell where" | currentcell="current cell where" | search="search neighborhood where";
	public NeighbourhooEnumElements getNeighbourhooEnumAccess() {
		return unknownRuleNeighbourhooEnum;
	}
	
	public EnumRule getNeighbourhooEnumRule() {
		return getNeighbourhooEnumAccess().getRule();
	}

	/// * ------------------------------------------TERMINALS DEFINITION ------------------------------------* / enum
	//TypeofNeighbourhood:
	//	vonneuman="Von Nuenman" | moore="Moore";
	public TypeofNeighbourhoodElements getTypeofNeighbourhoodAccess() {
		return unknownRuleTypeofNeighbourhood;
	}
	
	public EnumRule getTypeofNeighbourhoodRule() {
		return getTypeofNeighbourhoodAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
