[comment encoding = UTF-8 /]
[module generateToGo('/org.cirad.dsl.behavior.metamodel/model/metamodel.ecore')]
[import org::cirad::dsl::behavior::gen::netlogo::commmon::generateBehaviors /]
[import org::cirad::dsl::behavior::gen::netlogo::commmon::generateNodesAndEdges /]
[import org::cirad::dsl::behavior::gen::netlogo::commmon::generateExpressions /]
[template public generateToGo(aModel:Model) ]
to go

[for (aPatch : Entity | aModel.eAllContents(InitSpace).entity)]
ask patches [ '[' /] 
	ask [aPatch.name.toLower()/]s[ '[' /]
    	[for (aNode : Node | aModel.mainBehavior.eAllContents(Node)->asSequence())]
		[if (aNode.oclIsTypeOf(DeclaredBehavior) and not aPatch.eAllContents(Behavior)->indexOf(aNode.oclAsType(DeclaredBehavior).behavior).oclIsUndefined() )]
		[aNode.oclAsType(DeclaredBehavior).behavior.name.toLower()/][ ']' /] 
		[/if]
		[/for]
	[ ']' /] 
[/for]
[for (anInitEntity : Entity | aModel.eAllContents(InitEntity).entity->asSet())]
	ask [anInitEntity.name.toLower()/]s [ '[' /]
    	[for (aNode : Node | aModel.mainBehavior.eAllContents(Node)->asSequence())]
		[if (aNode.oclIsTypeOf(DeclaredBehavior) and not anInitEntity.eAllContents(Behavior)->indexOf(aNode.oclAsType(DeclaredBehavior).behavior).oclIsUndefined() )]
		[aNode.oclAsType(DeclaredBehavior).behavior.name.toLower()/]
		[/if]
		[/for]
	[ ']' /] 
[/for]
tick
end
[/template]
