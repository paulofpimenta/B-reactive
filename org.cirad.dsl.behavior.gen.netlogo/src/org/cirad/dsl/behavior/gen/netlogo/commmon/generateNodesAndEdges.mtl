[comment encoding = UTF-8 /]
[module generateNodesAndEdges('/org.cirad.dsl.behavior.metamodel/model/metamodel.ecore')]
[import org::cirad::dsl::behavior::gen::netlogo::commmon::generateExpressions /]
[comment |||||||||||///////////GENERATE NODES\\\\\\\\\\||||||||||| /]
[template public generateNodes(aNode : Node) post(trim())]

[if (aNode.oclIsKindOf(ControlNode))]
[aNode.oclAsType(ControlNode).generateControlNodes()/]
[/if]
[if (aNode.oclIsKindOf(PrimitiveActivities))]
[aNode.oclAsType(PrimitiveActivities).generatePrimaryActivities()/]
[/if]
[if (aNode.oclIsKindOf(DeclaredBehavior))]
[aNode.oclAsType(DeclaredBehavior).behavior.name/]
[if (aNode.outcome_edge->notEmpty())]
[aNode.outcome_edge.generateEdges()/]
[/if]
[/if]
[/template]
[template public generateControlNodes(aControlNode : ControlNode)]

[if (aControlNode.oclIsKindOf(Start))]
[aControlNode.oclAsType(Start).outcome_edge.generateEdges()/]
[/if]
[if (aControlNode.oclIsKindOf(Decision))]
[if (aControlNode.eAllContents(IfFalseEdge)->isEmpty())]
if [aControlNode.oclAsType(Decision).booleanexpression.generateFunctionCallExpressions()/] [aControlNode.oclAsType(Decision).outcome_edge.generateEdges()/] 
[elseif (aControlNode.eAllContents(IfFalseEdge)->notEmpty())]
ifelse [aControlNode.oclAsType(Decision).booleanexpression.generateFunctionCallExpressions()/] 
[aControlNode.oclAsType(Decision).outcome_edge.generateEdges()/]
[/if]
[/if]
[comment FORK, JOIN, Merge.... /]


[/template]
[comment |||||||||||///////////GENERATE EDGES\\\\\\\\\\||||||||||| /]
[template public generateEdges(anEdge : Edge)]
[if (anEdge.oclIsKindOf(UnconditionedEdge))]
[anEdge.oclAsType(UnconditionedEdge).generateUnconditionedEdge()/]
[/if]
[if (anEdge.oclIsKindOf(IfTrueEdge))]
['\n'/]['['/][anEdge.oclAsType(IfTrueEdge).generateTrueEdge()/][']'/]  
[/if]
[if (anEdge.oclIsKindOf(IfFalseEdge))]
['['/][anEdge.oclAsType(IfFalseEdge).generateFalseEdge()/][']'/]
[/if]
[/template]
[template public generateUnconditionedEdge(anUndoconditionedEdge : UnconditionedEdge)]
[anUndoconditionedEdge.target_node.generateNodes()/]
[/template]
[template public generateTrueEdge(aTrueEdge : IfTrueEdge)]
[aTrueEdge.target_node.generateNodes()/]
[/template]
[template public generateFalseEdge(aFalseEdge : IfFalseEdge)]
[aFalseEdge.target_node.generateNodes()/]
[/template]
[template public generatePrimaryActivities(aPrimitiveActivities : PrimitiveActivities)]
[if (aPrimitiveActivities.oclIsKindOf(Add))]
	[aPrimitiveActivities.oclAsType(Add).generateAddNode()/]
[/if]
[if (aPrimitiveActivities.oclIsKindOf(Remove))]
	[aPrimitiveActivities.oclAsType(Remove).generateRemoveNode()/]
[/if]
[if (aPrimitiveActivities.oclIsKindOf(Die))]
	[aPrimitiveActivities.oclAsType(Die).generateDieNode()/]
[/if]
[if (aPrimitiveActivities.oclIsKindOf(Move))]
	[aPrimitiveActivities.oclAsType(Move).generateMoveNode()/]
[/if]
[if (aPrimitiveActivities.oclIsKindOf(Reproduce))]
	[aPrimitiveActivities.oclAsType(Reproduce).generateReproduceNode()/]
[/if]
[if (aPrimitiveActivities.oclIsKindOf(SetVariable))]
	[aPrimitiveActivities.oclAsType(SetVariable).generateSetVariableNode()/]
[/if]
[/template]

[template public generateRemoveNode(aRemoveNode : Remove) post (replaceAll('\n','').trim())]
 
 set [aRemoveNode.from.generateArithimeticExpressions().toLower()/] [aRemoveNode.from.generateArithimeticExpressions().toLower()/] - [aRemoveNode.expression.generateArithimeticExpressions().toLower()/]

[/template]

[template public generateAddNode(anAddNode : Add)  post (replaceAll('\n', '').trim())]
 
 set [anAddNode.toAttribute.generateArithimeticExpressions().toLower()/] [anAddNode.toAttribute.generateArithimeticExpressions().toString().toLower()/] - [anAddNode.expression.generateArithimeticExpressions().toLower()/]
 
[/template]

[template public generateSetVariableNode(aSetNode : SetVariable)post (replaceAll('\n', '').trim())]
	set [aSetNode.assignment.variable.generateArithimeticExpressions()/] [aSetNode.assignment.expression.generateFunctionCallExpressions()/] 
  	[aSetNode.outcome_edge.generateEdges()/]
[/template]

[template public generateDieNode(aDieNode : Die)]
	die
[/template]
[template public generateMoveNode(aMoveNode : Move)]
	move-to [aMoveNode.locationexpression.generateFunctionCallExpressions()/]
[/template]
[template public generateReproduceNode(aReproduceNode : Reproduce) post (replaceAll('\n', '').trim())]
	hatch-[aReproduceNode.ancestors(Entity).name.toLower()/]s [aReproduceNode.offspring_quantity.generateArithimeticExpressions()/]['[' /] move-to [aReproduceNode.initial_location.generateFunctionCallExpressions()/]
 set [aReproduceNode.declaredattributes.oclAsType(FunctionCallExpression).arguments->at(1).generateArithimeticExpressions().toLower()/]([aReproduceNode.declaredattributes.oclAsType(FunctionCallExpression).arguments->at(2).generateArithimeticExpressions().toLower()/])  [']' /]
[aReproduceNode.outcome_edge.generateEdges()/]
[/template]

