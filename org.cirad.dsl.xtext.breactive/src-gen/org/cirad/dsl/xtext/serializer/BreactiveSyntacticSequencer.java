/*
 * generated by Xtext 2.10.0
 */
package org.cirad.dsl.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.cirad.dsl.xtext.services.BreactiveGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class BreactiveSyntacticSequencer extends AbstractSyntacticSequencer {

	protected BreactiveGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArithmeticFCExpression_HyphenMinusKeyword_0_q;
	protected AbstractElementAlias match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__a;
	protected AbstractElementAlias match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__p;
	protected AbstractElementAlias match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__a;
	protected AbstractElementAlias match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__p;
	protected AbstractElementAlias match_Model_RightCurlyBracketKeyword_1_a;
	protected AbstractElementAlias match_Model_RightCurlyBracketKeyword_1_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (BreactiveGrammarAccess) access;
		match_ArithmeticFCExpression_HyphenMinusKeyword_0_q = new TokenAlias(false, true, grammarAccess.getArithmeticFCExpressionAccess().getHyphenMinusKeyword_0());
		match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__a = new GroupAlias(true, true, new TokenAlias(false, true, grammarAccess.getArithmeticFCExpressionAccess().getHyphenMinusKeyword_0()), new TokenAlias(false, false, grammarAccess.getPrimaryArithmeticExpressionAccess().getLeftParenthesisKeyword_0_0()));
		match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getArithmeticFCExpressionAccess().getHyphenMinusKeyword_0()), new TokenAlias(false, false, grammarAccess.getPrimaryArithmeticExpressionAccess().getLeftParenthesisKeyword_0_0()));
		match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryArithmeticExpressionAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, true, grammarAccess.getArithmeticFCExpressionAccess().getHyphenMinusKeyword_0()));
		match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getPrimaryArithmeticExpressionAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, true, grammarAccess.getArithmeticFCExpressionAccess().getHyphenMinusKeyword_0()));
		match_Model_RightCurlyBracketKeyword_1_a = new TokenAlias(true, true, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_1());
		match_Model_RightCurlyBracketKeyword_1_p = new TokenAlias(true, false, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal STRING	: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArithmeticFCExpression_HyphenMinusKeyword_0_q.equals(syntax))
				emit_ArithmeticFCExpression_HyphenMinusKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__a.equals(syntax))
				emit_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__p.equals(syntax))
				emit_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__a.equals(syntax))
				emit_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__p.equals(syntax))
				emit_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_RightCurlyBracketKeyword_1_a.equals(syntax))
				emit_Model_RightCurlyBracketKeyword_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model_RightCurlyBracketKeyword_1_p.equals(syntax))
				emit_Model_RightCurlyBracketKeyword_1_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ('(' (ambiguity))* arguments+=ConstantExpression
	 *     (rule start) (ambiguity) ('(' (ambiguity))* arguments+=DeclaredVariable
	 *     (rule start) (ambiguity) ('(' (ambiguity))* {FunctionCallExpression.arguments+=}
	 */
	protected void emit_ArithmeticFCExpression_HyphenMinusKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('-'? '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) function=CountFunction
	 *     (rule start) '(' (ambiguity) function=MathFunction
	 *     (rule start) (ambiguity) function=CountFunction
	 *     (rule start) (ambiguity) function=MathFunction
	 */
	protected void emit_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('-'? '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) function=CountFunction
	 *     (rule start) (ambiguity) function=MathFunction
	 */
	protected void emit_ArithmeticFCExpression_PrimaryArithmeticExpression___HyphenMinusKeyword_0_q_LeftParenthesisKeyword_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' '-'?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '-'? (ambiguity) arguments+=ConstantExpression
	 *     (rule start) '-'? (ambiguity) arguments+=DeclaredVariable
	 *     (rule start) '-'? (ambiguity) {FunctionCallExpression.arguments+=}
	 *     (rule start) (ambiguity) arguments+=ConstantExpression
	 *     (rule start) (ambiguity) arguments+=DeclaredVariable
	 *     (rule start) (ambiguity) {FunctionCallExpression.arguments+=}
	 */
	protected void emit_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' '-'?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {FunctionCallExpression.arguments+=}
	 */
	protected void emit_ArithmeticFCExpression_PrimaryArithmeticExpression___LeftParenthesisKeyword_0_0_HyphenMinusKeyword_0_q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'Model' name=ID
	 *     init+=InitEntity (ambiguity) 'Model' name=ID
	 *     init+=InitEntity (ambiguity) (rule end)
	 *     init+=InitSpace (ambiguity) 'Model' name=ID
	 *     init+=InitSpace (ambiguity) (rule end)
	 *     mainBehavior=Behavior (ambiguity) 'Model' name=ID
	 *     mainBehavior=Behavior (ambiguity) (rule end)
	 */
	protected void emit_Model_RightCurlyBracketKeyword_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '}'+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Model_RightCurlyBracketKeyword_1_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
