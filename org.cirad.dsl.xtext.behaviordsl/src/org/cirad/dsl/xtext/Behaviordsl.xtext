grammar org.cirad.dsl.xtext.Behaviordsl with org.eclipse.xtext.common.Terminals

//generate behavior "http://www.cirad.org/dsl/text/behavior/Behavior"

import "http://www.cirad.org/dsl/BehaviorMetamodel" as behavior
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model returns behavior::Model:
	'Model' name=ID '{'
		(
			(entities+=Entity)*
			("Run main as : " mainBehavior=Behavior)
			(init+=InitEntity)*
			(init+=InitSpace)*
			
		)&
	'}'
; 
Entity returns behavior::Entity: 
{behavior::Entity}
	'Entity' (name=ID ) '{' 
		('Attributes' '{' attributes+=AttributeClass (',' attributes+=AttributeClass)* '}')?
		(behavior+=Behavior (behavior+=Behavior)*)?			
	'}'
;

InitEntity returns behavior::InitEntity: 
	 	initFunctionCall=EntitySetCreateFCExpression 'as ' initName=ID '{'
	 	'each' entity+=[behavior::Entity] '{'
		(
			('position =' initialLocation=LocationNamedFCExpression)&
			(assingnments+=Assignment)*
		)
		'}'
	'}' 
;

Assignment returns behavior::Assignment:
	
	variable=(DeclaredVariable) ':=' expression=(FunctionCallExpression) 
;

InitSpace returns behavior::InitSpace: 
{behavior::InitSpace}	
	 	initFunctionCall=SpaceInitFCExpression'{'
		'each' entity+=[behavior::Entity] '{'
			(assingnments+=Assignment)*		
		 '}'
	'}'
;


//Location returns behavior::Location: 
	
//	name=ID
//;

ParameterClass returns behavior::ParameterClass:
{behavior::ParameterClass}
        name=ID ':' type=TypeEnum
    ;

AttributeClass returns behavior::AttributeClass:
{behavior::AttributeClass}
        name=ID  ':' type=TypeEnum
    ;
LocalVariableClass returns behavior::LocalVariable:
{behavior::LocalVariable}    
        
        'let' name=ID '<-' expression=(FunctionCallExpression) ;

Behavior returns behavior::Behavior: 
	
	EquationBehaviour | ActivityDiagramBehavior | ActivityBehavior
;

Edge returns behavior::Edge:
	
	UnconditionedEdge | TrueEdge | FalseEdge
;

Node returns behavior::Node:
	ControlNode | ExcecutableNode | DeclaredBehavior
;

ControlNode returns behavior::ControlNode:
	Decision | Join | Start | End | Fork | Merge 
;

ExcecutableNode returns behavior::ExecutableNode:
	
	PrimitiveActivities;

PrimitiveActivities returns behavior::PrimitiveActivities:
 
 Add | Remove | Move | Reproduce | Die | Set
;
//EString returns behavior::ExcecutableNode:
//	ecore::EString: STRING | ID;

QualifiedName returns ecore::EString:

  ID ('.' ID)*
; 

EquationBehaviour returns behavior::EquationBehavior:
{behavior::EquationBehavior}
	'EquationBehaviour' name=ID 	'{'
		('Parameters' '(' parameters+=ParameterClass ( "," parameters+=ParameterClass)* ')')
		(localvariable+=LocalVariableClass (localvariable+=LocalVariableClass)*)? 
		'Equation' '{' equation=Equation '}'
	'}'
	;

ActivityBehavior returns behavior::ActivityBehavior :
{behavior::ActivityBehavior}
	'ActivityBehavior' name=ID 
	'{'
		('Parameters' '(' parameters+=ParameterClass ( "," parameters+=ParameterClass)* ')')? 
		(localvariable+=LocalVariableClass (localvariable+=LocalVariableClass)*)? 
		(primitiveaactivities+=PrimitiveActivities (primitiveaactivities+=PrimitiveActivities)*)? 
	'}'
	;

ActivityDiagramBehavior returns behavior::ActivityDiagramBehavior :
{behavior::ActivityDiagramBehavior}
	'ActivityDiagramBehavior' name=ID
	'{'
		('Parameters' '(' parameters+=ParameterClass ( "," parameters+=ParameterClass)* ')')?
		(localvariable+=LocalVariableClass (localvariable+=LocalVariableClass)*)? 
		(start=Start)
	'}'
	;

Equation returns behavior::Equation:
	left=DeclaredAttributes '='
	right=ArithmeticFCExpression	;

//EInt returns ecore::EInt:
//	INT;

/////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!NAMED FUNCTIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\\\

NumericNamedFunction returns behavior::NamedFunction:
	
	ArithmeticFunction  | MathFunction | CountFunction
;

ArithmeticFunction returns behavior::NamedFunction:
	
	ArithmeticFunctionMultiplication | ArithmeticFunctionPlus
;

ArithmeticFunctionMultiplication returns behavior::NamedFunction:
	
	name= ('+' | '-')

;

ArithmeticFunctionPlus returns behavior::NamedFunction:
	
	name= ('/' | '*')
;
MathFunction returns behavior::NamedFunction:
	
	UnaryMathBinaryFunction
;
UnaryMathBinaryFunction returns behavior::NamedFunction: 
	
	name=('sqrt' | 'random' | 'floor' | 'exp')
;

CountFunction returns behavior::NamedFunction:
	
	name='count'
;

LocationNamedFunction returns behavior::NamedFunction:
	
	SimpleLocationNamedFunction | LocationSetNamedFunction
;

SimpleLocationNamedFunction returns behavior::NamedFunction:
	
	MaxOneOfLocationFunction | SelectConditionalLocationFunction | OneOfLocationFunction | LocationPrimitiveFunction 
;

MaxOneOfLocationFunction returns behavior::NamedFunction:
	name='max-one-of'
;

SelectConditionalLocationFunction returns behavior::NamedFunction:
	name='select location'
;
OneOfLocationFunction returns behavior::NamedFunction:
	name='one-of'
;

LocationPrimitiveFunction returns behavior::NamedFunction:
	
	name=('here' | 'top' | 'left' | 'right' |'grid'| 'bottom' | 'neighborhood') ;
	
////////////////////////////////////////////////////////////

LocationSetNamedFunction returns behavior::NamedFunction:
	
	NeighborhoodLocationFunction |SpaceLocationFunction | UnionLocationFunction
	
;
NeighborhoodLocationFunction returns behavior::NamedFunction :

	name=('neighborhood');
	
SpaceLocationFunction returns behavior::NamedFunction :

	name=('grid');
	
UnionLocationFunction returns behavior::NamedFunction :
	name='union-location'
;

//////////////////////////////////////////////////////////////
BooleanNamedFunction returns behavior::NamedFunction:
	
	BooleanGetFunction | BooleanPrimitiveFunction | BooleanSetFunction | BooleanNumericComparisonFunction | BooleanIsOccuppiedLocationFunction | BooleanLogicFunction 
	 
;

BooleanPrimitiveFunction returns behavior::NamedFunction:
	name=('true' | 'false')
;

BooleanSetFunction returns behavior::NamedFunction:
	
	name= 'set'
;

BooleanGetFunction returns behavior::NamedFunction:
	
	name= 'get'
;

BooleanNumericComparisonFunction returns behavior::NamedFunction:
	
	name = ('>=' |  '>' | '!=' | '<' |  '<=' | '=')
	;

BooleanIsOccuppiedLocationFunction returns behavior::NamedFunction:
		
		name = ('occupied')
;

BooleanLogicFunction returns behavior::NamedFunction:
	
	BooleanUnaryLogicFunction | BooleanANDBinaryLogicFunction | BooleanORBinaryLogicFunction
;

BooleanUnaryLogicFunction returns behavior::NamedFunction:
		name= ('NOT')
;

BooleanANDBinaryLogicFunction returns behavior::NamedFunction:
		name= ('AND')
;

BooleanORBinaryLogicFunction returns behavior::NamedFunction:
		name= ('OR')
;


EntityNamedFunction returns behavior::NamedFunction:
	
	EntityOneOfFunction | EntityQuantifierFunction
;

EntityQuantifierFunction returns behavior::NamedFunction:
	
	EntityAllQuantifierFunction | EntityAnyQuantifierFunction
;
EntitySetConditionalFunction returns behavior::NamedFunction:
	
	name='has'
;

EntityAnyQuantifierFunction returns behavior::NamedFunction:
	
	name='any'
;

EntityAllQuantifierFunction returns behavior::NamedFunction:
	
	name='all'
;

EntitySetCreateFunction returns behavior::NamedFunction :

	name = 'Create '
;

EntitySetOnLocationFunction returns behavior::NamedFunction :

	name = 'on'
;

SpaceInitFunction returns behavior::NamedFunction :

	name = 'Create grid'
;
EntityOneOfFunction returns behavior::NamedFunction :

	name = 'one-of'
;

GetNamedFunction returns behavior::NamedFunction:
	
	GetVariableFunction | GetEntityNamedFunction
;
GetVariableFunction returns behavior::NamedFunction:	
	 name='of'

;
GetEntityNamedFunction returns behavior::NamedFunction :
	
	name='entity'
;

GetEntityFromLocationNamedFunction returns behavior::NamedFunction :
	
	name='from'
;

/////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!EXPRESSIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\

FunctionCallExpression returns behavior::FunctionCallExpression:
	
	NumericNamedFCExpression |LocationNamedFCExpression | 
	 BooleanNamedFCExpression | EntityNamedFCExpression | GetNamedFCExpression
;

AnonymousFunction returns behavior::AnonymousFunction:

	'function'
	('(' (parameters+=ParameterClass (',' parameters+=ParameterClass)*)? ')')
			'{' 
				expression=FunctionCallExpression 
			'}'
;

//////// BOOLEAN FUNCTION EXPRESSION DEFINITION\\\\\\\\\\\\\\\\
BooleanNamedFCExpression returns behavior::FunctionCallExpression:
	
	BooleanPrimitiveFCExpression | BooleanSetValueFCExpression | BooleanGetValueFCExpression | 
	BooleanNumericComparisonFCExpression | BooleanIsOccuppiedLocationFCExpression | 
	BooleanQuantifiedEntitySetFCEpression | BooleanUnaryLogicFCExpression 	 
;

BooleanQuantifiedEntitySetFCEpression returns behavior::FunctionCallExpression:
	
	function=EntityQuantifierFunction
	arguments+=DeclaredEntities 'on'
	arguments+=LocationPrimitiveFCExpression
	'has' arguments+=(BooleanNumericComparisonFCExpression)
;

BooleanPrimitiveFCExpression returns behavior::FunctionCallExpression:
	function=BooleanPrimitiveFunction
;

BooleanSetValueFCExpression returns behavior::FunctionCallExpression:
	
	function=BooleanSetFunction arguments+=(DeclaredVariable) 'as true'
	
;

BooleanGetValueFCExpression returns behavior::FunctionCallExpression:
	
     function= BooleanGetFunction arguments+=(DeclaredVariable) 'true'

;

BooleanNumericComparisonFCExpression returns behavior::FunctionCallExpression:
	
	arguments+=(DeclaredVariable | ConstantExpression)
	function=BooleanNumericComparisonFunction
	arguments+=(DeclaredVariable | ConstantExpression)
;

BooleanIsOccuppiedLocationFCExpression returns behavior::FunctionCallExpression:
{behavior::FunctionCallExpression}
    (arguments+=LocationPrimitiveFCExpression) 'is '	
	arguments+=(BooleanUnaryLogicFCExpression)? 
	function=(BooleanIsOccuppiedLocationFunction)
	('by'  '(' arguments+=EntitySetConditionalFCExpression (',' arguments+=EntitySetConditionalFCExpression)* ')')? 
;

BooleanLogicFCExpression returns behavior::FunctionCallExpression:
	
	OrExpr
;
AndExpr returns behavior::FunctionCallExpression:
PrimaryBooleanExpression ({behavior::FunctionCallExpression.arguments+=current} function=BooleanANDBinaryLogicFunction arguments+=PrimaryBooleanExpression)*;

OrExpr returns behavior::FunctionCallExpression:
AndExpr ({behavior::FunctionCallExpression.arguments+=current} function=BooleanORBinaryLogicFunction arguments+=AndExpr)*;

PrimaryBooleanExpression returns behavior::FunctionCallExpression:

'(' BooleanNamedFCExpression ')';	



BooleanUnaryLogicFCExpression returns behavior::FunctionCallExpression:
	
	function=BooleanUnaryLogicFunction 
	//arguments+=BooleanLogicFCExpression
	
;



////// LOCATION FUNCTION EXPRESSION DEFINITION \\\\\\\\

LocationNamedFCExpression returns behavior::FunctionCallExpression:
	
	MaxOneOfLocationFCExpression | SelectConditionalLocationFCExpression | OneOfLocationFCExpression | LocationPrimitiveFCExpression 
;

LocationSetNamedFCExpression returns behavior::FunctionCallExpression:
	NeighborFCExpression | UnionLocationFCExpression | SpaceFCExpression
;

UnionLocationFCExpression returns  behavior::FunctionCallExpression : // LocationSetFunction
{behavior::FunctionCallExpression}	
	function=UnionLocationFunction('(' arguments+=LocationNamedFCExpression (","arguments+=LocationNamedFCExpression)*')') 
;

NeighborFCExpression returns behavior::FunctionCallExpression :
{behavior::FunctionCallExpression}		
	function=NeighborhoodLocationFunction
;

SpaceFCExpression returns behavior::FunctionCallExpression :
{behavior::FunctionCallExpression}	
	function=SpaceLocationFunction 
	('of' arguments+=DeclaredEntities)
	('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
;

SpaceInitFCExpression returns behavior::FunctionCallExpression :
{behavior::FunctionCallExpression}	
	function=SpaceInitFunction ('of' arguments+=DeclaredEntities) 
	('('arguments+=ConstantExpression','arguments+=ConstantExpression')')
;


/////////ENTITY FUNCTION DEFINITION////

EntityNamedFCExpression returns behavior::FunctionCallExpression:
    
    EntityOneOfFCExpression  //| EntityFromLocationFCExpression
;

EntitySetCreateFCExpression returns behavior::FunctionCallExpression:
	
	function=EntitySetCreateFunction 
	(arguments+=DeclaredEntities) 
	(arguments+=ConstantExpression)
;

EntityOneOfFCExpression returns behavior::FunctionCallExpression:


    function=EntityOneOfFunction 
    ('('arguments+=DeclaredEntities ('from ' arguments+=LocationNamedFCExpression))
	('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
    ')'
;
//EntityFromLocationFCExpression returns behavior::FunctionCallExpression :
	
//	function=GetAttributeFunction '(' arguments+=DeclaredAttributes 'from' arguments+=LocationNamedFCExpression ')'
//;
/////////ENTITY SET FUNCTION DEFINITION////
EntitySetFunctionCallExpression returns behavior::FunctionCallExpression :
	
	EntitySetOnLocationFCExpression | EntitySetConditionalFCExpression
;

EntitySetOnLocationFCExpression returns behavior::FunctionCallExpression:
	
     arguments+= DeclaredEntities 
     function=EntitySetOnLocationFunction arguments+=LocationPrimitiveFCExpression
    //(arguments+=BooleanBinaryLogicFCExpression?) 
;
EntitySetConditionalFCExpression returns behavior::FunctionCallExpression:

	(function=EntityNamedFunction)? 
	(arguments+=DeclaredEntities arguments+=LocationPrimitiveFCExpression)
	('having ' arguments+=BooleanLogicFCExpression)?
;

//NUMERIC FUNCTION DEFINITION\\\\\\\

NumericNamedFCExpression returns behavior::FunctionCallExpression:
	
	 ArithmeticFCExpression  | MathFCExpression | CountFCExpression
;

ArithmeticFCExpression returns behavior::FunctionCallExpression:

	'-'? Addition
;

Addition returns behavior::FunctionCallExpression:
	Multiplication ({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionPlus arguments+=Multiplication)*;

Multiplication returns behavior::FunctionCallExpression:
	PrimaryArithmeticExpression ({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionMultiplication arguments+=PrimaryArithmeticExpression)*;
   
PrimaryArithmeticExpression returns behavior::FunctionCallExpression:
'('NumericNamedFCExpression ')' |
arguments+=DeclaredVariable | 
arguments+=ConstantExpression
;

ConstantExpression returns behavior::ConstantExpression:
{behavior::ConstantExpression}
	value=Float
;

CountFCExpression returns behavior::FunctionCallExpression:
	
	CountVariableFCExpression | CountEntityFCExpression
;

CountVariableFCExpression returns behavior::FunctionCallExpression:
	function=CountFunction 
	'(' arguments+= (DeclaredVariable ) ')'
;

CountEntityFCExpression returns behavior::FunctionCallExpression:
	function=CountFunction 
	'(' arguments+= (EntitySetConditionalFCExpression)  ')'
;

MathFCExpression returns behavior::FunctionCallExpression:
	
	function=MathFunction '('arguments+=(NumericNamedFCExpression)')'
;


///////////////////////////////////GET FUNCTION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

GetNamedFCExpression returns behavior::FunctionCallExpression:
		
	GetAttributeFromEntityFCExpression 
;

GetAttributeFromEntityFCExpression returns behavior::FunctionCallExpression:
	
	arguments+=DeclaredVariable 
	function=GetVariableFunction 
	arguments+=(EntityNamedFCExpression | DeclaredEntities) 
	('from ' arguments+=LocationNamedFCExpression)?
;

GetLocalVariableFCExpression returns  behavior::FunctionCallExpression:
	
	function=GetVariableFunction arguments+=DeclaredVariable
;

GetEntityNameFCExpression returns  behavior::FunctionCallExpression :
	
	arguments+=DeclaredEntities 
;
GetParametersFCExpression returns  behavior::FunctionCallExpression :
	arguments+=DeclaredParameter function=GetVariableFunction 
	arguments+=EntityNamedFCExpression
;


/// LOCATION FUNCTION DEFINITION\\\\\
MaxOneOfLocationFCExpression returns behavior::FunctionCallExpression: // LocationFunction
{behavior::FunctionCallExpression}	
	function=MaxOneOfLocationFunction
	    ('[' 
			arguments+=DeclaredAttributes
			',' 
			arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression)
			arguments+=(UnionLocationFCExpression)?
		  ']'
		)
	;

OneOfLocationFCExpression returns behavior::FunctionCallExpression: // LocationFunction
{behavior::FunctionCallExpression}	
	function=OneOfLocationFunction
	    ('['(arguments+=SelectConditionalLocationFCExpression)?
			(arguments+=LocationSetNamedFCExpression)?
			(arguments+=DeclaredLocalVariable)?		
		  ']'
		)
	;

SelectConditionalLocationFCExpression returns behavior::FunctionCallExpression: // LocationSetFunction
{behavior::FunctionCallExpression}
	function=SelectConditionalLocationFunction 'from [' arguments+=LocationPrimitiveFCExpression ']' 
	'such that'  (arguments+=BooleanLogicFCExpression)
;


LocationPrimitiveFCExpression returns  behavior::FunctionCallExpression:
{behavior::FunctionCallExpression}

	function = LocationPrimitiveFunction
;


///LOCATION SET FUNCTIONS\\\\\\\\


////SET FUNCTIONS


SetNamedFunctionExpression returns behavior::FunctionCallExpression:
	
	SetAttributeNamedFCExpression | SetLocationNamedFCExpression
;

SetAttributeNamedFCExpression returns behavior::FunctionCallExpression:
	
	arguments+=DeclaredAttributes '(' (arguments+=ConstantExpression | STRING)   ')'
		
;		
SetLocationNamedFCExpression returns behavior::FunctionCallExpression:
	
		arguments+=DeclaredAttributes '(' arguments+=LocationNamedFCExpression ')'
;

DeclaredLocalVariable returns behavior::DeclaredLocalVariable:
{behavior::DeclaredLocalVariable}	
	localvariable=[behavior::LocalVariable]
;
DeclaredAttributes returns behavior::DeclaredAttributes:
		
	attributeclass=[behavior::AttributeClass]
;
DeclaredParameter returns behavior::DeclaredParameter:
{behavior::DeclaredParameter}	
	parameterclass=[behavior::ParameterClass|QualifiedName]
;

DeclaredVariable returns behavior::DeclaredVariable:
{behavior::DeclaredVariable}
	   variableclass=[behavior::VariableClass|QualifiedName]
;	

DeclaredEntities returns behavior::DeclaredEntities:
	
	entity=[behavior::Entity|QualifiedName]
;

//DeclaredLocation returns behavior::DeclaredLocation:
	
//	location=[behavior::Location]
//;


//DeclaredNode returns behavior::DeclaredNode:

//	node=[behavior::Node]
//;


Type returns behavior::Type:
        type=TypeEnum
    ;

/////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!ENUMERATIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\


enum TypeEnum returns behavior::TypeEnum:
			
	string = 'String' |	integer = 'Int' | float = 'Float' | boolean = 'Boolean' | 
	location = 'Location' | locationset = 'LocationSet' | entity='Entity' | entityset = 'EntitySet'

;

Float returns ecore::EFloat:
	INT
	('.'INT)? 
;

/////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!DIAGRAMME D'ACTIVITE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\

Start returns behavior::Start:
{behavior::Start}
	name='Start' outcome_edge+=UnconditionedEdge	
	;

End returns behavior::End:
{behavior::End}
	name='End'
	;
DeclaredBehavior returns behavior::DeclaredBehavior:
	
	behavior=[behavior::Behavior]
	outcome_edge+=UnconditionedEdge
;

UnconditionedEdge returns behavior::UnconditionedEdge:
{behavior::UnconditionedEdge}
	name='->' 
	(target_node+=DeclaredBehavior | 
	 target_node+=End | 
	 target_node+=Decision | 
	 target_node+=Fork | 
	 target_node+=Merge | 
	 target_node+=Join  |
	 target_node+=PrimitiveActivities  
	) 
	// All nodes, except start
;

TrueEdge returns behavior::IfTrueEdge:
{behavior::IfTrueEdge}
    name='then'  target_node+=Node
    ;

FalseEdge returns behavior::IfFalseEdge:
{behavior::IfFalseEdge}
	name='else' target_node+=Node
	;

Decision returns behavior::Decision:
{behavior::Decision}
	
	name='Decide ' '{' 'if' '('
	 						( booleanexpression+=BooleanNamedFCExpression (booleanexpression+=BooleanLogicFCExpression)*)? 
	 						')'					
			(outcome_edge+=TrueEdge (outcome_edge+=FalseEdge)?)
    '}';
	
Join returns behavior::Join:
{behavior::Join}
	name='Join with (' outcome_edge+=UnconditionedEdge ( "," outcome_edge+=UnconditionedEdge)* ')'
	'and goes to' outcome_edge+=UnconditionedEdge
	;

Fork returns behavior::Fork:
{behavior::Fork}
	name='Fork into (' outcome_edge+=UnconditionedEdge ( "," outcome_edge+=UnconditionedEdge)* ')'
	;

Merge returns behavior::Merge:
{behavior::Merge}
	name='Merge with (' outcome_edge+=UnconditionedEdge ( "," outcome_edge+=UnconditionedEdge)* ')'
	'and goes to' outcome_edge+=UnconditionedEdge
	;
	
Move returns behavior::Move:
{behavior::Move}
	name='Move to ' '{' 
				    (locationexpression=DeclaredLocalVariable | locationexpression=LocationNamedFCExpression)
 				 '}'
 	outcome_edge+=UnconditionedEdge 
	;

Die returns behavior::Die:
{behavior::Die}
	name='Die'
	(outcome_edge+=UnconditionedEdge)?
	;

Reproduce returns behavior::Reproduce:
{behavior::Reproduce}
	name='Reproduce' '('offspring_quantity=ConstantExpression ')' 
	('with ' declaredattributes+=SetAttributeNamedFCExpression (','declaredattributes+=SetAttributeNamedFCExpression)*)		
	('placed on' initial_location=LocationNamedFCExpression)
	('where' occupiedExpression+=BooleanIsOccuppiedLocationFCExpression)?
	(outcome_edge+=UnconditionedEdge)?	
	; 

Add returns behavior::Add:
{behavior::Add}
	(name='Add' expression+=(FunctionCallExpression) 'to') (toAttribute=DeclaredAttributes)
	(outcome_edge+=UnconditionedEdge)?
;

Remove returns behavior::Remove:
{behavior::Remove}
	(name='Remove' expression+=(FunctionCallExpression) 'from ') (from=DeclaredAttributes)
	(outcome_edge+=UnconditionedEdge)?
;

Set returns behavior::SetVariable:
{behavior::SetVariable}
	(name='Set' assignment=Assignment)
	(outcome_edge+=UnconditionedEdge)?
;

//While returns behavior:: :
//	name='While';
/////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!TERMINALS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\\\

//terminal NUMBER returns ecore::EFloat:
//	('0'..'9')*
//	('.' ('0'..'9')+)?;
//terminal INT returns ecore::EInt:
//	'this one has been deactivated';