/*
 * generated by Xtext
 */
package org.cirad.dsl.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class BehaviordslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Model");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cModelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cEntitiesAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_3_0_0 = (RuleCall)cEntitiesAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cRunMainAsKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cMainBehaviorAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cMainBehaviorBehaviorParserRuleCall_0_3_1_1_0 = (RuleCall)cMainBehaviorAssignment_0_3_1_1.eContents().get(0);
		private final Assignment cInitAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final RuleCall cInitInitEntityParserRuleCall_0_3_2_0 = (RuleCall)cInitAssignment_0_3_2.eContents().get(0);
		private final Assignment cInitAssignment_0_3_3 = (Assignment)cGroup_0_3.eContents().get(3);
		private final RuleCall cInitInitSpaceParserRuleCall_0_3_3_0 = (RuleCall)cInitAssignment_0_3_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1 = (Keyword)cUnorderedGroup.eContents().get(1);
		
		//Model behavior::Model:
		//	'Model' name=ID '{' (entities+=Entity* ("Run main as : " mainBehavior=Behavior) init+=InitEntity*
		//	init+=InitSpace*) &
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'Model' name=ID '{' (entities+=Entity* ("Run main as : " mainBehavior=Behavior) init+=InitEntity* init+=InitSpace*) &
		//'}'
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//'Model' name=ID '{' (entities+=Entity* ("Run main as : " mainBehavior=Behavior) init+=InitEntity* init+=InitSpace*)
		public Group getGroup_0() { return cGroup_0; }

		//'Model'
		public Keyword getModelKeyword_0_0() { return cModelKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_0() { return cNameIDTerminalRuleCall_0_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }

		//(entities+=Entity* ("Run main as : " mainBehavior=Behavior) init+=InitEntity* init+=InitSpace*)
		public Group getGroup_0_3() { return cGroup_0_3; }

		//entities+=Entity*
		public Assignment getEntitiesAssignment_0_3_0() { return cEntitiesAssignment_0_3_0; }

		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_3_0_0() { return cEntitiesEntityParserRuleCall_0_3_0_0; }

		//("Run main as : " mainBehavior=Behavior)
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//"Run main as : "
		public Keyword getRunMainAsKeyword_0_3_1_0() { return cRunMainAsKeyword_0_3_1_0; }

		//mainBehavior=Behavior
		public Assignment getMainBehaviorAssignment_0_3_1_1() { return cMainBehaviorAssignment_0_3_1_1; }

		//Behavior
		public RuleCall getMainBehaviorBehaviorParserRuleCall_0_3_1_1_0() { return cMainBehaviorBehaviorParserRuleCall_0_3_1_1_0; }

		//init+=InitEntity*
		public Assignment getInitAssignment_0_3_2() { return cInitAssignment_0_3_2; }

		//InitEntity
		public RuleCall getInitInitEntityParserRuleCall_0_3_2_0() { return cInitInitEntityParserRuleCall_0_3_2_0; }

		//init+=InitSpace*
		public Assignment getInitAssignment_0_3_3() { return cInitAssignment_0_3_3; }

		//InitSpace
		public RuleCall getInitInitSpaceParserRuleCall_0_3_3_0() { return cInitInitSpaceParserRuleCall_0_3_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_1() { return cRightCurlyBracketKeyword_1; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAttributesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAttributesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAttributesAttributeClassParserRuleCall_4_2_0 = (RuleCall)cAttributesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cAttributesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cAttributesAttributeClassParserRuleCall_4_3_1_0 = (RuleCall)cAttributesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cBehaviorAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cBehaviorBehaviorParserRuleCall_5_0_0 = (RuleCall)cBehaviorAssignment_5_0.eContents().get(0);
		private final Assignment cBehaviorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBehaviorBehaviorParserRuleCall_5_1_0 = (RuleCall)cBehaviorAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity behavior::Entity:
		//	{behavior::Entity}
		//	'Entity' name=ID '{' ('Attributes' '{' attributes+=AttributeClass (',' attributes+=AttributeClass)* '}')?
		//	(behavior+=Behavior behavior+=Behavior*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Entity} 'Entity' name=ID '{' ('Attributes' '{' attributes+=AttributeClass (',' attributes+=AttributeClass)*
		//'}')? (behavior+=Behavior behavior+=Behavior*)? '}'
		public Group getGroup() { return cGroup; }

		//{behavior::Entity}
		public Action getEntityAction_0() { return cEntityAction_0; }

		//'Entity'
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('Attributes' '{' attributes+=AttributeClass (',' attributes+=AttributeClass)* '}')?
		public Group getGroup_4() { return cGroup_4; }

		//'Attributes'
		public Keyword getAttributesKeyword_4_0() { return cAttributesKeyword_4_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//attributes+=AttributeClass
		public Assignment getAttributesAssignment_4_2() { return cAttributesAssignment_4_2; }

		//AttributeClass
		public RuleCall getAttributesAttributeClassParserRuleCall_4_2_0() { return cAttributesAttributeClassParserRuleCall_4_2_0; }

		//(',' attributes+=AttributeClass)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//attributes+=AttributeClass
		public Assignment getAttributesAssignment_4_3_1() { return cAttributesAssignment_4_3_1; }

		//AttributeClass
		public RuleCall getAttributesAttributeClassParserRuleCall_4_3_1_0() { return cAttributesAttributeClassParserRuleCall_4_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//(behavior+=Behavior behavior+=Behavior*)?
		public Group getGroup_5() { return cGroup_5; }

		//behavior+=Behavior
		public Assignment getBehaviorAssignment_5_0() { return cBehaviorAssignment_5_0; }

		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_5_0_0() { return cBehaviorBehaviorParserRuleCall_5_0_0; }

		//behavior+=Behavior*
		public Assignment getBehaviorAssignment_5_1() { return cBehaviorAssignment_5_1; }

		//Behavior
		public RuleCall getBehaviorBehaviorParserRuleCall_5_1_0() { return cBehaviorBehaviorParserRuleCall_5_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InitEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.InitEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitFunctionCallAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitFunctionCallEntitySetCreateFCExpressionParserRuleCall_0_0 = (RuleCall)cInitFunctionCallAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitNameIDTerminalRuleCall_2_0 = (RuleCall)cInitNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEachKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEntityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEntityEntityCrossReference_5_0 = (CrossReference)cEntityAssignment_5.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_5_0_1 = (RuleCall)cEntityEntityCrossReference_5_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final UnorderedGroup cUnorderedGroup_7 = (UnorderedGroup)cGroup.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cUnorderedGroup_7.eContents().get(0);
		private final Keyword cPositionKeyword_7_0_0 = (Keyword)cGroup_7_0.eContents().get(0);
		private final Assignment cInitialLocationAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cInitialLocationLocationNamedFCExpressionParserRuleCall_7_0_1_0 = (RuleCall)cInitialLocationAssignment_7_0_1.eContents().get(0);
		private final Assignment cAssingnmentsAssignment_7_1 = (Assignment)cUnorderedGroup_7.eContents().get(1);
		private final RuleCall cAssingnmentsAssignmentParserRuleCall_7_1_0 = (RuleCall)cAssingnmentsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//InitEntity behavior::InitEntity:
		//	initFunctionCall=EntitySetCreateFCExpression 'as ' initName=ID '{'
		//	'each' entity+=[behavior::Entity] '{' ('position =' initialLocation=LocationNamedFCExpression &
		//	assingnments+=Assignment*)
		//	'}'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//initFunctionCall=EntitySetCreateFCExpression 'as ' initName=ID '{' 'each' entity+=[behavior::Entity] '{' ('position ='
		//initialLocation=LocationNamedFCExpression & assingnments+=Assignment*) '}' '}'
		public Group getGroup() { return cGroup; }

		//initFunctionCall=EntitySetCreateFCExpression
		public Assignment getInitFunctionCallAssignment_0() { return cInitFunctionCallAssignment_0; }

		//EntitySetCreateFCExpression
		public RuleCall getInitFunctionCallEntitySetCreateFCExpressionParserRuleCall_0_0() { return cInitFunctionCallEntitySetCreateFCExpressionParserRuleCall_0_0; }

		//'as '
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//initName=ID
		public Assignment getInitNameAssignment_2() { return cInitNameAssignment_2; }

		//ID
		public RuleCall getInitNameIDTerminalRuleCall_2_0() { return cInitNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//'each'
		public Keyword getEachKeyword_4() { return cEachKeyword_4; }

		//entity+=[behavior::Entity]
		public Assignment getEntityAssignment_5() { return cEntityAssignment_5; }

		//[behavior::Entity]
		public CrossReference getEntityEntityCrossReference_5_0() { return cEntityEntityCrossReference_5_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_5_0_1() { return cEntityEntityIDTerminalRuleCall_5_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//('position =' initialLocation=LocationNamedFCExpression & assingnments+=Assignment*)
		public UnorderedGroup getUnorderedGroup_7() { return cUnorderedGroup_7; }

		//'position =' initialLocation=LocationNamedFCExpression
		public Group getGroup_7_0() { return cGroup_7_0; }

		//'position ='
		public Keyword getPositionKeyword_7_0_0() { return cPositionKeyword_7_0_0; }

		//initialLocation=LocationNamedFCExpression
		public Assignment getInitialLocationAssignment_7_0_1() { return cInitialLocationAssignment_7_0_1; }

		//LocationNamedFCExpression
		public RuleCall getInitialLocationLocationNamedFCExpressionParserRuleCall_7_0_1_0() { return cInitialLocationLocationNamedFCExpressionParserRuleCall_7_0_1_0; }

		//assingnments+=Assignment*
		public Assignment getAssingnmentsAssignment_7_1() { return cAssingnmentsAssignment_7_1; }

		//Assignment
		public RuleCall getAssingnmentsAssignmentParserRuleCall_7_1_0() { return cAssingnmentsAssignmentParserRuleCall_7_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableDeclaredVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionFunctionCallExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment behavior::Assignment:
		//	variable=DeclaredVariable ':=' expression=FunctionCallExpression
		@Override public ParserRule getRule() { return rule; }

		//variable=DeclaredVariable ':=' expression=FunctionCallExpression
		public Group getGroup() { return cGroup; }

		//variable=DeclaredVariable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//DeclaredVariable
		public RuleCall getVariableDeclaredVariableParserRuleCall_0_0() { return cVariableDeclaredVariableParserRuleCall_0_0; }

		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//expression=FunctionCallExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//FunctionCallExpression
		public RuleCall getExpressionFunctionCallExpressionParserRuleCall_2_0() { return cExpressionFunctionCallExpressionParserRuleCall_2_0; }
	}

	public class InitSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.InitSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitSpaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInitFunctionCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInitFunctionCallSpaceInitFCExpressionParserRuleCall_1_0 = (RuleCall)cInitFunctionCallAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEachKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEntityEntityCrossReference_4_0 = (CrossReference)cEntityAssignment_4.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_4_0_1 = (RuleCall)cEntityEntityCrossReference_4_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAssingnmentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAssingnmentsAssignmentParserRuleCall_6_0 = (RuleCall)cAssingnmentsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//InitSpace behavior::InitSpace:
		//	{behavior::InitSpace} initFunctionCall=SpaceInitFCExpression '{'
		//	'each' entity+=[behavior::Entity] '{'
		//	assingnments+=Assignment*
		//	'}'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::InitSpace} initFunctionCall=SpaceInitFCExpression '{' 'each' entity+=[behavior::Entity] '{'
		//assingnments+=Assignment* '}' '}'
		public Group getGroup() { return cGroup; }

		//{behavior::InitSpace}
		public Action getInitSpaceAction_0() { return cInitSpaceAction_0; }

		//initFunctionCall=SpaceInitFCExpression
		public Assignment getInitFunctionCallAssignment_1() { return cInitFunctionCallAssignment_1; }

		//SpaceInitFCExpression
		public RuleCall getInitFunctionCallSpaceInitFCExpressionParserRuleCall_1_0() { return cInitFunctionCallSpaceInitFCExpressionParserRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'each'
		public Keyword getEachKeyword_3() { return cEachKeyword_3; }

		//entity+=[behavior::Entity]
		public Assignment getEntityAssignment_4() { return cEntityAssignment_4; }

		//[behavior::Entity]
		public CrossReference getEntityEntityCrossReference_4_0() { return cEntityEntityCrossReference_4_0; }

		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_4_0_1() { return cEntityEntityIDTerminalRuleCall_4_0_1; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//assingnments+=Assignment*
		public Assignment getAssingnmentsAssignment_6() { return cAssingnmentsAssignment_6; }

		//Assignment
		public RuleCall getAssingnmentsAssignmentParserRuleCall_6_0() { return cAssingnmentsAssignmentParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ParameterClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ParameterClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		////Location returns behavior::Location: 
		////	name=ID
		////;
		//ParameterClass behavior::ParameterClass:
		//	{behavior::ParameterClass} name=ID ':' type=TypeEnum
		@Override public ParserRule getRule() { return rule; }

		//{behavior::ParameterClass} name=ID ':' type=TypeEnum
		public Group getGroup() { return cGroup; }

		//{behavior::ParameterClass}
		public Action getParameterClassAction_0() { return cParameterClassAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_3_0() { return cTypeTypeEnumEnumRuleCall_3_0; }
	}

	public class AttributeClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.AttributeClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//AttributeClass behavior::AttributeClass:
		//	{behavior::AttributeClass} name=ID ':' type=TypeEnum
		@Override public ParserRule getRule() { return rule; }

		//{behavior::AttributeClass} name=ID ':' type=TypeEnum
		public Group getGroup() { return cGroup; }

		//{behavior::AttributeClass}
		public Action getAttributeClassAction_0() { return cAttributeClassAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeEnum
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_3_0() { return cTypeTypeEnumEnumRuleCall_3_0; }
	}

	public class LocalVariableClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocalVariableClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionFunctionCallExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//LocalVariableClass behavior::LocalVariable:
		//	{behavior::LocalVariable}
		//	'let' name=ID '<-' expression=FunctionCallExpression
		@Override public ParserRule getRule() { return rule; }

		//{behavior::LocalVariable} 'let' name=ID '<-' expression=FunctionCallExpression
		public Group getGroup() { return cGroup; }

		//{behavior::LocalVariable}
		public Action getLocalVariableAction_0() { return cLocalVariableAction_0; }

		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_3() { return cLessThanSignHyphenMinusKeyword_3; }

		//expression=FunctionCallExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//FunctionCallExpression
		public RuleCall getExpressionFunctionCallExpressionParserRuleCall_4_0() { return cExpressionFunctionCallExpressionParserRuleCall_4_0; }
	}

	public class BehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Behavior");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEquationBehaviourParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActivityDiagramBehaviorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActivityBehaviorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Behavior behavior::Behavior:
		//	EquationBehaviour | ActivityDiagramBehavior | ActivityBehavior
		@Override public ParserRule getRule() { return rule; }

		//EquationBehaviour | ActivityDiagramBehavior | ActivityBehavior
		public Alternatives getAlternatives() { return cAlternatives; }

		//EquationBehaviour
		public RuleCall getEquationBehaviourParserRuleCall_0() { return cEquationBehaviourParserRuleCall_0; }

		//ActivityDiagramBehavior
		public RuleCall getActivityDiagramBehaviorParserRuleCall_1() { return cActivityDiagramBehaviorParserRuleCall_1; }

		//ActivityBehavior
		public RuleCall getActivityBehaviorParserRuleCall_2() { return cActivityBehaviorParserRuleCall_2; }
	}

	public class EdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Edge");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnconditionedEdgeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrueEdgeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFalseEdgeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Edge behavior::Edge:
		//	UnconditionedEdge | TrueEdge | FalseEdge
		@Override public ParserRule getRule() { return rule; }

		//UnconditionedEdge | TrueEdge | FalseEdge
		public Alternatives getAlternatives() { return cAlternatives; }

		//UnconditionedEdge
		public RuleCall getUnconditionedEdgeParserRuleCall_0() { return cUnconditionedEdgeParserRuleCall_0; }

		//TrueEdge
		public RuleCall getTrueEdgeParserRuleCall_1() { return cTrueEdgeParserRuleCall_1; }

		//FalseEdge
		public RuleCall getFalseEdgeParserRuleCall_2() { return cFalseEdgeParserRuleCall_2; }
	}

	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cControlNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExcecutableNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDeclaredBehaviorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node behavior::Node:
		//	ControlNode | ExcecutableNode | DeclaredBehavior
		@Override public ParserRule getRule() { return rule; }

		//ControlNode | ExcecutableNode | DeclaredBehavior
		public Alternatives getAlternatives() { return cAlternatives; }

		//ControlNode
		public RuleCall getControlNodeParserRuleCall_0() { return cControlNodeParserRuleCall_0; }

		//ExcecutableNode
		public RuleCall getExcecutableNodeParserRuleCall_1() { return cExcecutableNodeParserRuleCall_1; }

		//DeclaredBehavior
		public RuleCall getDeclaredBehaviorParserRuleCall_2() { return cDeclaredBehaviorParserRuleCall_2; }
	}

	public class ControlNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ControlNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecisionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJoinParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStartParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEndParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForkParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMergeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//ControlNode behavior::ControlNode:
		//	Decision | Join | Start | End | Fork | Merge
		@Override public ParserRule getRule() { return rule; }

		//Decision | Join | Start | End | Fork | Merge
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decision
		public RuleCall getDecisionParserRuleCall_0() { return cDecisionParserRuleCall_0; }

		//Join
		public RuleCall getJoinParserRuleCall_1() { return cJoinParserRuleCall_1; }

		//Start
		public RuleCall getStartParserRuleCall_2() { return cStartParserRuleCall_2; }

		//End
		public RuleCall getEndParserRuleCall_3() { return cEndParserRuleCall_3; }

		//Fork
		public RuleCall getForkParserRuleCall_4() { return cForkParserRuleCall_4; }

		//Merge
		public RuleCall getMergeParserRuleCall_5() { return cMergeParserRuleCall_5; }
	}

	public class ExcecutableNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ExcecutableNode");
		private final RuleCall cPrimitiveActivitiesParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ExcecutableNode behavior::ExecutableNode:
		//	PrimitiveActivities
		@Override public ParserRule getRule() { return rule; }

		//PrimitiveActivities
		public RuleCall getPrimitiveActivitiesParserRuleCall() { return cPrimitiveActivitiesParserRuleCall; }
	}

	public class PrimitiveActivitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.PrimitiveActivities");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRemoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReproduceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDieParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSetParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PrimitiveActivities behavior::PrimitiveActivities:
		//	Add | Remove | Move | Reproduce | Die | Set
		@Override public ParserRule getRule() { return rule; }

		//Add | Remove | Move | Reproduce | Die | Set
		public Alternatives getAlternatives() { return cAlternatives; }

		//Add
		public RuleCall getAddParserRuleCall_0() { return cAddParserRuleCall_0; }

		//Remove
		public RuleCall getRemoveParserRuleCall_1() { return cRemoveParserRuleCall_1; }

		//Move
		public RuleCall getMoveParserRuleCall_2() { return cMoveParserRuleCall_2; }

		//Reproduce
		public RuleCall getReproduceParserRuleCall_3() { return cReproduceParserRuleCall_3; }

		//Die
		public RuleCall getDieParserRuleCall_4() { return cDieParserRuleCall_4; }

		//Set
		public RuleCall getSetParserRuleCall_5() { return cSetParserRuleCall_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////EString returns behavior::ExcecutableNode:
		////	ecore::EString: STRING | ID;
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class EquationBehaviourElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EquationBehaviour");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEquationBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEquationBehaviourKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterClassParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterClassParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLocalvariableAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_0_0 = (RuleCall)cLocalvariableAssignment_5_0.eContents().get(0);
		private final Assignment cLocalvariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_1_0 = (RuleCall)cLocalvariableAssignment_5_1.eContents().get(0);
		private final Keyword cEquationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cEquationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cEquationEquationParserRuleCall_8_0 = (RuleCall)cEquationAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//EquationBehaviour behavior::EquationBehavior:
		//	{behavior::EquationBehavior}
		//	'EquationBehaviour' name=ID '{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')
		//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		//	'Equation' '{' equation=Equation '}'
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::EquationBehavior} 'EquationBehaviour' name=ID '{' ('Parameters' '(' parameters+=ParameterClass (","
		//parameters+=ParameterClass)* ')') (localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)? 'Equation'
		//'{' equation=Equation '}' '}'
		public Group getGroup() { return cGroup; }

		//{behavior::EquationBehavior}
		public Action getEquationBehaviorAction_0() { return cEquationBehaviorAction_0; }

		//'EquationBehaviour'
		public Keyword getEquationBehaviourKeyword_1() { return cEquationBehaviourKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')
		public Group getGroup_4() { return cGroup_4; }

		//'Parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_2_0() { return cParametersParameterClassParserRuleCall_4_2_0; }

		//("," parameters+=ParameterClass)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_3_1_0() { return cParametersParameterClassParserRuleCall_4_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		public Group getGroup_5() { return cGroup_5; }

		//localvariable+=LocalVariableClass
		public Assignment getLocalvariableAssignment_5_0() { return cLocalvariableAssignment_5_0; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_0_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_0_0; }

		//localvariable+=LocalVariableClass*
		public Assignment getLocalvariableAssignment_5_1() { return cLocalvariableAssignment_5_1; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_1_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_1_0; }

		//'Equation'
		public Keyword getEquationKeyword_6() { return cEquationKeyword_6; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//equation=Equation
		public Assignment getEquationAssignment_8() { return cEquationAssignment_8; }

		//Equation
		public RuleCall getEquationEquationParserRuleCall_8_0() { return cEquationEquationParserRuleCall_8_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class ActivityBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ActivityBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterClassParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterClassParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLocalvariableAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_0_0 = (RuleCall)cLocalvariableAssignment_5_0.eContents().get(0);
		private final Assignment cLocalvariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_1_0 = (RuleCall)cLocalvariableAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cPrimitiveaactivitiesAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_0_0 = (RuleCall)cPrimitiveaactivitiesAssignment_6_0.eContents().get(0);
		private final Assignment cPrimitiveaactivitiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_1_0 = (RuleCall)cPrimitiveaactivitiesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ActivityBehavior behavior::ActivityBehavior:
		//	{behavior::ActivityBehavior}
		//	'ActivityBehavior' name=ID
		//	'{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
		//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)? (primitiveaactivities+=PrimitiveActivities
		//	primitiveaactivities+=PrimitiveActivities*)?
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::ActivityBehavior} 'ActivityBehavior' name=ID '{' ('Parameters' '(' parameters+=ParameterClass (","
		//parameters+=ParameterClass)* ')')? (localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		//(primitiveaactivities+=PrimitiveActivities primitiveaactivities+=PrimitiveActivities*)? '}'
		public Group getGroup() { return cGroup; }

		//{behavior::ActivityBehavior}
		public Action getActivityBehaviorAction_0() { return cActivityBehaviorAction_0; }

		//'ActivityBehavior'
		public Keyword getActivityBehaviorKeyword_1() { return cActivityBehaviorKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
		public Group getGroup_4() { return cGroup_4; }

		//'Parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_2_0() { return cParametersParameterClassParserRuleCall_4_2_0; }

		//("," parameters+=ParameterClass)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_3_1_0() { return cParametersParameterClassParserRuleCall_4_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		public Group getGroup_5() { return cGroup_5; }

		//localvariable+=LocalVariableClass
		public Assignment getLocalvariableAssignment_5_0() { return cLocalvariableAssignment_5_0; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_0_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_0_0; }

		//localvariable+=LocalVariableClass*
		public Assignment getLocalvariableAssignment_5_1() { return cLocalvariableAssignment_5_1; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_1_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_1_0; }

		//(primitiveaactivities+=PrimitiveActivities primitiveaactivities+=PrimitiveActivities*)?
		public Group getGroup_6() { return cGroup_6; }

		//primitiveaactivities+=PrimitiveActivities
		public Assignment getPrimitiveaactivitiesAssignment_6_0() { return cPrimitiveaactivitiesAssignment_6_0; }

		//PrimitiveActivities
		public RuleCall getPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_0_0() { return cPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_0_0; }

		//primitiveaactivities+=PrimitiveActivities*
		public Assignment getPrimitiveaactivitiesAssignment_6_1() { return cPrimitiveaactivitiesAssignment_6_1; }

		//PrimitiveActivities
		public RuleCall getPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_1_0() { return cPrimitiveaactivitiesPrimitiveActivitiesParserRuleCall_6_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ActivityDiagramBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ActivityDiagramBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityDiagramBehaviorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityDiagramBehaviorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParametersAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParametersParameterClassParserRuleCall_4_2_0 = (RuleCall)cParametersAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParametersAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParametersParameterClassParserRuleCall_4_3_1_0 = (RuleCall)cParametersAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLocalvariableAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_0_0 = (RuleCall)cLocalvariableAssignment_5_0.eContents().get(0);
		private final Assignment cLocalvariableAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cLocalvariableLocalVariableClassParserRuleCall_5_1_0 = (RuleCall)cLocalvariableAssignment_5_1.eContents().get(0);
		private final Assignment cStartAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStartStartParserRuleCall_6_0 = (RuleCall)cStartAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ActivityDiagramBehavior behavior::ActivityDiagramBehavior:
		//	{behavior::ActivityDiagramBehavior}
		//	'ActivityDiagramBehavior' name=ID
		//	'{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
		//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		//	start=Start '}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::ActivityDiagramBehavior} 'ActivityDiagramBehavior' name=ID '{' ('Parameters' '(' parameters+=ParameterClass
		//("," parameters+=ParameterClass)* ')')? (localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		//start=Start '}'
		public Group getGroup() { return cGroup; }

		//{behavior::ActivityDiagramBehavior}
		public Action getActivityDiagramBehaviorAction_0() { return cActivityDiagramBehaviorAction_0; }

		//'ActivityDiagramBehavior'
		public Keyword getActivityDiagramBehaviorKeyword_1() { return cActivityDiagramBehaviorKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
		public Group getGroup_4() { return cGroup_4; }

		//'Parameters'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_2() { return cParametersAssignment_4_2; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_2_0() { return cParametersParameterClassParserRuleCall_4_2_0; }

		//("," parameters+=ParameterClass)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_4_3_1() { return cParametersAssignment_4_3_1; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_4_3_1_0() { return cParametersParameterClassParserRuleCall_4_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
		public Group getGroup_5() { return cGroup_5; }

		//localvariable+=LocalVariableClass
		public Assignment getLocalvariableAssignment_5_0() { return cLocalvariableAssignment_5_0; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_0_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_0_0; }

		//localvariable+=LocalVariableClass*
		public Assignment getLocalvariableAssignment_5_1() { return cLocalvariableAssignment_5_1; }

		//LocalVariableClass
		public RuleCall getLocalvariableLocalVariableClassParserRuleCall_5_1_0() { return cLocalvariableLocalVariableClassParserRuleCall_5_1_0; }

		//start=Start
		public Assignment getStartAssignment_6() { return cStartAssignment_6; }

		//Start
		public RuleCall getStartStartParserRuleCall_6_0() { return cStartStartParserRuleCall_6_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftDeclaredAttributesParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightArithmeticFCExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Equation behavior::Equation:
		//	left=DeclaredAttributes '='
		//	right=ArithmeticFCExpression
		@Override public ParserRule getRule() { return rule; }

		//left=DeclaredAttributes '=' right=ArithmeticFCExpression
		public Group getGroup() { return cGroup; }

		//left=DeclaredAttributes
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//DeclaredAttributes
		public RuleCall getLeftDeclaredAttributesParserRuleCall_0_0() { return cLeftDeclaredAttributesParserRuleCall_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//right=ArithmeticFCExpression
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//ArithmeticFCExpression
		public RuleCall getRightArithmeticFCExpressionParserRuleCall_2_0() { return cRightArithmeticFCExpressionParserRuleCall_2_0; }
	}

	public class NumericNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.NumericNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmeticFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCountFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////EInt returns ecore::EInt:
		////	INT;
		///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!NAMED FUNCTIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\\\
		//NumericNamedFunction behavior::NamedFunction:
		//	ArithmeticFunction | MathFunction | CountFunction
		@Override public ParserRule getRule() { return rule; }

		//ArithmeticFunction | MathFunction | CountFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArithmeticFunction
		public RuleCall getArithmeticFunctionParserRuleCall_0() { return cArithmeticFunctionParserRuleCall_0; }

		//MathFunction
		public RuleCall getMathFunctionParserRuleCall_1() { return cMathFunctionParserRuleCall_1; }

		//CountFunction
		public RuleCall getCountFunctionParserRuleCall_2() { return cCountFunctionParserRuleCall_2; }
	}

	public class ArithmeticFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ArithmeticFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmeticFunctionMultiplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArithmeticFunctionPlusParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ArithmeticFunction behavior::NamedFunction:
		//	ArithmeticFunctionMultiplication | ArithmeticFunctionPlus
		@Override public ParserRule getRule() { return rule; }

		//ArithmeticFunctionMultiplication | ArithmeticFunctionPlus
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArithmeticFunctionMultiplication
		public RuleCall getArithmeticFunctionMultiplicationParserRuleCall_0() { return cArithmeticFunctionMultiplicationParserRuleCall_0; }

		//ArithmeticFunctionPlus
		public RuleCall getArithmeticFunctionPlusParserRuleCall_1() { return cArithmeticFunctionPlusParserRuleCall_1; }
	}

	public class ArithmeticFunctionMultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ArithmeticFunctionMultiplication");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNamePlusSignKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameHyphenMinusKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//ArithmeticFunctionMultiplication behavior::NamedFunction:
		//	name=('+' | '-')
		@Override public ParserRule getRule() { return rule; }

		//name=('+' | '-')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('+' | '-')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'+'
		public Keyword getNamePlusSignKeyword_0_0() { return cNamePlusSignKeyword_0_0; }

		//'-'
		public Keyword getNameHyphenMinusKeyword_0_1() { return cNameHyphenMinusKeyword_0_1; }
	}

	public class ArithmeticFunctionPlusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ArithmeticFunctionPlus");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameSolidusKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameAsteriskKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//ArithmeticFunctionPlus behavior::NamedFunction:
		//	name=('/' | '*')
		@Override public ParserRule getRule() { return rule; }

		//name=('/' | '*')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('/' | '*')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'/'
		public Keyword getNameSolidusKeyword_0_0() { return cNameSolidusKeyword_0_0; }

		//'*'
		public Keyword getNameAsteriskKeyword_0_1() { return cNameAsteriskKeyword_0_1; }
	}

	public class MathFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.MathFunction");
		private final RuleCall cUnaryMathBinaryFunctionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MathFunction behavior::NamedFunction:
		//	UnaryMathBinaryFunction
		@Override public ParserRule getRule() { return rule; }

		//UnaryMathBinaryFunction
		public RuleCall getUnaryMathBinaryFunctionParserRuleCall() { return cUnaryMathBinaryFunctionParserRuleCall; }
	}

	public class UnaryMathBinaryFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.UnaryMathBinaryFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameSqrtKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameRandomKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameFloorKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameExpKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//UnaryMathBinaryFunction behavior::NamedFunction:
		//	name=('sqrt' | 'random' | 'floor' | 'exp')
		@Override public ParserRule getRule() { return rule; }

		//name=('sqrt' | 'random' | 'floor' | 'exp')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('sqrt' | 'random' | 'floor' | 'exp')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'sqrt'
		public Keyword getNameSqrtKeyword_0_0() { return cNameSqrtKeyword_0_0; }

		//'random'
		public Keyword getNameRandomKeyword_0_1() { return cNameRandomKeyword_0_1; }

		//'floor'
		public Keyword getNameFloorKeyword_0_2() { return cNameFloorKeyword_0_2; }

		//'exp'
		public Keyword getNameExpKeyword_0_3() { return cNameExpKeyword_0_3; }
	}

	public class CountFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.CountFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameCountKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//CountFunction behavior::NamedFunction:
		//	name='count'
		@Override public ParserRule getRule() { return rule; }

		//name='count'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'count'
		public Keyword getNameCountKeyword_0() { return cNameCountKeyword_0; }
	}

	public class LocationNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleLocationNamedFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationSetNamedFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LocationNamedFunction behavior::NamedFunction:
		//	SimpleLocationNamedFunction | LocationSetNamedFunction
		@Override public ParserRule getRule() { return rule; }

		//SimpleLocationNamedFunction | LocationSetNamedFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleLocationNamedFunction
		public RuleCall getSimpleLocationNamedFunctionParserRuleCall_0() { return cSimpleLocationNamedFunctionParserRuleCall_0; }

		//LocationSetNamedFunction
		public RuleCall getLocationSetNamedFunctionParserRuleCall_1() { return cLocationSetNamedFunctionParserRuleCall_1; }
	}

	public class SimpleLocationNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SimpleLocationNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxOneOfLocationFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectConditionalLocationFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOneOfLocationFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocationPrimitiveFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleLocationNamedFunction behavior::NamedFunction:
		//	MaxOneOfLocationFunction | SelectConditionalLocationFunction | OneOfLocationFunction | LocationPrimitiveFunction
		@Override public ParserRule getRule() { return rule; }

		//MaxOneOfLocationFunction | SelectConditionalLocationFunction | OneOfLocationFunction | LocationPrimitiveFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//MaxOneOfLocationFunction
		public RuleCall getMaxOneOfLocationFunctionParserRuleCall_0() { return cMaxOneOfLocationFunctionParserRuleCall_0; }

		//SelectConditionalLocationFunction
		public RuleCall getSelectConditionalLocationFunctionParserRuleCall_1() { return cSelectConditionalLocationFunctionParserRuleCall_1; }

		//OneOfLocationFunction
		public RuleCall getOneOfLocationFunctionParserRuleCall_2() { return cOneOfLocationFunctionParserRuleCall_2; }

		//LocationPrimitiveFunction
		public RuleCall getLocationPrimitiveFunctionParserRuleCall_3() { return cLocationPrimitiveFunctionParserRuleCall_3; }
	}

	public class MaxOneOfLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.MaxOneOfLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameMaxOneOfKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//MaxOneOfLocationFunction behavior::NamedFunction:
		//	name='max-one-of'
		@Override public ParserRule getRule() { return rule; }

		//name='max-one-of'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'max-one-of'
		public Keyword getNameMaxOneOfKeyword_0() { return cNameMaxOneOfKeyword_0; }
	}

	public class SelectConditionalLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SelectConditionalLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameSelectLocationKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SelectConditionalLocationFunction behavior::NamedFunction:
		//	name='select location'
		@Override public ParserRule getRule() { return rule; }

		//name='select location'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'select location'
		public Keyword getNameSelectLocationKeyword_0() { return cNameSelectLocationKeyword_0; }
	}

	public class OneOfLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.OneOfLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOneOfKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//OneOfLocationFunction behavior::NamedFunction:
		//	name='one-of'
		@Override public ParserRule getRule() { return rule; }

		//name='one-of'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'one-of'
		public Keyword getNameOneOfKeyword_0() { return cNameOneOfKeyword_0; }
	}

	public class LocationPrimitiveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationPrimitiveFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameHereKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameTopKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameLeftKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameRightKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameGridKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameBottomKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameNeighborhoodKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		
		//LocationPrimitiveFunction behavior::NamedFunction:
		//	name=('here' | 'top' | 'left' | 'right' | 'grid' | 'bottom' | 'neighborhood')
		@Override public ParserRule getRule() { return rule; }

		//name=('here' | 'top' | 'left' | 'right' | 'grid' | 'bottom' | 'neighborhood')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('here' | 'top' | 'left' | 'right' | 'grid' | 'bottom' | 'neighborhood')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'here'
		public Keyword getNameHereKeyword_0_0() { return cNameHereKeyword_0_0; }

		//'top'
		public Keyword getNameTopKeyword_0_1() { return cNameTopKeyword_0_1; }

		//'left'
		public Keyword getNameLeftKeyword_0_2() { return cNameLeftKeyword_0_2; }

		//'right'
		public Keyword getNameRightKeyword_0_3() { return cNameRightKeyword_0_3; }

		//'grid'
		public Keyword getNameGridKeyword_0_4() { return cNameGridKeyword_0_4; }

		//'bottom'
		public Keyword getNameBottomKeyword_0_5() { return cNameBottomKeyword_0_5; }

		//'neighborhood'
		public Keyword getNameNeighborhoodKeyword_0_6() { return cNameNeighborhoodKeyword_0_6; }
	}

	public class LocationSetNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationSetNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNeighborhoodLocationFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSpaceLocationFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnionLocationFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//////////////////////////////////////////////////////////////
		//LocationSetNamedFunction behavior::NamedFunction:
		//	NeighborhoodLocationFunction | SpaceLocationFunction | UnionLocationFunction
		@Override public ParserRule getRule() { return rule; }

		//NeighborhoodLocationFunction | SpaceLocationFunction | UnionLocationFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//NeighborhoodLocationFunction
		public RuleCall getNeighborhoodLocationFunctionParserRuleCall_0() { return cNeighborhoodLocationFunctionParserRuleCall_0; }

		//SpaceLocationFunction
		public RuleCall getSpaceLocationFunctionParserRuleCall_1() { return cSpaceLocationFunctionParserRuleCall_1; }

		//UnionLocationFunction
		public RuleCall getUnionLocationFunctionParserRuleCall_2() { return cUnionLocationFunctionParserRuleCall_2; }
	}

	public class NeighborhoodLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.NeighborhoodLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameNeighborhoodKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//NeighborhoodLocationFunction behavior::NamedFunction:
		//	name='neighborhood'
		@Override public ParserRule getRule() { return rule; }

		//name='neighborhood'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'neighborhood'
		public Keyword getNameNeighborhoodKeyword_0() { return cNameNeighborhoodKeyword_0; }
	}

	public class SpaceLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SpaceLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameGridKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SpaceLocationFunction behavior::NamedFunction:
		//	name='grid'
		@Override public ParserRule getRule() { return rule; }

		//name='grid'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'grid'
		public Keyword getNameGridKeyword_0() { return cNameGridKeyword_0; }
	}

	public class UnionLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.UnionLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameUnionLocationKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//UnionLocationFunction behavior::NamedFunction:
		//	name='union-location'
		@Override public ParserRule getRule() { return rule; }

		//name='union-location'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'union-location'
		public Keyword getNameUnionLocationKeyword_0() { return cNameUnionLocationKeyword_0; }
	}

	public class BooleanNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanGetFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanPrimitiveFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanSetFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanNumericComparisonFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanIsOccuppiedLocationFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanLogicFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////////////////////////////////////////////////////////////////
		//BooleanNamedFunction behavior::NamedFunction:
		//	BooleanGetFunction | BooleanPrimitiveFunction | BooleanSetFunction | BooleanNumericComparisonFunction |
		//	BooleanIsOccuppiedLocationFunction | BooleanLogicFunction
		@Override public ParserRule getRule() { return rule; }

		//BooleanGetFunction | BooleanPrimitiveFunction | BooleanSetFunction | BooleanNumericComparisonFunction |
		//BooleanIsOccuppiedLocationFunction | BooleanLogicFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanGetFunction
		public RuleCall getBooleanGetFunctionParserRuleCall_0() { return cBooleanGetFunctionParserRuleCall_0; }

		//BooleanPrimitiveFunction
		public RuleCall getBooleanPrimitiveFunctionParserRuleCall_1() { return cBooleanPrimitiveFunctionParserRuleCall_1; }

		//BooleanSetFunction
		public RuleCall getBooleanSetFunctionParserRuleCall_2() { return cBooleanSetFunctionParserRuleCall_2; }

		//BooleanNumericComparisonFunction
		public RuleCall getBooleanNumericComparisonFunctionParserRuleCall_3() { return cBooleanNumericComparisonFunctionParserRuleCall_3; }

		//BooleanIsOccuppiedLocationFunction
		public RuleCall getBooleanIsOccuppiedLocationFunctionParserRuleCall_4() { return cBooleanIsOccuppiedLocationFunctionParserRuleCall_4; }

		//BooleanLogicFunction
		public RuleCall getBooleanLogicFunctionParserRuleCall_5() { return cBooleanLogicFunctionParserRuleCall_5; }
	}

	public class BooleanPrimitiveFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanPrimitiveFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameTrueKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameFalseKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		
		//BooleanPrimitiveFunction behavior::NamedFunction:
		//	name=('true' | 'false')
		@Override public ParserRule getRule() { return rule; }

		//name=('true' | 'false')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('true' | 'false')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'true'
		public Keyword getNameTrueKeyword_0_0() { return cNameTrueKeyword_0_0; }

		//'false'
		public Keyword getNameFalseKeyword_0_1() { return cNameFalseKeyword_0_1; }
	}

	public class BooleanSetFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanSetFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameSetKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanSetFunction behavior::NamedFunction:
		//	name='set'
		@Override public ParserRule getRule() { return rule; }

		//name='set'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'set'
		public Keyword getNameSetKeyword_0() { return cNameSetKeyword_0; }
	}

	public class BooleanGetFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanGetFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameGetKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanGetFunction behavior::NamedFunction:
		//	name='get'
		@Override public ParserRule getRule() { return rule; }

		//name='get'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'get'
		public Keyword getNameGetKeyword_0() { return cNameGetKeyword_0; }
	}

	public class BooleanNumericComparisonFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanNumericComparisonFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameGreaterThanSignEqualsSignKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameGreaterThanSignKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameExclamationMarkEqualsSignKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameLessThanSignKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameLessThanSignEqualsSignKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameEqualsSignKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		
		//BooleanNumericComparisonFunction behavior::NamedFunction:
		//	name=('>=' | '>' | '!=' | '<' | '<=' | '=')
		@Override public ParserRule getRule() { return rule; }

		//name=('>=' | '>' | '!=' | '<' | '<=' | '=')
		public Assignment getNameAssignment() { return cNameAssignment; }

		//('>=' | '>' | '!=' | '<' | '<=' | '=')
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//'>='
		public Keyword getNameGreaterThanSignEqualsSignKeyword_0_0() { return cNameGreaterThanSignEqualsSignKeyword_0_0; }

		//'>'
		public Keyword getNameGreaterThanSignKeyword_0_1() { return cNameGreaterThanSignKeyword_0_1; }

		//'!='
		public Keyword getNameExclamationMarkEqualsSignKeyword_0_2() { return cNameExclamationMarkEqualsSignKeyword_0_2; }

		//'<'
		public Keyword getNameLessThanSignKeyword_0_3() { return cNameLessThanSignKeyword_0_3; }

		//'<='
		public Keyword getNameLessThanSignEqualsSignKeyword_0_4() { return cNameLessThanSignEqualsSignKeyword_0_4; }

		//'='
		public Keyword getNameEqualsSignKeyword_0_5() { return cNameEqualsSignKeyword_0_5; }
	}

	public class BooleanIsOccuppiedLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanIsOccuppiedLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOccupiedKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanIsOccuppiedLocationFunction behavior::NamedFunction:
		//	name='occupied'
		@Override public ParserRule getRule() { return rule; }

		//name='occupied'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'occupied'
		public Keyword getNameOccupiedKeyword_0() { return cNameOccupiedKeyword_0; }
	}

	public class BooleanLogicFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanLogicFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanUnaryLogicFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanANDBinaryLogicFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanORBinaryLogicFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BooleanLogicFunction behavior::NamedFunction:
		//	BooleanUnaryLogicFunction | BooleanANDBinaryLogicFunction | BooleanORBinaryLogicFunction
		@Override public ParserRule getRule() { return rule; }

		//BooleanUnaryLogicFunction | BooleanANDBinaryLogicFunction | BooleanORBinaryLogicFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanUnaryLogicFunction
		public RuleCall getBooleanUnaryLogicFunctionParserRuleCall_0() { return cBooleanUnaryLogicFunctionParserRuleCall_0; }

		//BooleanANDBinaryLogicFunction
		public RuleCall getBooleanANDBinaryLogicFunctionParserRuleCall_1() { return cBooleanANDBinaryLogicFunctionParserRuleCall_1; }

		//BooleanORBinaryLogicFunction
		public RuleCall getBooleanORBinaryLogicFunctionParserRuleCall_2() { return cBooleanORBinaryLogicFunctionParserRuleCall_2; }
	}

	public class BooleanUnaryLogicFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanUnaryLogicFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameNOTKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanUnaryLogicFunction behavior::NamedFunction:
		//	name='NOT'
		@Override public ParserRule getRule() { return rule; }

		//name='NOT'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'NOT'
		public Keyword getNameNOTKeyword_0() { return cNameNOTKeyword_0; }
	}

	public class BooleanANDBinaryLogicFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanANDBinaryLogicFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameANDKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanANDBinaryLogicFunction behavior::NamedFunction:
		//	name='AND'
		@Override public ParserRule getRule() { return rule; }

		//name='AND'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'AND'
		public Keyword getNameANDKeyword_0() { return cNameANDKeyword_0; }
	}

	public class BooleanORBinaryLogicFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanORBinaryLogicFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameORKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//BooleanORBinaryLogicFunction behavior::NamedFunction:
		//	name='OR'
		@Override public ParserRule getRule() { return rule; }

		//name='OR'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'OR'
		public Keyword getNameORKeyword_0() { return cNameORKeyword_0; }
	}

	public class EntityNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityOneOfFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityQuantifierFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityNamedFunction behavior::NamedFunction:
		//	EntityOneOfFunction | EntityQuantifierFunction
		@Override public ParserRule getRule() { return rule; }

		//EntityOneOfFunction | EntityQuantifierFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityOneOfFunction
		public RuleCall getEntityOneOfFunctionParserRuleCall_0() { return cEntityOneOfFunctionParserRuleCall_0; }

		//EntityQuantifierFunction
		public RuleCall getEntityQuantifierFunctionParserRuleCall_1() { return cEntityQuantifierFunctionParserRuleCall_1; }
	}

	public class EntityQuantifierFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityQuantifierFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntityAllQuantifierFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntityAnyQuantifierFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EntityQuantifierFunction behavior::NamedFunction:
		//	EntityAllQuantifierFunction | EntityAnyQuantifierFunction
		@Override public ParserRule getRule() { return rule; }

		//EntityAllQuantifierFunction | EntityAnyQuantifierFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntityAllQuantifierFunction
		public RuleCall getEntityAllQuantifierFunctionParserRuleCall_0() { return cEntityAllQuantifierFunctionParserRuleCall_0; }

		//EntityAnyQuantifierFunction
		public RuleCall getEntityAnyQuantifierFunctionParserRuleCall_1() { return cEntityAnyQuantifierFunctionParserRuleCall_1; }
	}

	public class EntitySetConditionalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetConditionalFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameHasKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntitySetConditionalFunction behavior::NamedFunction:
		//	name='has'
		@Override public ParserRule getRule() { return rule; }

		//name='has'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'has'
		public Keyword getNameHasKeyword_0() { return cNameHasKeyword_0; }
	}

	public class EntityAnyQuantifierFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityAnyQuantifierFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAnyKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntityAnyQuantifierFunction behavior::NamedFunction:
		//	name='any'
		@Override public ParserRule getRule() { return rule; }

		//name='any'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'any'
		public Keyword getNameAnyKeyword_0() { return cNameAnyKeyword_0; }
	}

	public class EntityAllQuantifierFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityAllQuantifierFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameAllKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntityAllQuantifierFunction behavior::NamedFunction:
		//	name='all'
		@Override public ParserRule getRule() { return rule; }

		//name='all'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'all'
		public Keyword getNameAllKeyword_0() { return cNameAllKeyword_0; }
	}

	public class EntitySetCreateFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetCreateFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameCreateKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntitySetCreateFunction behavior::NamedFunction:
		//	name='Create '
		@Override public ParserRule getRule() { return rule; }

		//name='Create '
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'Create '
		public Keyword getNameCreateKeyword_0() { return cNameCreateKeyword_0; }
	}

	public class EntitySetOnLocationFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetOnLocationFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOnKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntitySetOnLocationFunction behavior::NamedFunction:
		//	name='on'
		@Override public ParserRule getRule() { return rule; }

		//name='on'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'on'
		public Keyword getNameOnKeyword_0() { return cNameOnKeyword_0; }
	}

	public class SpaceInitFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SpaceInitFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameCreateGridKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SpaceInitFunction behavior::NamedFunction:
		//	name='Create grid'
		@Override public ParserRule getRule() { return rule; }

		//name='Create grid'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'Create grid'
		public Keyword getNameCreateGridKeyword_0() { return cNameCreateGridKeyword_0; }
	}

	public class EntityOneOfFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityOneOfFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOneOfKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//EntityOneOfFunction behavior::NamedFunction:
		//	name='one-of'
		@Override public ParserRule getRule() { return rule; }

		//name='one-of'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'one-of'
		public Keyword getNameOneOfKeyword_0() { return cNameOneOfKeyword_0; }
	}

	public class GetNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetNamedFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGetVariableFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetEntityNamedFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//GetNamedFunction behavior::NamedFunction:
		//	GetVariableFunction | GetEntityNamedFunction
		@Override public ParserRule getRule() { return rule; }

		//GetVariableFunction | GetEntityNamedFunction
		public Alternatives getAlternatives() { return cAlternatives; }

		//GetVariableFunction
		public RuleCall getGetVariableFunctionParserRuleCall_0() { return cGetVariableFunctionParserRuleCall_0; }

		//GetEntityNamedFunction
		public RuleCall getGetEntityNamedFunctionParserRuleCall_1() { return cGetEntityNamedFunctionParserRuleCall_1; }
	}

	public class GetVariableFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetVariableFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameOfKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//GetVariableFunction behavior::NamedFunction:
		//	name='of'
		@Override public ParserRule getRule() { return rule; }

		//name='of'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'of'
		public Keyword getNameOfKeyword_0() { return cNameOfKeyword_0; }
	}

	public class GetEntityNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetEntityNamedFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameEntityKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//GetEntityNamedFunction behavior::NamedFunction:
		//	name='entity'
		@Override public ParserRule getRule() { return rule; }

		//name='entity'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'entity'
		public Keyword getNameEntityKeyword_0() { return cNameEntityKeyword_0; }
	}

	public class GetEntityFromLocationNamedFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetEntityFromLocationNamedFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameFromKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//GetEntityFromLocationNamedFunction behavior::NamedFunction:
		//	name='from'
		@Override public ParserRule getRule() { return rule; }

		//name='from'
		public Assignment getNameAssignment() { return cNameAssignment; }

		//'from'
		public Keyword getNameFromKeyword_0() { return cNameFromKeyword_0; }
	}

	public class FunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.FunctionCallExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericNamedFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLocationNamedFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanNamedFCExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEntityNamedFCExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGetNamedFCExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!EXPRESSIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\
		//FunctionCallExpression behavior::FunctionCallExpression:
		//	NumericNamedFCExpression | LocationNamedFCExpression | BooleanNamedFCExpression | EntityNamedFCExpression |
		//	GetNamedFCExpression
		@Override public ParserRule getRule() { return rule; }

		//NumericNamedFCExpression | LocationNamedFCExpression | BooleanNamedFCExpression | EntityNamedFCExpression |
		//GetNamedFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumericNamedFCExpression
		public RuleCall getNumericNamedFCExpressionParserRuleCall_0() { return cNumericNamedFCExpressionParserRuleCall_0; }

		//LocationNamedFCExpression
		public RuleCall getLocationNamedFCExpressionParserRuleCall_1() { return cLocationNamedFCExpressionParserRuleCall_1; }

		//BooleanNamedFCExpression
		public RuleCall getBooleanNamedFCExpressionParserRuleCall_2() { return cBooleanNamedFCExpressionParserRuleCall_2; }

		//EntityNamedFCExpression
		public RuleCall getEntityNamedFCExpressionParserRuleCall_3() { return cEntityNamedFCExpressionParserRuleCall_3; }

		//GetNamedFCExpression
		public RuleCall getGetNamedFCExpressionParserRuleCall_4() { return cGetNamedFCExpressionParserRuleCall_4; }
	}

	public class AnonymousFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.AnonymousFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParametersParameterClassParserRuleCall_1_1_0_0 = (RuleCall)cParametersAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParametersParameterClassParserRuleCall_1_1_1_1_0 = (RuleCall)cParametersAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionFunctionCallExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AnonymousFunction behavior::AnonymousFunction:
		//	'function' ('(' (parameters+=ParameterClass (',' parameters+=ParameterClass)*)? ')')
		//	'{'
		//	expression=FunctionCallExpression
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//'function' ('(' (parameters+=ParameterClass (',' parameters+=ParameterClass)*)? ')') '{'
		//expression=FunctionCallExpression '}'
		public Group getGroup() { return cGroup; }

		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }

		//('(' (parameters+=ParameterClass (',' parameters+=ParameterClass)*)? ')')
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//(parameters+=ParameterClass (',' parameters+=ParameterClass)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_1_1_0_0() { return cParametersParameterClassParserRuleCall_1_1_0_0; }

		//(',' parameters+=ParameterClass)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//parameters+=ParameterClass
		public Assignment getParametersAssignment_1_1_1_1() { return cParametersAssignment_1_1_1_1; }

		//ParameterClass
		public RuleCall getParametersParameterClassParserRuleCall_1_1_1_1_0() { return cParametersParameterClassParserRuleCall_1_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//expression=FunctionCallExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//FunctionCallExpression
		public RuleCall getExpressionFunctionCallExpressionParserRuleCall_3_0() { return cExpressionFunctionCallExpressionParserRuleCall_3_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BooleanNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanNamedFCExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanPrimitiveFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanSetValueFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanGetValueFCExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanNumericComparisonFCExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanIsOccuppiedLocationFCExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanQuantifiedEntitySetFCEpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cBooleanUnaryLogicFCExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////////// BOOLEAN FUNCTION EXPRESSION DEFINITION\\\\\\\\\\\\\\\\
		//BooleanNamedFCExpression behavior::FunctionCallExpression:
		//	BooleanPrimitiveFCExpression | BooleanSetValueFCExpression | BooleanGetValueFCExpression |
		//	BooleanNumericComparisonFCExpression | BooleanIsOccuppiedLocationFCExpression | BooleanQuantifiedEntitySetFCEpression
		//	| BooleanUnaryLogicFCExpression
		@Override public ParserRule getRule() { return rule; }

		//BooleanPrimitiveFCExpression | BooleanSetValueFCExpression | BooleanGetValueFCExpression |
		//BooleanNumericComparisonFCExpression | BooleanIsOccuppiedLocationFCExpression | BooleanQuantifiedEntitySetFCEpression
		//| BooleanUnaryLogicFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanPrimitiveFCExpression
		public RuleCall getBooleanPrimitiveFCExpressionParserRuleCall_0() { return cBooleanPrimitiveFCExpressionParserRuleCall_0; }

		//BooleanSetValueFCExpression
		public RuleCall getBooleanSetValueFCExpressionParserRuleCall_1() { return cBooleanSetValueFCExpressionParserRuleCall_1; }

		//BooleanGetValueFCExpression
		public RuleCall getBooleanGetValueFCExpressionParserRuleCall_2() { return cBooleanGetValueFCExpressionParserRuleCall_2; }

		//BooleanNumericComparisonFCExpression
		public RuleCall getBooleanNumericComparisonFCExpressionParserRuleCall_3() { return cBooleanNumericComparisonFCExpressionParserRuleCall_3; }

		//BooleanIsOccuppiedLocationFCExpression
		public RuleCall getBooleanIsOccuppiedLocationFCExpressionParserRuleCall_4() { return cBooleanIsOccuppiedLocationFCExpressionParserRuleCall_4; }

		//BooleanQuantifiedEntitySetFCEpression
		public RuleCall getBooleanQuantifiedEntitySetFCEpressionParserRuleCall_5() { return cBooleanQuantifiedEntitySetFCEpressionParserRuleCall_5; }

		//BooleanUnaryLogicFCExpression
		public RuleCall getBooleanUnaryLogicFCExpressionParserRuleCall_6() { return cBooleanUnaryLogicFCExpressionParserRuleCall_6; }
	}

	public class BooleanQuantifiedEntitySetFCEpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanQuantifiedEntitySetFCEpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionEntityQuantifierFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cOnKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Keyword cHasKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cArgumentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentsBooleanNumericComparisonFCExpressionParserRuleCall_5_0 = (RuleCall)cArgumentsAssignment_5.eContents().get(0);
		
		//BooleanQuantifiedEntitySetFCEpression behavior::FunctionCallExpression:
		//	function=EntityQuantifierFunction
		//	arguments+=DeclaredEntities 'on'
		//	arguments+=LocationPrimitiveFCExpression
		//	'has' arguments+=BooleanNumericComparisonFCExpression
		@Override public ParserRule getRule() { return rule; }

		//function=EntityQuantifierFunction arguments+=DeclaredEntities 'on' arguments+=LocationPrimitiveFCExpression 'has'
		//arguments+=BooleanNumericComparisonFCExpression
		public Group getGroup() { return cGroup; }

		//function=EntityQuantifierFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//EntityQuantifierFunction
		public RuleCall getFunctionEntityQuantifierFunctionParserRuleCall_0_0() { return cFunctionEntityQuantifierFunctionParserRuleCall_0_0; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_1_0() { return cArgumentsDeclaredEntitiesParserRuleCall_1_0; }

		//'on'
		public Keyword getOnKeyword_2() { return cOnKeyword_2; }

		//arguments+=LocationPrimitiveFCExpression
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//LocationPrimitiveFCExpression
		public RuleCall getArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0() { return cArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0; }

		//'has'
		public Keyword getHasKeyword_4() { return cHasKeyword_4; }

		//arguments+=BooleanNumericComparisonFCExpression
		public Assignment getArgumentsAssignment_5() { return cArgumentsAssignment_5; }

		//BooleanNumericComparisonFCExpression
		public RuleCall getArgumentsBooleanNumericComparisonFCExpressionParserRuleCall_5_0() { return cArgumentsBooleanNumericComparisonFCExpressionParserRuleCall_5_0; }
	}

	public class BooleanPrimitiveFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanPrimitiveFCExpression");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionBooleanPrimitiveFunctionParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//BooleanPrimitiveFCExpression behavior::FunctionCallExpression:
		//	function=BooleanPrimitiveFunction
		@Override public ParserRule getRule() { return rule; }

		//function=BooleanPrimitiveFunction
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }

		//BooleanPrimitiveFunction
		public RuleCall getFunctionBooleanPrimitiveFunctionParserRuleCall_0() { return cFunctionBooleanPrimitiveFunctionParserRuleCall_0; }
	}

	public class BooleanSetValueFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanSetValueFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionBooleanSetFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cAsTrueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanSetValueFCExpression behavior::FunctionCallExpression:
		//	function=BooleanSetFunction arguments+=DeclaredVariable 'as true'
		@Override public ParserRule getRule() { return rule; }

		//function=BooleanSetFunction arguments+=DeclaredVariable 'as true'
		public Group getGroup() { return cGroup; }

		//function=BooleanSetFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//BooleanSetFunction
		public RuleCall getFunctionBooleanSetFunctionParserRuleCall_0_0() { return cFunctionBooleanSetFunctionParserRuleCall_0_0; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_1_0() { return cArgumentsDeclaredVariableParserRuleCall_1_0; }

		//'as true'
		public Keyword getAsTrueKeyword_2() { return cAsTrueKeyword_2; }
	}

	public class BooleanGetValueFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanGetValueFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionBooleanGetFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cTrueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BooleanGetValueFCExpression behavior::FunctionCallExpression:
		//	function=BooleanGetFunction arguments+=DeclaredVariable 'true'
		@Override public ParserRule getRule() { return rule; }

		//function=BooleanGetFunction arguments+=DeclaredVariable 'true'
		public Group getGroup() { return cGroup; }

		//function=BooleanGetFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//BooleanGetFunction
		public RuleCall getFunctionBooleanGetFunctionParserRuleCall_0_0() { return cFunctionBooleanGetFunctionParserRuleCall_0_0; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_1_0() { return cArgumentsDeclaredVariableParserRuleCall_1_0; }

		//'true'
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }
	}

	public class BooleanNumericComparisonFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanNumericComparisonFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cArgumentsAlternatives_0_0 = (Alternatives)cArgumentsAssignment_0.eContents().get(0);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_0_0_0 = (RuleCall)cArgumentsAlternatives_0_0.eContents().get(0);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_0_0_1 = (RuleCall)cArgumentsAlternatives_0_0.eContents().get(1);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionBooleanNumericComparisonFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cArgumentsAlternatives_2_0 = (Alternatives)cArgumentsAssignment_2.eContents().get(0);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_2_0_0 = (RuleCall)cArgumentsAlternatives_2_0.eContents().get(0);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_2_0_1 = (RuleCall)cArgumentsAlternatives_2_0.eContents().get(1);
		
		//BooleanNumericComparisonFCExpression behavior::FunctionCallExpression:
		//	arguments+=(DeclaredVariable | ConstantExpression) function=BooleanNumericComparisonFunction
		//	arguments+=(DeclaredVariable | ConstantExpression)
		@Override public ParserRule getRule() { return rule; }

		//arguments+=(DeclaredVariable | ConstantExpression) function=BooleanNumericComparisonFunction
		//arguments+=(DeclaredVariable | ConstantExpression)
		public Group getGroup() { return cGroup; }

		//arguments+=(DeclaredVariable | ConstantExpression)
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//(DeclaredVariable | ConstantExpression)
		public Alternatives getArgumentsAlternatives_0_0() { return cArgumentsAlternatives_0_0; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_0_0_0() { return cArgumentsDeclaredVariableParserRuleCall_0_0_0; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_0_0_1() { return cArgumentsConstantExpressionParserRuleCall_0_0_1; }

		//function=BooleanNumericComparisonFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//BooleanNumericComparisonFunction
		public RuleCall getFunctionBooleanNumericComparisonFunctionParserRuleCall_1_0() { return cFunctionBooleanNumericComparisonFunctionParserRuleCall_1_0; }

		//arguments+=(DeclaredVariable | ConstantExpression)
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//(DeclaredVariable | ConstantExpression)
		public Alternatives getArgumentsAlternatives_2_0() { return cArgumentsAlternatives_2_0; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_2_0_0() { return cArgumentsDeclaredVariableParserRuleCall_2_0_0; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_2_0_1() { return cArgumentsConstantExpressionParserRuleCall_2_0_1; }
	}

	public class BooleanIsOccuppiedLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanIsOccuppiedLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsBooleanUnaryLogicFCExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Assignment cFunctionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionBooleanIsOccuppiedLocationFunctionParserRuleCall_4_0 = (RuleCall)cFunctionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cByKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cArgumentsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_2_0 = (RuleCall)cArgumentsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_3_1_0 = (RuleCall)cArgumentsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		
		//BooleanIsOccuppiedLocationFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} arguments+=LocationPrimitiveFCExpression 'is '
		//	arguments+=BooleanUnaryLogicFCExpression?
		//	function=BooleanIsOccuppiedLocationFunction ('by' '(' arguments+=EntitySetConditionalFCExpression (','
		//	arguments+=EntitySetConditionalFCExpression)* ')')?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} arguments+=LocationPrimitiveFCExpression 'is '
		//arguments+=BooleanUnaryLogicFCExpression? function=BooleanIsOccuppiedLocationFunction ('by' '('
		//arguments+=EntitySetConditionalFCExpression (',' arguments+=EntitySetConditionalFCExpression)* ')')?
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//arguments+=LocationPrimitiveFCExpression
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//LocationPrimitiveFCExpression
		public RuleCall getArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_0() { return cArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_0; }

		//'is '
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//arguments+=BooleanUnaryLogicFCExpression?
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//BooleanUnaryLogicFCExpression
		public RuleCall getArgumentsBooleanUnaryLogicFCExpressionParserRuleCall_3_0() { return cArgumentsBooleanUnaryLogicFCExpressionParserRuleCall_3_0; }

		//function=BooleanIsOccuppiedLocationFunction
		public Assignment getFunctionAssignment_4() { return cFunctionAssignment_4; }

		//BooleanIsOccuppiedLocationFunction
		public RuleCall getFunctionBooleanIsOccuppiedLocationFunctionParserRuleCall_4_0() { return cFunctionBooleanIsOccuppiedLocationFunctionParserRuleCall_4_0; }

		//('by' '(' arguments+=EntitySetConditionalFCExpression (',' arguments+=EntitySetConditionalFCExpression)* ')')?
		public Group getGroup_5() { return cGroup_5; }

		//'by'
		public Keyword getByKeyword_5_0() { return cByKeyword_5_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//arguments+=EntitySetConditionalFCExpression
		public Assignment getArgumentsAssignment_5_2() { return cArgumentsAssignment_5_2; }

		//EntitySetConditionalFCExpression
		public RuleCall getArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_2_0() { return cArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_2_0; }

		//(',' arguments+=EntitySetConditionalFCExpression)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//','
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//arguments+=EntitySetConditionalFCExpression
		public Assignment getArgumentsAssignment_5_3_1() { return cArgumentsAssignment_5_3_1; }

		//EntitySetConditionalFCExpression
		public RuleCall getArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_3_1_0() { return cArgumentsEntitySetConditionalFCExpressionParserRuleCall_5_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
	}

	public class BooleanLogicFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanLogicFCExpression");
		private final RuleCall cOrExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanLogicFCExpression behavior::FunctionCallExpression:
		//	OrExpr
		@Override public ParserRule getRule() { return rule; }

		//OrExpr
		public RuleCall getOrExprParserRuleCall() { return cOrExprParserRuleCall; }
	}

	public class AndExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.AndExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryBooleanExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionCallExpressionArgumentsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionBooleanANDBinaryLogicFunctionParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentsPrimaryBooleanExpressionParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		
		//AndExpr behavior::FunctionCallExpression:
		//	PrimaryBooleanExpression ({behavior::FunctionCallExpression.arguments+=current}
		//	function=BooleanANDBinaryLogicFunction arguments+=PrimaryBooleanExpression)*
		@Override public ParserRule getRule() { return rule; }

		//PrimaryBooleanExpression ({behavior::FunctionCallExpression.arguments+=current} function=BooleanANDBinaryLogicFunction
		//arguments+=PrimaryBooleanExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryBooleanExpression
		public RuleCall getPrimaryBooleanExpressionParserRuleCall_0() { return cPrimaryBooleanExpressionParserRuleCall_0; }

		//({behavior::FunctionCallExpression.arguments+=current} function=BooleanANDBinaryLogicFunction
		//arguments+=PrimaryBooleanExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{behavior::FunctionCallExpression.arguments+=current}
		public Action getFunctionCallExpressionArgumentsAction_1_0() { return cFunctionCallExpressionArgumentsAction_1_0; }

		//function=BooleanANDBinaryLogicFunction
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }

		//BooleanANDBinaryLogicFunction
		public RuleCall getFunctionBooleanANDBinaryLogicFunctionParserRuleCall_1_1_0() { return cFunctionBooleanANDBinaryLogicFunctionParserRuleCall_1_1_0; }

		//arguments+=PrimaryBooleanExpression
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }

		//PrimaryBooleanExpression
		public RuleCall getArgumentsPrimaryBooleanExpressionParserRuleCall_1_2_0() { return cArgumentsPrimaryBooleanExpressionParserRuleCall_1_2_0; }
	}

	public class OrExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.OrExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionCallExpressionArgumentsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionBooleanORBinaryLogicFunctionParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentsAndExprParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		
		//OrExpr behavior::FunctionCallExpression:
		//	AndExpr ({behavior::FunctionCallExpression.arguments+=current} function=BooleanORBinaryLogicFunction
		//	arguments+=AndExpr)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpr ({behavior::FunctionCallExpression.arguments+=current} function=BooleanORBinaryLogicFunction
		//arguments+=AndExpr)*
		public Group getGroup() { return cGroup; }

		//AndExpr
		public RuleCall getAndExprParserRuleCall_0() { return cAndExprParserRuleCall_0; }

		//({behavior::FunctionCallExpression.arguments+=current} function=BooleanORBinaryLogicFunction arguments+=AndExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{behavior::FunctionCallExpression.arguments+=current}
		public Action getFunctionCallExpressionArgumentsAction_1_0() { return cFunctionCallExpressionArgumentsAction_1_0; }

		//function=BooleanORBinaryLogicFunction
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }

		//BooleanORBinaryLogicFunction
		public RuleCall getFunctionBooleanORBinaryLogicFunctionParserRuleCall_1_1_0() { return cFunctionBooleanORBinaryLogicFunctionParserRuleCall_1_1_0; }

		//arguments+=AndExpr
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }

		//AndExpr
		public RuleCall getArgumentsAndExprParserRuleCall_1_2_0() { return cArgumentsAndExprParserRuleCall_1_2_0; }
	}

	public class PrimaryBooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.PrimaryBooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cBooleanNamedFCExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PrimaryBooleanExpression behavior::FunctionCallExpression:
		//	'(' BooleanNamedFCExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//'(' BooleanNamedFCExpression ')'
		public Group getGroup() { return cGroup; }

		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//BooleanNamedFCExpression
		public RuleCall getBooleanNamedFCExpressionParserRuleCall_1() { return cBooleanNamedFCExpressionParserRuleCall_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class BooleanUnaryLogicFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.BooleanUnaryLogicFCExpression");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionBooleanUnaryLogicFunctionParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//BooleanUnaryLogicFCExpression behavior::FunctionCallExpression:
		//	function=BooleanUnaryLogicFunction
		@Override public ParserRule getRule() { return rule; }

		//function=BooleanUnaryLogicFunction
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }

		//BooleanUnaryLogicFunction
		public RuleCall getFunctionBooleanUnaryLogicFunctionParserRuleCall_0() { return cFunctionBooleanUnaryLogicFunctionParserRuleCall_0; }
	}

	public class LocationNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationNamedFCExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxOneOfLocationFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectConditionalLocationFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOneOfLocationFCExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocationPrimitiveFCExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//////// LOCATION FUNCTION EXPRESSION DEFINITION \\\\\\\\
		//LocationNamedFCExpression behavior::FunctionCallExpression:
		//	MaxOneOfLocationFCExpression | SelectConditionalLocationFCExpression | OneOfLocationFCExpression |
		//	LocationPrimitiveFCExpression
		@Override public ParserRule getRule() { return rule; }

		//MaxOneOfLocationFCExpression | SelectConditionalLocationFCExpression | OneOfLocationFCExpression |
		//LocationPrimitiveFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//MaxOneOfLocationFCExpression
		public RuleCall getMaxOneOfLocationFCExpressionParserRuleCall_0() { return cMaxOneOfLocationFCExpressionParserRuleCall_0; }

		//SelectConditionalLocationFCExpression
		public RuleCall getSelectConditionalLocationFCExpressionParserRuleCall_1() { return cSelectConditionalLocationFCExpressionParserRuleCall_1; }

		//OneOfLocationFCExpression
		public RuleCall getOneOfLocationFCExpressionParserRuleCall_2() { return cOneOfLocationFCExpressionParserRuleCall_2; }

		//LocationPrimitiveFCExpression
		public RuleCall getLocationPrimitiveFCExpressionParserRuleCall_3() { return cLocationPrimitiveFCExpressionParserRuleCall_3; }
	}

	public class LocationSetNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationSetNamedFCExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNeighborFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnionLocationFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSpaceFCExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LocationSetNamedFCExpression behavior::FunctionCallExpression:
		//	NeighborFCExpression | UnionLocationFCExpression | SpaceFCExpression
		@Override public ParserRule getRule() { return rule; }

		//NeighborFCExpression | UnionLocationFCExpression | SpaceFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//NeighborFCExpression
		public RuleCall getNeighborFCExpressionParserRuleCall_0() { return cNeighborFCExpressionParserRuleCall_0; }

		//UnionLocationFCExpression
		public RuleCall getUnionLocationFCExpressionParserRuleCall_1() { return cUnionLocationFCExpressionParserRuleCall_1; }

		//SpaceFCExpression
		public RuleCall getSpaceFCExpressionParserRuleCall_2() { return cSpaceFCExpressionParserRuleCall_2; }
	}

	public class UnionLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.UnionLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionUnionLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsLocationNamedFCExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsLocationNamedFCExpressionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//UnionLocationFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=UnionLocationFunction ('(' arguments+=LocationNamedFCExpression (","
		//	arguments+=LocationNamedFCExpression)* ')')
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=UnionLocationFunction ('(' arguments+=LocationNamedFCExpression (","
		//arguments+=LocationNamedFCExpression)* ')')
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=UnionLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//UnionLocationFunction
		public RuleCall getFunctionUnionLocationFunctionParserRuleCall_1_0() { return cFunctionUnionLocationFunctionParserRuleCall_1_0; }

		//('(' arguments+=LocationNamedFCExpression ("," arguments+=LocationNamedFCExpression)* ')')
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//arguments+=LocationNamedFCExpression
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//LocationNamedFCExpression
		public RuleCall getArgumentsLocationNamedFCExpressionParserRuleCall_2_1_0() { return cArgumentsLocationNamedFCExpressionParserRuleCall_2_1_0; }

		//("," arguments+=LocationNamedFCExpression)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//arguments+=LocationNamedFCExpression
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }

		//LocationNamedFCExpression
		public RuleCall getArgumentsLocationNamedFCExpressionParserRuleCall_2_2_1_0() { return cArgumentsLocationNamedFCExpressionParserRuleCall_2_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class NeighborFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.NeighborFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionNeighborhoodLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//NeighborFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=NeighborhoodLocationFunction
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=NeighborhoodLocationFunction
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=NeighborhoodLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//NeighborhoodLocationFunction
		public RuleCall getFunctionNeighborhoodLocationFunctionParserRuleCall_1_0() { return cFunctionNeighborhoodLocationFunctionParserRuleCall_1_0; }
	}

	public class SpaceFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SpaceFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionSpaceLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHavingKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_3_2_0 = (RuleCall)cArgumentsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_3_3_1_0 = (RuleCall)cArgumentsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//SpaceFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=SpaceLocationFunction ('of' arguments+=DeclaredEntities) ('having ' '('
		//	arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=SpaceLocationFunction ('of' arguments+=DeclaredEntities) ('having ' '('
		//arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=SpaceLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//SpaceLocationFunction
		public RuleCall getFunctionSpaceLocationFunctionParserRuleCall_1_0() { return cFunctionSpaceLocationFunctionParserRuleCall_1_0; }

		//('of' arguments+=DeclaredEntities)
		public Group getGroup_2() { return cGroup_2; }

		//'of'
		public Keyword getOfKeyword_2_0() { return cOfKeyword_2_0; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_2_1_0() { return cArgumentsDeclaredEntitiesParserRuleCall_2_1_0; }

		//('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
		public Group getGroup_3() { return cGroup_3; }

		//'having '
		public Keyword getHavingKeyword_3_0() { return cHavingKeyword_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_3_2() { return cArgumentsAssignment_3_2; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_3_2_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_3_2_0; }

		//(',' arguments+=BooleanLogicFCExpression)*
		public Group getGroup_3_3() { return cGroup_3_3; }

		//','
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_3_3_1() { return cArgumentsAssignment_3_3_1; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_3_3_1_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_3_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class SpaceInitFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SpaceInitFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionSpaceInitFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cArgumentsAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_3_3_0 = (RuleCall)cArgumentsAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		
		//SpaceInitFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=SpaceInitFunction ('of' arguments+=DeclaredEntities) ('('
		//	arguments+=ConstantExpression ',' arguments+=ConstantExpression ')')
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=SpaceInitFunction ('of' arguments+=DeclaredEntities) ('('
		//arguments+=ConstantExpression ',' arguments+=ConstantExpression ')')
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=SpaceInitFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//SpaceInitFunction
		public RuleCall getFunctionSpaceInitFunctionParserRuleCall_1_0() { return cFunctionSpaceInitFunctionParserRuleCall_1_0; }

		//('of' arguments+=DeclaredEntities)
		public Group getGroup_2() { return cGroup_2; }

		//'of'
		public Keyword getOfKeyword_2_0() { return cOfKeyword_2_0; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_2_1_0() { return cArgumentsDeclaredEntitiesParserRuleCall_2_1_0; }

		//('(' arguments+=ConstantExpression ',' arguments+=ConstantExpression ')')
		public Group getGroup_3() { return cGroup_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//arguments+=ConstantExpression
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_3_1_0() { return cArgumentsConstantExpressionParserRuleCall_3_1_0; }

		//','
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//arguments+=ConstantExpression
		public Assignment getArgumentsAssignment_3_3() { return cArgumentsAssignment_3_3; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_3_3_0() { return cArgumentsConstantExpressionParserRuleCall_3_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
	}

	public class EntityNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityNamedFCExpression");
		private final RuleCall cEntityOneOfFCExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		///////////ENTITY FUNCTION DEFINITION////
		//EntityNamedFCExpression behavior::FunctionCallExpression:
		//	EntityOneOfFCExpression
		@Override public ParserRule getRule() { return rule; }

		//EntityOneOfFCExpression
		public RuleCall getEntityOneOfFCExpressionParserRuleCall() { return cEntityOneOfFCExpressionParserRuleCall; }
	}

	public class EntitySetCreateFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetCreateFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionEntitySetCreateFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//EntitySetCreateFCExpression behavior::FunctionCallExpression:
		//	function=EntitySetCreateFunction
		//	arguments+=DeclaredEntities arguments+=ConstantExpression
		@Override public ParserRule getRule() { return rule; }

		//function=EntitySetCreateFunction arguments+=DeclaredEntities arguments+=ConstantExpression
		public Group getGroup() { return cGroup; }

		//function=EntitySetCreateFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//EntitySetCreateFunction
		public RuleCall getFunctionEntitySetCreateFunctionParserRuleCall_0_0() { return cFunctionEntitySetCreateFunctionParserRuleCall_0_0; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_1_0() { return cArgumentsDeclaredEntitiesParserRuleCall_1_0; }

		//arguments+=ConstantExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_2_0() { return cArgumentsConstantExpressionParserRuleCall_2_0; }
	}

	public class EntityOneOfFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntityOneOfFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionEntityOneOfFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFromKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cArgumentsLocationNamedFCExpressionParserRuleCall_1_2_1_0 = (RuleCall)cArgumentsAssignment_1_2_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHavingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_2_3_1_0 = (RuleCall)cArgumentsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//EntityOneOfFCExpression behavior::FunctionCallExpression:
		//	function=EntityOneOfFunction ('(' arguments+=DeclaredEntities ('from ' arguments+=LocationNamedFCExpression))
		//	('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
		//	')'
		@Override public ParserRule getRule() { return rule; }

		//function=EntityOneOfFunction ('(' arguments+=DeclaredEntities ('from ' arguments+=LocationNamedFCExpression)) ('having '
		//'(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')? ')'
		public Group getGroup() { return cGroup; }

		//function=EntityOneOfFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//EntityOneOfFunction
		public RuleCall getFunctionEntityOneOfFunctionParserRuleCall_0_0() { return cFunctionEntityOneOfFunctionParserRuleCall_0_0; }

		//('(' arguments+=DeclaredEntities ('from ' arguments+=LocationNamedFCExpression))
		public Group getGroup_1() { return cGroup_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_1_1_0() { return cArgumentsDeclaredEntitiesParserRuleCall_1_1_0; }

		//('from ' arguments+=LocationNamedFCExpression)
		public Group getGroup_1_2() { return cGroup_1_2; }

		//'from '
		public Keyword getFromKeyword_1_2_0() { return cFromKeyword_1_2_0; }

		//arguments+=LocationNamedFCExpression
		public Assignment getArgumentsAssignment_1_2_1() { return cArgumentsAssignment_1_2_1; }

		//LocationNamedFCExpression
		public RuleCall getArgumentsLocationNamedFCExpressionParserRuleCall_1_2_1_0() { return cArgumentsLocationNamedFCExpressionParserRuleCall_1_2_1_0; }

		//('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'having '
		public Keyword getHavingKeyword_2_0() { return cHavingKeyword_2_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_2_2_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_2_2_0; }

		//(',' arguments+=BooleanLogicFCExpression)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_2_3_1() { return cArgumentsAssignment_2_3_1; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_2_3_1_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_2_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class EntitySetFunctionCallExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetFunctionCallExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEntitySetOnLocationFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEntitySetConditionalFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////EntityFromLocationFCExpression returns behavior::FunctionCallExpression :
		////	function=GetAttributeFunction '(' arguments+=DeclaredAttributes 'from' arguments+=LocationNamedFCExpression ')'
		////;
		///////////ENTITY SET FUNCTION DEFINITION////
		//EntitySetFunctionCallExpression behavior::FunctionCallExpression:
		//	EntitySetOnLocationFCExpression | EntitySetConditionalFCExpression
		@Override public ParserRule getRule() { return rule; }

		//EntitySetOnLocationFCExpression | EntitySetConditionalFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//EntitySetOnLocationFCExpression
		public RuleCall getEntitySetOnLocationFCExpressionParserRuleCall_0() { return cEntitySetOnLocationFCExpressionParserRuleCall_0; }

		//EntitySetConditionalFCExpression
		public RuleCall getEntitySetConditionalFCExpressionParserRuleCall_1() { return cEntitySetConditionalFCExpressionParserRuleCall_1; }
	}

	public class EntitySetOnLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetOnLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionEntitySetOnLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsLocationPrimitiveFCExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//EntitySetOnLocationFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredEntities
		//	function=EntitySetOnLocationFunction arguments+=LocationPrimitiveFCExpression
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredEntities function=EntitySetOnLocationFunction arguments+=LocationPrimitiveFCExpression
		public Group getGroup() { return cGroup; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_0_0() { return cArgumentsDeclaredEntitiesParserRuleCall_0_0; }

		//function=EntitySetOnLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//EntitySetOnLocationFunction
		public RuleCall getFunctionEntitySetOnLocationFunctionParserRuleCall_1_0() { return cFunctionEntitySetOnLocationFunctionParserRuleCall_1_0; }

		//arguments+=LocationPrimitiveFCExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//LocationPrimitiveFCExpression
		public RuleCall getArgumentsLocationPrimitiveFCExpressionParserRuleCall_2_0() { return cArgumentsLocationPrimitiveFCExpressionParserRuleCall_2_0; }
	}

	public class EntitySetConditionalFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.EntitySetConditionalFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionEntityNamedFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cHavingKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		
		//EntitySetConditionalFCExpression behavior::FunctionCallExpression:
		//	function=EntityNamedFunction? (arguments+=DeclaredEntities arguments+=LocationPrimitiveFCExpression) ('having '
		//	arguments+=BooleanLogicFCExpression)?
		@Override public ParserRule getRule() { return rule; }

		//function=EntityNamedFunction? (arguments+=DeclaredEntities arguments+=LocationPrimitiveFCExpression) ('having '
		//arguments+=BooleanLogicFCExpression)?
		public Group getGroup() { return cGroup; }

		//function=EntityNamedFunction?
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//EntityNamedFunction
		public RuleCall getFunctionEntityNamedFunctionParserRuleCall_0_0() { return cFunctionEntityNamedFunctionParserRuleCall_0_0; }

		//(arguments+=DeclaredEntities arguments+=LocationPrimitiveFCExpression)
		public Group getGroup_1() { return cGroup_1; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_1_0_0() { return cArgumentsDeclaredEntitiesParserRuleCall_1_0_0; }

		//arguments+=LocationPrimitiveFCExpression
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//LocationPrimitiveFCExpression
		public RuleCall getArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_1_0() { return cArgumentsLocationPrimitiveFCExpressionParserRuleCall_1_1_0; }

		//('having ' arguments+=BooleanLogicFCExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//'having '
		public Keyword getHavingKeyword_2_0() { return cHavingKeyword_2_0; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_2_1_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_2_1_0; }
	}

	public class NumericNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.NumericNamedFCExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArithmeticFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMathFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCountFCExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////NUMERIC FUNCTION DEFINITION\\\\\\\
		//NumericNamedFCExpression behavior::FunctionCallExpression:
		//	ArithmeticFCExpression | MathFCExpression | CountFCExpression
		@Override public ParserRule getRule() { return rule; }

		//ArithmeticFCExpression | MathFCExpression | CountFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArithmeticFCExpression
		public RuleCall getArithmeticFCExpressionParserRuleCall_0() { return cArithmeticFCExpressionParserRuleCall_0; }

		//MathFCExpression
		public RuleCall getMathFCExpressionParserRuleCall_1() { return cMathFCExpressionParserRuleCall_1; }

		//CountFCExpression
		public RuleCall getCountFCExpressionParserRuleCall_2() { return cCountFCExpressionParserRuleCall_2; }
	}

	public class ArithmeticFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ArithmeticFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ArithmeticFCExpression behavior::FunctionCallExpression:
		//	'-'? Addition
		@Override public ParserRule getRule() { return rule; }

		//'-'? Addition
		public Group getGroup() { return cGroup; }

		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1() { return cAdditionParserRuleCall_1; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionCallExpressionArgumentsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionArithmeticFunctionPlusParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentsMultiplicationParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		
		//Addition behavior::FunctionCallExpression:
		//	Multiplication ({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionPlus
		//	arguments+=Multiplication)*
		@Override public ParserRule getRule() { return rule; }

		//Multiplication ({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionPlus
		//arguments+=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionPlus arguments+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{behavior::FunctionCallExpression.arguments+=current}
		public Action getFunctionCallExpressionArgumentsAction_1_0() { return cFunctionCallExpressionArgumentsAction_1_0; }

		//function=ArithmeticFunctionPlus
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }

		//ArithmeticFunctionPlus
		public RuleCall getFunctionArithmeticFunctionPlusParserRuleCall_1_1_0() { return cFunctionArithmeticFunctionPlusParserRuleCall_1_1_0; }

		//arguments+=Multiplication
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }

		//Multiplication
		public RuleCall getArgumentsMultiplicationParserRuleCall_1_2_0() { return cArgumentsMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFunctionCallExpressionArgumentsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cFunctionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFunctionArithmeticFunctionMultiplicationParserRuleCall_1_1_0 = (RuleCall)cFunctionAssignment_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgumentsPrimaryArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cArgumentsAssignment_1_2.eContents().get(0);
		
		//Multiplication behavior::FunctionCallExpression:
		//	PrimaryArithmeticExpression ({behavior::FunctionCallExpression.arguments+=current}
		//	function=ArithmeticFunctionMultiplication arguments+=PrimaryArithmeticExpression)*
		@Override public ParserRule getRule() { return rule; }

		//PrimaryArithmeticExpression ({behavior::FunctionCallExpression.arguments+=current}
		//function=ArithmeticFunctionMultiplication arguments+=PrimaryArithmeticExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryArithmeticExpression
		public RuleCall getPrimaryArithmeticExpressionParserRuleCall_0() { return cPrimaryArithmeticExpressionParserRuleCall_0; }

		//({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionMultiplication
		//arguments+=PrimaryArithmeticExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{behavior::FunctionCallExpression.arguments+=current}
		public Action getFunctionCallExpressionArgumentsAction_1_0() { return cFunctionCallExpressionArgumentsAction_1_0; }

		//function=ArithmeticFunctionMultiplication
		public Assignment getFunctionAssignment_1_1() { return cFunctionAssignment_1_1; }

		//ArithmeticFunctionMultiplication
		public RuleCall getFunctionArithmeticFunctionMultiplicationParserRuleCall_1_1_0() { return cFunctionArithmeticFunctionMultiplicationParserRuleCall_1_1_0; }

		//arguments+=PrimaryArithmeticExpression
		public Assignment getArgumentsAssignment_1_2() { return cArgumentsAssignment_1_2; }

		//PrimaryArithmeticExpression
		public RuleCall getArgumentsPrimaryArithmeticExpressionParserRuleCall_1_2_0() { return cArgumentsPrimaryArithmeticExpressionParserRuleCall_1_2_0; }
	}

	public class PrimaryArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.PrimaryArithmeticExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cNumericNamedFCExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//PrimaryArithmeticExpression behavior::FunctionCallExpression:
		//	'(' NumericNamedFCExpression ')' | arguments+=DeclaredVariable | arguments+=ConstantExpression
		@Override public ParserRule getRule() { return rule; }

		//'(' NumericNamedFCExpression ')' | arguments+=DeclaredVariable | arguments+=ConstantExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' NumericNamedFCExpression ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//NumericNamedFCExpression
		public RuleCall getNumericNamedFCExpressionParserRuleCall_0_1() { return cNumericNamedFCExpressionParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_1_0() { return cArgumentsDeclaredVariableParserRuleCall_1_0; }

		//arguments+=ConstantExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_2_0() { return cArgumentsConstantExpressionParserRuleCall_2_0; }
	}

	public class ConstantExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.ConstantExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFloatParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConstantExpression behavior::ConstantExpression:
		//	{behavior::ConstantExpression} value=Float
		@Override public ParserRule getRule() { return rule; }

		//{behavior::ConstantExpression} value=Float
		public Group getGroup() { return cGroup; }

		//{behavior::ConstantExpression}
		public Action getConstantExpressionAction_0() { return cConstantExpressionAction_0; }

		//value=Float
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Float
		public RuleCall getValueFloatParserRuleCall_1_0() { return cValueFloatParserRuleCall_1_0; }
	}

	public class CountFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.CountFCExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCountVariableFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCountEntityFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CountFCExpression behavior::FunctionCallExpression:
		//	CountVariableFCExpression | CountEntityFCExpression
		@Override public ParserRule getRule() { return rule; }

		//CountVariableFCExpression | CountEntityFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//CountVariableFCExpression
		public RuleCall getCountVariableFCExpressionParserRuleCall_0() { return cCountVariableFCExpressionParserRuleCall_0; }

		//CountEntityFCExpression
		public RuleCall getCountEntityFCExpressionParserRuleCall_1() { return cCountEntityFCExpressionParserRuleCall_1; }
	}

	public class CountVariableFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.CountVariableFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionCountFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CountVariableFCExpression behavior::FunctionCallExpression:
		//	function=CountFunction
		//	'(' arguments+=DeclaredVariable ')'
		@Override public ParserRule getRule() { return rule; }

		//function=CountFunction '(' arguments+=DeclaredVariable ')'
		public Group getGroup() { return cGroup; }

		//function=CountFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//CountFunction
		public RuleCall getFunctionCountFunctionParserRuleCall_0_0() { return cFunctionCountFunctionParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_2_0() { return cArgumentsDeclaredVariableParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CountEntityFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.CountEntityFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionCountFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsEntitySetConditionalFCExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//CountEntityFCExpression behavior::FunctionCallExpression:
		//	function=CountFunction
		//	'(' arguments+=EntitySetConditionalFCExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//function=CountFunction '(' arguments+=EntitySetConditionalFCExpression ')'
		public Group getGroup() { return cGroup; }

		//function=CountFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//CountFunction
		public RuleCall getFunctionCountFunctionParserRuleCall_0_0() { return cFunctionCountFunctionParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=EntitySetConditionalFCExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//EntitySetConditionalFCExpression
		public RuleCall getArgumentsEntitySetConditionalFCExpressionParserRuleCall_2_0() { return cArgumentsEntitySetConditionalFCExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MathFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.MathFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionMathFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsNumericNamedFCExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MathFCExpression behavior::FunctionCallExpression:
		//	function=MathFunction '(' arguments+=NumericNamedFCExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//function=MathFunction '(' arguments+=NumericNamedFCExpression ')'
		public Group getGroup() { return cGroup; }

		//function=MathFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//MathFunction
		public RuleCall getFunctionMathFunctionParserRuleCall_0_0() { return cFunctionMathFunctionParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=NumericNamedFCExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//NumericNamedFCExpression
		public RuleCall getArgumentsNumericNamedFCExpressionParserRuleCall_2_0() { return cArgumentsNumericNamedFCExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class GetNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetNamedFCExpression");
		private final RuleCall cGetAttributeFromEntityFCExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////////////////////////////GET FUNCTION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
		//GetNamedFCExpression behavior::FunctionCallExpression:
		//	GetAttributeFromEntityFCExpression
		@Override public ParserRule getRule() { return rule; }

		//GetAttributeFromEntityFCExpression
		public RuleCall getGetAttributeFromEntityFCExpressionParserRuleCall() { return cGetAttributeFromEntityFCExpressionParserRuleCall; }
	}

	public class GetAttributeFromEntityFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetAttributeFromEntityFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionGetVariableFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cArgumentsAlternatives_2_0 = (Alternatives)cArgumentsAssignment_2.eContents().get(0);
		private final RuleCall cArgumentsEntityNamedFCExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAlternatives_2_0.eContents().get(0);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_2_0_1 = (RuleCall)cArgumentsAlternatives_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cArgumentsLocationNamedFCExpressionParserRuleCall_3_1_0 = (RuleCall)cArgumentsAssignment_3_1.eContents().get(0);
		
		//GetAttributeFromEntityFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredVariable
		//	function=GetVariableFunction
		//	arguments+=(EntityNamedFCExpression | DeclaredEntities) ('from ' arguments+=LocationNamedFCExpression)?
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredVariable function=GetVariableFunction arguments+=(EntityNamedFCExpression | DeclaredEntities)
		//('from ' arguments+=LocationNamedFCExpression)?
		public Group getGroup() { return cGroup; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_0_0() { return cArgumentsDeclaredVariableParserRuleCall_0_0; }

		//function=GetVariableFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//GetVariableFunction
		public RuleCall getFunctionGetVariableFunctionParserRuleCall_1_0() { return cFunctionGetVariableFunctionParserRuleCall_1_0; }

		//arguments+=(EntityNamedFCExpression | DeclaredEntities)
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//(EntityNamedFCExpression | DeclaredEntities)
		public Alternatives getArgumentsAlternatives_2_0() { return cArgumentsAlternatives_2_0; }

		//EntityNamedFCExpression
		public RuleCall getArgumentsEntityNamedFCExpressionParserRuleCall_2_0_0() { return cArgumentsEntityNamedFCExpressionParserRuleCall_2_0_0; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_2_0_1() { return cArgumentsDeclaredEntitiesParserRuleCall_2_0_1; }

		//('from ' arguments+=LocationNamedFCExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//'from '
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//arguments+=LocationNamedFCExpression
		public Assignment getArgumentsAssignment_3_1() { return cArgumentsAssignment_3_1; }

		//LocationNamedFCExpression
		public RuleCall getArgumentsLocationNamedFCExpressionParserRuleCall_3_1_0() { return cArgumentsLocationNamedFCExpressionParserRuleCall_3_1_0; }
	}

	public class GetLocalVariableFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetLocalVariableFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionGetVariableFunctionParserRuleCall_0_0 = (RuleCall)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsDeclaredVariableParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		
		//GetLocalVariableFCExpression behavior::FunctionCallExpression:
		//	function=GetVariableFunction arguments+=DeclaredVariable
		@Override public ParserRule getRule() { return rule; }

		//function=GetVariableFunction arguments+=DeclaredVariable
		public Group getGroup() { return cGroup; }

		//function=GetVariableFunction
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//GetVariableFunction
		public RuleCall getFunctionGetVariableFunctionParserRuleCall_0_0() { return cFunctionGetVariableFunctionParserRuleCall_0_0; }

		//arguments+=DeclaredVariable
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//DeclaredVariable
		public RuleCall getArgumentsDeclaredVariableParserRuleCall_1_0() { return cArgumentsDeclaredVariableParserRuleCall_1_0; }
	}

	public class GetEntityNameFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetEntityNameFCExpression");
		private final Assignment cArgumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArgumentsDeclaredEntitiesParserRuleCall_0 = (RuleCall)cArgumentsAssignment.eContents().get(0);
		
		//GetEntityNameFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredEntities
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredEntities
		public Assignment getArgumentsAssignment() { return cArgumentsAssignment; }

		//DeclaredEntities
		public RuleCall getArgumentsDeclaredEntitiesParserRuleCall_0() { return cArgumentsDeclaredEntitiesParserRuleCall_0; }
	}

	public class GetParametersFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.GetParametersFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsDeclaredParameterParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionGetVariableFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsEntityNamedFCExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		
		//GetParametersFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredParameter function=GetVariableFunction
		//	arguments+=EntityNamedFCExpression
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredParameter function=GetVariableFunction arguments+=EntityNamedFCExpression
		public Group getGroup() { return cGroup; }

		//arguments+=DeclaredParameter
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//DeclaredParameter
		public RuleCall getArgumentsDeclaredParameterParserRuleCall_0_0() { return cArgumentsDeclaredParameterParserRuleCall_0_0; }

		//function=GetVariableFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//GetVariableFunction
		public RuleCall getFunctionGetVariableFunctionParserRuleCall_1_0() { return cFunctionGetVariableFunctionParserRuleCall_1_0; }

		//arguments+=EntityNamedFCExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//EntityNamedFCExpression
		public RuleCall getArgumentsEntityNamedFCExpressionParserRuleCall_2_0() { return cArgumentsEntityNamedFCExpressionParserRuleCall_2_0; }
	}

	public class MaxOneOfLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.MaxOneOfLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionMaxOneOfLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsDeclaredAttributesParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Alternatives cArgumentsAlternatives_2_3_0 = (Alternatives)cArgumentsAssignment_2_3.eContents().get(0);
		private final RuleCall cArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_3_0_0 = (RuleCall)cArgumentsAlternatives_2_3_0.eContents().get(0);
		private final RuleCall cArgumentsUnionLocationFCExpressionParserRuleCall_2_3_0_1 = (RuleCall)cArgumentsAlternatives_2_3_0.eContents().get(1);
		private final Assignment cArgumentsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cArgumentsUnionLocationFCExpressionParserRuleCall_2_4_0 = (RuleCall)cArgumentsAssignment_2_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		///// LOCATION FUNCTION DEFINITION\\\\\
		//MaxOneOfLocationFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=MaxOneOfLocationFunction ('['
		//	arguments+=DeclaredAttributes
		//	','
		//	arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression) arguments+=UnionLocationFCExpression?
		//	']')
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=MaxOneOfLocationFunction ('[' arguments+=DeclaredAttributes ','
		//arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression) arguments+=UnionLocationFCExpression?
		//']')
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=MaxOneOfLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//MaxOneOfLocationFunction
		public RuleCall getFunctionMaxOneOfLocationFunctionParserRuleCall_1_0() { return cFunctionMaxOneOfLocationFunctionParserRuleCall_1_0; }

		//('[' arguments+=DeclaredAttributes ',' arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression)
		//arguments+=UnionLocationFCExpression? ']')
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//arguments+=DeclaredAttributes
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//DeclaredAttributes
		public RuleCall getArgumentsDeclaredAttributesParserRuleCall_2_1_0() { return cArgumentsDeclaredAttributesParserRuleCall_2_1_0; }

		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }

		//arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression)
		public Assignment getArgumentsAssignment_2_3() { return cArgumentsAssignment_2_3; }

		//(SelectConditionalLocationFCExpression | UnionLocationFCExpression)
		public Alternatives getArgumentsAlternatives_2_3_0() { return cArgumentsAlternatives_2_3_0; }

		//SelectConditionalLocationFCExpression
		public RuleCall getArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_3_0_0() { return cArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_3_0_0; }

		//UnionLocationFCExpression
		public RuleCall getArgumentsUnionLocationFCExpressionParserRuleCall_2_3_0_1() { return cArgumentsUnionLocationFCExpressionParserRuleCall_2_3_0_1; }

		//arguments+=UnionLocationFCExpression?
		public Assignment getArgumentsAssignment_2_4() { return cArgumentsAssignment_2_4; }

		//UnionLocationFCExpression
		public RuleCall getArgumentsUnionLocationFCExpressionParserRuleCall_2_4_0() { return cArgumentsUnionLocationFCExpressionParserRuleCall_2_4_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class OneOfLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.OneOfLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionOneOfLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cArgumentsLocationSetNamedFCExpressionParserRuleCall_2_2_0 = (RuleCall)cArgumentsAssignment_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cArgumentsDeclaredLocalVariableParserRuleCall_2_3_0 = (RuleCall)cArgumentsAssignment_2_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//OneOfLocationFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=OneOfLocationFunction ('['
		//	arguments+=SelectConditionalLocationFCExpression?
		//	arguments+=LocationSetNamedFCExpression?
		//	arguments+=DeclaredLocalVariable?
		//	']')
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=OneOfLocationFunction ('[' arguments+=SelectConditionalLocationFCExpression?
		//arguments+=LocationSetNamedFCExpression? arguments+=DeclaredLocalVariable? ']')
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=OneOfLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//OneOfLocationFunction
		public RuleCall getFunctionOneOfLocationFunctionParserRuleCall_1_0() { return cFunctionOneOfLocationFunctionParserRuleCall_1_0; }

		//('[' arguments+=SelectConditionalLocationFCExpression? arguments+=LocationSetNamedFCExpression?
		//arguments+=DeclaredLocalVariable? ']')
		public Group getGroup_2() { return cGroup_2; }

		//'['
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//arguments+=SelectConditionalLocationFCExpression?
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }

		//SelectConditionalLocationFCExpression
		public RuleCall getArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_1_0() { return cArgumentsSelectConditionalLocationFCExpressionParserRuleCall_2_1_0; }

		//arguments+=LocationSetNamedFCExpression?
		public Assignment getArgumentsAssignment_2_2() { return cArgumentsAssignment_2_2; }

		//LocationSetNamedFCExpression
		public RuleCall getArgumentsLocationSetNamedFCExpressionParserRuleCall_2_2_0() { return cArgumentsLocationSetNamedFCExpressionParserRuleCall_2_2_0; }

		//arguments+=DeclaredLocalVariable?
		public Assignment getArgumentsAssignment_2_3() { return cArgumentsAssignment_2_3; }

		//DeclaredLocalVariable
		public RuleCall getArgumentsDeclaredLocalVariableParserRuleCall_2_3_0() { return cArgumentsDeclaredLocalVariableParserRuleCall_2_3_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_2_4() { return cRightSquareBracketKeyword_2_4; }
	}

	public class SelectConditionalLocationFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SelectConditionalLocationFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionSelectConditionalLocationFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0 = (RuleCall)cArgumentsAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSuchThatKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cArgumentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cArgumentsBooleanLogicFCExpressionParserRuleCall_6_0 = (RuleCall)cArgumentsAssignment_6.eContents().get(0);
		
		//SelectConditionalLocationFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=SelectConditionalLocationFunction 'from ['
		//	arguments+=LocationPrimitiveFCExpression ']'
		//	'such that' arguments+=BooleanLogicFCExpression
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=SelectConditionalLocationFunction 'from ['
		//arguments+=LocationPrimitiveFCExpression ']' 'such that' arguments+=BooleanLogicFCExpression
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=SelectConditionalLocationFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//SelectConditionalLocationFunction
		public RuleCall getFunctionSelectConditionalLocationFunctionParserRuleCall_1_0() { return cFunctionSelectConditionalLocationFunctionParserRuleCall_1_0; }

		//'from ['
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//arguments+=LocationPrimitiveFCExpression
		public Assignment getArgumentsAssignment_3() { return cArgumentsAssignment_3; }

		//LocationPrimitiveFCExpression
		public RuleCall getArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0() { return cArgumentsLocationPrimitiveFCExpressionParserRuleCall_3_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }

		//'such that'
		public Keyword getSuchThatKeyword_5() { return cSuchThatKeyword_5; }

		//arguments+=BooleanLogicFCExpression
		public Assignment getArgumentsAssignment_6() { return cArgumentsAssignment_6; }

		//BooleanLogicFCExpression
		public RuleCall getArgumentsBooleanLogicFCExpressionParserRuleCall_6_0() { return cArgumentsBooleanLogicFCExpressionParserRuleCall_6_0; }
	}

	public class LocationPrimitiveFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.LocationPrimitiveFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionLocationPrimitiveFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		
		//LocationPrimitiveFCExpression behavior::FunctionCallExpression:
		//	{behavior::FunctionCallExpression} function=LocationPrimitiveFunction
		@Override public ParserRule getRule() { return rule; }

		//{behavior::FunctionCallExpression} function=LocationPrimitiveFunction
		public Group getGroup() { return cGroup; }

		//{behavior::FunctionCallExpression}
		public Action getFunctionCallExpressionAction_0() { return cFunctionCallExpressionAction_0; }

		//function=LocationPrimitiveFunction
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//LocationPrimitiveFunction
		public RuleCall getFunctionLocationPrimitiveFunctionParserRuleCall_1_0() { return cFunctionLocationPrimitiveFunctionParserRuleCall_1_0; }
	}

	public class SetNamedFunctionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SetNamedFunctionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSetAttributeNamedFCExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSetLocationNamedFCExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////LOCATION SET FUNCTIONS\\\\\\\\
		//////SET FUNCTIONS
		//SetNamedFunctionExpression behavior::FunctionCallExpression:
		//	SetAttributeNamedFCExpression | SetLocationNamedFCExpression
		@Override public ParserRule getRule() { return rule; }

		//SetAttributeNamedFCExpression | SetLocationNamedFCExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SetAttributeNamedFCExpression
		public RuleCall getSetAttributeNamedFCExpressionParserRuleCall_0() { return cSetAttributeNamedFCExpressionParserRuleCall_0; }

		//SetLocationNamedFCExpression
		public RuleCall getSetLocationNamedFCExpressionParserRuleCall_1() { return cSetLocationNamedFCExpressionParserRuleCall_1; }
	}

	public class SetAttributeNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SetAttributeNamedFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsDeclaredAttributesParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cArgumentsConstantExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetAttributeNamedFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredAttributes '(' (arguments+=ConstantExpression | STRING) ')'
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredAttributes '(' (arguments+=ConstantExpression | STRING) ')'
		public Group getGroup() { return cGroup; }

		//arguments+=DeclaredAttributes
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//DeclaredAttributes
		public RuleCall getArgumentsDeclaredAttributesParserRuleCall_0_0() { return cArgumentsDeclaredAttributesParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=ConstantExpression | STRING)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//arguments+=ConstantExpression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//ConstantExpression
		public RuleCall getArgumentsConstantExpressionParserRuleCall_2_0_0() { return cArgumentsConstantExpressionParserRuleCall_2_0_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class SetLocationNamedFCExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.SetLocationNamedFCExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsDeclaredAttributesParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsLocationNamedFCExpressionParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SetLocationNamedFCExpression behavior::FunctionCallExpression:
		//	arguments+=DeclaredAttributes '(' arguments+=LocationNamedFCExpression ')'
		@Override public ParserRule getRule() { return rule; }

		//arguments+=DeclaredAttributes '(' arguments+=LocationNamedFCExpression ')'
		public Group getGroup() { return cGroup; }

		//arguments+=DeclaredAttributes
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//DeclaredAttributes
		public RuleCall getArgumentsDeclaredAttributesParserRuleCall_0_0() { return cArgumentsDeclaredAttributesParserRuleCall_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments+=LocationNamedFCExpression
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//LocationNamedFCExpression
		public RuleCall getArgumentsLocationNamedFCExpressionParserRuleCall_2_0() { return cArgumentsLocationNamedFCExpressionParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DeclaredLocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredLocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaredLocalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLocalvariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLocalvariableLocalVariableCrossReference_1_0 = (CrossReference)cLocalvariableAssignment_1.eContents().get(0);
		private final RuleCall cLocalvariableLocalVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cLocalvariableLocalVariableCrossReference_1_0.eContents().get(1);
		
		//DeclaredLocalVariable behavior::DeclaredLocalVariable:
		//	{behavior::DeclaredLocalVariable} localvariable=[behavior::LocalVariable]
		@Override public ParserRule getRule() { return rule; }

		//{behavior::DeclaredLocalVariable} localvariable=[behavior::LocalVariable]
		public Group getGroup() { return cGroup; }

		//{behavior::DeclaredLocalVariable}
		public Action getDeclaredLocalVariableAction_0() { return cDeclaredLocalVariableAction_0; }

		//localvariable=[behavior::LocalVariable]
		public Assignment getLocalvariableAssignment_1() { return cLocalvariableAssignment_1; }

		//[behavior::LocalVariable]
		public CrossReference getLocalvariableLocalVariableCrossReference_1_0() { return cLocalvariableLocalVariableCrossReference_1_0; }

		//ID
		public RuleCall getLocalvariableLocalVariableIDTerminalRuleCall_1_0_1() { return cLocalvariableLocalVariableIDTerminalRuleCall_1_0_1; }
	}

	public class DeclaredAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredAttributes");
		private final Assignment cAttributeclassAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttributeclassAttributeClassCrossReference_0 = (CrossReference)cAttributeclassAssignment.eContents().get(0);
		private final RuleCall cAttributeclassAttributeClassIDTerminalRuleCall_0_1 = (RuleCall)cAttributeclassAttributeClassCrossReference_0.eContents().get(1);
		
		//DeclaredAttributes behavior::DeclaredAttributes:
		//	attributeclass=[behavior::AttributeClass]
		@Override public ParserRule getRule() { return rule; }

		//attributeclass=[behavior::AttributeClass]
		public Assignment getAttributeclassAssignment() { return cAttributeclassAssignment; }

		//[behavior::AttributeClass]
		public CrossReference getAttributeclassAttributeClassCrossReference_0() { return cAttributeclassAttributeClassCrossReference_0; }

		//ID
		public RuleCall getAttributeclassAttributeClassIDTerminalRuleCall_0_1() { return cAttributeclassAttributeClassIDTerminalRuleCall_0_1; }
	}

	public class DeclaredParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaredParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cParameterclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cParameterclassParameterClassCrossReference_1_0 = (CrossReference)cParameterclassAssignment_1.eContents().get(0);
		private final RuleCall cParameterclassParameterClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cParameterclassParameterClassCrossReference_1_0.eContents().get(1);
		
		//DeclaredParameter behavior::DeclaredParameter:
		//	{behavior::DeclaredParameter} parameterclass=[behavior::ParameterClass|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//{behavior::DeclaredParameter} parameterclass=[behavior::ParameterClass|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{behavior::DeclaredParameter}
		public Action getDeclaredParameterAction_0() { return cDeclaredParameterAction_0; }

		//parameterclass=[behavior::ParameterClass|QualifiedName]
		public Assignment getParameterclassAssignment_1() { return cParameterclassAssignment_1; }

		//[behavior::ParameterClass|QualifiedName]
		public CrossReference getParameterclassParameterClassCrossReference_1_0() { return cParameterclassParameterClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getParameterclassParameterClassQualifiedNameParserRuleCall_1_0_1() { return cParameterclassParameterClassQualifiedNameParserRuleCall_1_0_1; }
	}

	public class DeclaredVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaredVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariableclassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableclassVariableClassCrossReference_1_0 = (CrossReference)cVariableclassAssignment_1.eContents().get(0);
		private final RuleCall cVariableclassVariableClassQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cVariableclassVariableClassCrossReference_1_0.eContents().get(1);
		
		//DeclaredVariable behavior::DeclaredVariable:
		//	{behavior::DeclaredVariable} variableclass=[behavior::VariableClass|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//{behavior::DeclaredVariable} variableclass=[behavior::VariableClass|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{behavior::DeclaredVariable}
		public Action getDeclaredVariableAction_0() { return cDeclaredVariableAction_0; }

		//variableclass=[behavior::VariableClass|QualifiedName]
		public Assignment getVariableclassAssignment_1() { return cVariableclassAssignment_1; }

		//[behavior::VariableClass|QualifiedName]
		public CrossReference getVariableclassVariableClassCrossReference_1_0() { return cVariableclassVariableClassCrossReference_1_0; }

		//QualifiedName
		public RuleCall getVariableclassVariableClassQualifiedNameParserRuleCall_1_0_1() { return cVariableclassVariableClassQualifiedNameParserRuleCall_1_0_1; }
	}

	public class DeclaredEntitiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredEntities");
		private final Assignment cEntityAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEntityEntityCrossReference_0 = (CrossReference)cEntityAssignment.eContents().get(0);
		private final RuleCall cEntityEntityQualifiedNameParserRuleCall_0_1 = (RuleCall)cEntityEntityCrossReference_0.eContents().get(1);
		
		//DeclaredEntities behavior::DeclaredEntities:
		//	entity=[behavior::Entity|QualifiedName]
		@Override public ParserRule getRule() { return rule; }

		//entity=[behavior::Entity|QualifiedName]
		public Assignment getEntityAssignment() { return cEntityAssignment; }

		//[behavior::Entity|QualifiedName]
		public CrossReference getEntityEntityCrossReference_0() { return cEntityEntityCrossReference_0; }

		//QualifiedName
		public RuleCall getEntityEntityQualifiedNameParserRuleCall_0_1() { return cEntityEntityQualifiedNameParserRuleCall_0_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Type");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeTypeEnumEnumRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		////DeclaredLocation returns behavior::DeclaredLocation:
		////	location=[behavior::Location]
		////;
		////DeclaredNode returns behavior::DeclaredNode:
		////	node=[behavior::Node]
		////;
		//Type behavior::Type:
		//	type=TypeEnum
		@Override public ParserRule getRule() { return rule; }

		//type=TypeEnum
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//TypeEnum
		public RuleCall getTypeTypeEnumEnumRuleCall_0() { return cTypeTypeEnumEnumRuleCall_0; }
	}

	public class FloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Float");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Float ecore::EFloat:
		//	INT ('.' INT)?
		@Override public ParserRule getRule() { return rule; }

		//INT ('.' INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//('.' INT)?
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Start");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameStartKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!DIAGRAMME D'ACTIVITE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\
		//Start behavior::Start:
		//	{behavior::Start} name='Start' outcome_edge+=UnconditionedEdge
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Start} name='Start' outcome_edge+=UnconditionedEdge
		public Group getGroup() { return cGroup; }

		//{behavior::Start}
		public Action getStartAction_0() { return cStartAction_0; }

		//name='Start'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Start'
		public Keyword getNameStartKeyword_1_0() { return cNameStartKeyword_1_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }
	}

	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameEndKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//End behavior::End:
		//	{behavior::End} name='End'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::End} name='End'
		public Group getGroup() { return cGroup; }

		//{behavior::End}
		public Action getEndAction_0() { return cEndAction_0; }

		//name='End'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'End'
		public Keyword getNameEndKeyword_1_0() { return cNameEndKeyword_1_0; }
	}

	public class DeclaredBehaviorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.DeclaredBehavior");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBehaviorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cBehaviorBehaviorCrossReference_0_0 = (CrossReference)cBehaviorAssignment_0.eContents().get(0);
		private final RuleCall cBehaviorBehaviorIDTerminalRuleCall_0_0_1 = (RuleCall)cBehaviorBehaviorCrossReference_0_0.eContents().get(1);
		private final Assignment cOutcome_edgeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_1_0 = (RuleCall)cOutcome_edgeAssignment_1.eContents().get(0);
		
		//DeclaredBehavior behavior::DeclaredBehavior:
		//	behavior=[behavior::Behavior] outcome_edge+=UnconditionedEdge
		@Override public ParserRule getRule() { return rule; }

		//behavior=[behavior::Behavior] outcome_edge+=UnconditionedEdge
		public Group getGroup() { return cGroup; }

		//behavior=[behavior::Behavior]
		public Assignment getBehaviorAssignment_0() { return cBehaviorAssignment_0; }

		//[behavior::Behavior]
		public CrossReference getBehaviorBehaviorCrossReference_0_0() { return cBehaviorBehaviorCrossReference_0_0; }

		//ID
		public RuleCall getBehaviorBehaviorIDTerminalRuleCall_0_0_1() { return cBehaviorBehaviorIDTerminalRuleCall_0_0_1; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_1() { return cOutcome_edgeAssignment_1; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_1_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_1_0; }
	}

	public class UnconditionedEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.UnconditionedEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnconditionedEdgeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cTarget_nodeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cTarget_nodeDeclaredBehaviorParserRuleCall_2_0_0 = (RuleCall)cTarget_nodeAssignment_2_0.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTarget_nodeEndParserRuleCall_2_1_0 = (RuleCall)cTarget_nodeAssignment_2_1.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cTarget_nodeDecisionParserRuleCall_2_2_0 = (RuleCall)cTarget_nodeAssignment_2_2.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_3 = (Assignment)cAlternatives_2.eContents().get(3);
		private final RuleCall cTarget_nodeForkParserRuleCall_2_3_0 = (RuleCall)cTarget_nodeAssignment_2_3.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cTarget_nodeMergeParserRuleCall_2_4_0 = (RuleCall)cTarget_nodeAssignment_2_4.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cTarget_nodeJoinParserRuleCall_2_5_0 = (RuleCall)cTarget_nodeAssignment_2_5.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2_6 = (Assignment)cAlternatives_2.eContents().get(6);
		private final RuleCall cTarget_nodePrimitiveActivitiesParserRuleCall_2_6_0 = (RuleCall)cTarget_nodeAssignment_2_6.eContents().get(0);
		
		//UnconditionedEdge behavior::UnconditionedEdge:
		//	{behavior::UnconditionedEdge} name='->' (target_node+=DeclaredBehavior | target_node+=End | target_node+=Decision |
		//	target_node+=Fork | target_node+=Merge | target_node+=Join | target_node+=PrimitiveActivities)
		@Override public ParserRule getRule() { return rule; }

		//{behavior::UnconditionedEdge} name='->' (target_node+=DeclaredBehavior | target_node+=End | target_node+=Decision |
		//target_node+=Fork | target_node+=Merge | target_node+=Join | target_node+=PrimitiveActivities)
		public Group getGroup() { return cGroup; }

		//{behavior::UnconditionedEdge}
		public Action getUnconditionedEdgeAction_0() { return cUnconditionedEdgeAction_0; }

		//name='->'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'->'
		public Keyword getNameHyphenMinusGreaterThanSignKeyword_1_0() { return cNameHyphenMinusGreaterThanSignKeyword_1_0; }

		//(target_node+=DeclaredBehavior | target_node+=End | target_node+=Decision | target_node+=Fork | target_node+=Merge |
		//target_node+=Join | target_node+=PrimitiveActivities)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//target_node+=DeclaredBehavior
		public Assignment getTarget_nodeAssignment_2_0() { return cTarget_nodeAssignment_2_0; }

		//DeclaredBehavior
		public RuleCall getTarget_nodeDeclaredBehaviorParserRuleCall_2_0_0() { return cTarget_nodeDeclaredBehaviorParserRuleCall_2_0_0; }

		//target_node+=End
		public Assignment getTarget_nodeAssignment_2_1() { return cTarget_nodeAssignment_2_1; }

		//End
		public RuleCall getTarget_nodeEndParserRuleCall_2_1_0() { return cTarget_nodeEndParserRuleCall_2_1_0; }

		//target_node+=Decision
		public Assignment getTarget_nodeAssignment_2_2() { return cTarget_nodeAssignment_2_2; }

		//Decision
		public RuleCall getTarget_nodeDecisionParserRuleCall_2_2_0() { return cTarget_nodeDecisionParserRuleCall_2_2_0; }

		//target_node+=Fork
		public Assignment getTarget_nodeAssignment_2_3() { return cTarget_nodeAssignment_2_3; }

		//Fork
		public RuleCall getTarget_nodeForkParserRuleCall_2_3_0() { return cTarget_nodeForkParserRuleCall_2_3_0; }

		//target_node+=Merge
		public Assignment getTarget_nodeAssignment_2_4() { return cTarget_nodeAssignment_2_4; }

		//Merge
		public RuleCall getTarget_nodeMergeParserRuleCall_2_4_0() { return cTarget_nodeMergeParserRuleCall_2_4_0; }

		//target_node+=Join
		public Assignment getTarget_nodeAssignment_2_5() { return cTarget_nodeAssignment_2_5; }

		//Join
		public RuleCall getTarget_nodeJoinParserRuleCall_2_5_0() { return cTarget_nodeJoinParserRuleCall_2_5_0; }

		//target_node+=PrimitiveActivities
		public Assignment getTarget_nodeAssignment_2_6() { return cTarget_nodeAssignment_2_6; }

		//PrimitiveActivities
		public RuleCall getTarget_nodePrimitiveActivitiesParserRuleCall_2_6_0() { return cTarget_nodePrimitiveActivitiesParserRuleCall_2_6_0; }
	}

	public class TrueEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.TrueEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfTrueEdgeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameThenKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTarget_nodeNodeParserRuleCall_2_0 = (RuleCall)cTarget_nodeAssignment_2.eContents().get(0);
		
		//TrueEdge behavior::IfTrueEdge:
		//	{behavior::IfTrueEdge} name='then' target_node+=Node
		@Override public ParserRule getRule() { return rule; }

		//{behavior::IfTrueEdge} name='then' target_node+=Node
		public Group getGroup() { return cGroup; }

		//{behavior::IfTrueEdge}
		public Action getIfTrueEdgeAction_0() { return cIfTrueEdgeAction_0; }

		//name='then'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'then'
		public Keyword getNameThenKeyword_1_0() { return cNameThenKeyword_1_0; }

		//target_node+=Node
		public Assignment getTarget_nodeAssignment_2() { return cTarget_nodeAssignment_2; }

		//Node
		public RuleCall getTarget_nodeNodeParserRuleCall_2_0() { return cTarget_nodeNodeParserRuleCall_2_0; }
	}

	public class FalseEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.FalseEdge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfFalseEdgeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameElseKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cTarget_nodeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTarget_nodeNodeParserRuleCall_2_0 = (RuleCall)cTarget_nodeAssignment_2.eContents().get(0);
		
		//FalseEdge behavior::IfFalseEdge:
		//	{behavior::IfFalseEdge} name='else' target_node+=Node
		@Override public ParserRule getRule() { return rule; }

		//{behavior::IfFalseEdge} name='else' target_node+=Node
		public Group getGroup() { return cGroup; }

		//{behavior::IfFalseEdge}
		public Action getIfFalseEdgeAction_0() { return cIfFalseEdgeAction_0; }

		//name='else'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'else'
		public Keyword getNameElseKeyword_1_0() { return cNameElseKeyword_1_0; }

		//target_node+=Node
		public Assignment getTarget_nodeAssignment_2() { return cTarget_nodeAssignment_2; }

		//Node
		public RuleCall getTarget_nodeNodeParserRuleCall_2_0() { return cTarget_nodeNodeParserRuleCall_2_0; }
	}

	public class DecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Decision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecisionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDecideKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cBooleanexpressionAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cBooleanexpressionBooleanNamedFCExpressionParserRuleCall_5_0_0 = (RuleCall)cBooleanexpressionAssignment_5_0.eContents().get(0);
		private final Assignment cBooleanexpressionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBooleanexpressionBooleanLogicFCExpressionParserRuleCall_5_1_0 = (RuleCall)cBooleanexpressionAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cOutcome_edgeAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cOutcome_edgeTrueEdgeParserRuleCall_7_0_0 = (RuleCall)cOutcome_edgeAssignment_7_0.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOutcome_edgeFalseEdgeParserRuleCall_7_1_0 = (RuleCall)cOutcome_edgeAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Decision behavior::Decision:
		//	{behavior::Decision} name='Decide ' '{' 'if' '(' (booleanexpression+=BooleanNamedFCExpression
		//	booleanexpression+=BooleanLogicFCExpression*)?
		//	')' (outcome_edge+=TrueEdge outcome_edge+=FalseEdge?)
		//	'}'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Decision} name='Decide ' '{' 'if' '(' (booleanexpression+=BooleanNamedFCExpression
		//booleanexpression+=BooleanLogicFCExpression*)? ')' (outcome_edge+=TrueEdge outcome_edge+=FalseEdge?) '}'
		public Group getGroup() { return cGroup; }

		//{behavior::Decision}
		public Action getDecisionAction_0() { return cDecisionAction_0; }

		//name='Decide '
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Decide '
		public Keyword getNameDecideKeyword_1_0() { return cNameDecideKeyword_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'if'
		public Keyword getIfKeyword_3() { return cIfKeyword_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(booleanexpression+=BooleanNamedFCExpression booleanexpression+=BooleanLogicFCExpression*)?
		public Group getGroup_5() { return cGroup_5; }

		//booleanexpression+=BooleanNamedFCExpression
		public Assignment getBooleanexpressionAssignment_5_0() { return cBooleanexpressionAssignment_5_0; }

		//BooleanNamedFCExpression
		public RuleCall getBooleanexpressionBooleanNamedFCExpressionParserRuleCall_5_0_0() { return cBooleanexpressionBooleanNamedFCExpressionParserRuleCall_5_0_0; }

		//booleanexpression+=BooleanLogicFCExpression*
		public Assignment getBooleanexpressionAssignment_5_1() { return cBooleanexpressionAssignment_5_1; }

		//BooleanLogicFCExpression
		public RuleCall getBooleanexpressionBooleanLogicFCExpressionParserRuleCall_5_1_0() { return cBooleanexpressionBooleanLogicFCExpressionParserRuleCall_5_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//(outcome_edge+=TrueEdge outcome_edge+=FalseEdge?)
		public Group getGroup_7() { return cGroup_7; }

		//outcome_edge+=TrueEdge
		public Assignment getOutcome_edgeAssignment_7_0() { return cOutcome_edgeAssignment_7_0; }

		//TrueEdge
		public RuleCall getOutcome_edgeTrueEdgeParserRuleCall_7_0_0() { return cOutcome_edgeTrueEdgeParserRuleCall_7_0_0; }

		//outcome_edge+=FalseEdge?
		public Assignment getOutcome_edgeAssignment_7_1() { return cOutcome_edgeAssignment_7_1; }

		//FalseEdge
		public RuleCall getOutcome_edgeFalseEdgeParserRuleCall_7_1_0() { return cOutcome_edgeFalseEdgeParserRuleCall_7_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class JoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Join");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameJoinWithKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0 = (RuleCall)cOutcome_edgeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAndGoesToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutcome_edgeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_6_0 = (RuleCall)cOutcome_edgeAssignment_6.eContents().get(0);
		
		//Join behavior::Join:
		//	{behavior::Join} name='Join with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		//	'and goes to' outcome_edge+=UnconditionedEdge
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Join} name='Join with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		//'and goes to' outcome_edge+=UnconditionedEdge
		public Group getGroup() { return cGroup; }

		//{behavior::Join}
		public Action getJoinAction_0() { return cJoinAction_0; }

		//name='Join with ('
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Join with ('
		public Keyword getNameJoinWithKeyword_1_0() { return cNameJoinWithKeyword_1_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }

		//("," outcome_edge+=UnconditionedEdge)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_3_1() { return cOutcome_edgeAssignment_3_1; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'and goes to'
		public Keyword getAndGoesToKeyword_5() { return cAndGoesToKeyword_5; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_6() { return cOutcome_edgeAssignment_6; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_6_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_6_0; }
	}

	public class ForkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Fork");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForkAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameForkIntoKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0 = (RuleCall)cOutcome_edgeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Fork behavior::Fork:
		//	{behavior::Fork} name='Fork into (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Fork} name='Fork into (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		public Group getGroup() { return cGroup; }

		//{behavior::Fork}
		public Action getForkAction_0() { return cForkAction_0; }

		//name='Fork into ('
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Fork into ('
		public Keyword getNameForkIntoKeyword_1_0() { return cNameForkIntoKeyword_1_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }

		//("," outcome_edge+=UnconditionedEdge)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_3_1() { return cOutcome_edgeAssignment_3_1; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MergeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Merge");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMergeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameMergeWithKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0 = (RuleCall)cOutcome_edgeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAndGoesToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOutcome_edgeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_6_0 = (RuleCall)cOutcome_edgeAssignment_6.eContents().get(0);
		
		//Merge behavior::Merge:
		//	{behavior::Merge} name='Merge with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		//	'and goes to' outcome_edge+=UnconditionedEdge
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Merge} name='Merge with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
		//'and goes to' outcome_edge+=UnconditionedEdge
		public Group getGroup() { return cGroup; }

		//{behavior::Merge}
		public Action getMergeAction_0() { return cMergeAction_0; }

		//name='Merge with ('
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Merge with ('
		public Keyword getNameMergeWithKeyword_1_0() { return cNameMergeWithKeyword_1_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }

		//("," outcome_edge+=UnconditionedEdge)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_3_1() { return cOutcome_edgeAssignment_3_1; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_3_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'and goes to'
		public Keyword getAndGoesToKeyword_5() { return cAndGoesToKeyword_5; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_6() { return cOutcome_edgeAssignment_6; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_6_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_6_0; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameMoveToKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cLocationexpressionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cLocationexpressionDeclaredLocalVariableParserRuleCall_3_0_0 = (RuleCall)cLocationexpressionAssignment_3_0.eContents().get(0);
		private final Assignment cLocationexpressionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cLocationexpressionLocationNamedFCExpressionParserRuleCall_3_1_0 = (RuleCall)cLocationexpressionAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOutcome_edgeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_5_0 = (RuleCall)cOutcome_edgeAssignment_5.eContents().get(0);
		
		//Move behavior::Move:
		//	{behavior::Move} name='Move to ' '{' (locationexpression=DeclaredLocalVariable |
		//	locationexpression=LocationNamedFCExpression)
		//	'}'
		//	outcome_edge+=UnconditionedEdge
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Move} name='Move to ' '{' (locationexpression=DeclaredLocalVariable |
		//locationexpression=LocationNamedFCExpression) '}' outcome_edge+=UnconditionedEdge
		public Group getGroup() { return cGroup; }

		//{behavior::Move}
		public Action getMoveAction_0() { return cMoveAction_0; }

		//name='Move to '
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Move to '
		public Keyword getNameMoveToKeyword_1_0() { return cNameMoveToKeyword_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(locationexpression=DeclaredLocalVariable | locationexpression=LocationNamedFCExpression)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//locationexpression=DeclaredLocalVariable
		public Assignment getLocationexpressionAssignment_3_0() { return cLocationexpressionAssignment_3_0; }

		//DeclaredLocalVariable
		public RuleCall getLocationexpressionDeclaredLocalVariableParserRuleCall_3_0_0() { return cLocationexpressionDeclaredLocalVariableParserRuleCall_3_0_0; }

		//locationexpression=LocationNamedFCExpression
		public Assignment getLocationexpressionAssignment_3_1() { return cLocationexpressionAssignment_3_1; }

		//LocationNamedFCExpression
		public RuleCall getLocationexpressionLocationNamedFCExpressionParserRuleCall_3_1_0() { return cLocationexpressionLocationNamedFCExpressionParserRuleCall_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//outcome_edge+=UnconditionedEdge
		public Assignment getOutcome_edgeAssignment_5() { return cOutcome_edgeAssignment_5; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_5_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_5_0; }
	}

	public class DieElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Die");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDieAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameDieKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		
		//Die behavior::Die:
		//	{behavior::Die} name='Die'
		//	outcome_edge+=UnconditionedEdge?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Die} name='Die' outcome_edge+=UnconditionedEdge?
		public Group getGroup() { return cGroup; }

		//{behavior::Die}
		public Action getDieAction_0() { return cDieAction_0; }

		//name='Die'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Die'
		public Keyword getNameDieKeyword_1_0() { return cNameDieKeyword_1_0; }

		//outcome_edge+=UnconditionedEdge?
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }
	}

	public class ReproduceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Reproduce");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReproduceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNameReproduceKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOffspring_quantityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOffspring_quantityConstantExpressionParserRuleCall_3_0 = (RuleCall)cOffspring_quantityAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDeclaredattributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_1_0 = (RuleCall)cDeclaredattributesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cCommaKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cDeclaredattributesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_2_1_0 = (RuleCall)cDeclaredattributesAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cPlacedOnKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInitial_locationAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cInitial_locationLocationNamedFCExpressionParserRuleCall_6_1_0 = (RuleCall)cInitial_locationAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWhereKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cOccupiedExpressionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cOccupiedExpressionBooleanIsOccuppiedLocationFCExpressionParserRuleCall_7_1_0 = (RuleCall)cOccupiedExpressionAssignment_7_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_8_0 = (RuleCall)cOutcome_edgeAssignment_8.eContents().get(0);
		
		//Reproduce behavior::Reproduce:
		//	{behavior::Reproduce} name='Reproduce' '(' offspring_quantity=ConstantExpression ')' ('with '
		//	declaredattributes+=SetAttributeNamedFCExpression (',' declaredattributes+=SetAttributeNamedFCExpression)*)
		//	('placed on' initial_location=LocationNamedFCExpression) ('where'
		//	occupiedExpression+=BooleanIsOccuppiedLocationFCExpression)?
		//	outcome_edge+=UnconditionedEdge?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Reproduce} name='Reproduce' '(' offspring_quantity=ConstantExpression ')' ('with '
		//declaredattributes+=SetAttributeNamedFCExpression (',' declaredattributes+=SetAttributeNamedFCExpression)*)
		//('placed on' initial_location=LocationNamedFCExpression) ('where'
		//occupiedExpression+=BooleanIsOccuppiedLocationFCExpression)? outcome_edge+=UnconditionedEdge?
		public Group getGroup() { return cGroup; }

		//{behavior::Reproduce}
		public Action getReproduceAction_0() { return cReproduceAction_0; }

		//name='Reproduce'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//'Reproduce'
		public Keyword getNameReproduceKeyword_1_0() { return cNameReproduceKeyword_1_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//offspring_quantity=ConstantExpression
		public Assignment getOffspring_quantityAssignment_3() { return cOffspring_quantityAssignment_3; }

		//ConstantExpression
		public RuleCall getOffspring_quantityConstantExpressionParserRuleCall_3_0() { return cOffspring_quantityConstantExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//('with ' declaredattributes+=SetAttributeNamedFCExpression (',' declaredattributes+=SetAttributeNamedFCExpression)*)
		public Group getGroup_5() { return cGroup_5; }

		//'with '
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//declaredattributes+=SetAttributeNamedFCExpression
		public Assignment getDeclaredattributesAssignment_5_1() { return cDeclaredattributesAssignment_5_1; }

		//SetAttributeNamedFCExpression
		public RuleCall getDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_1_0() { return cDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_1_0; }

		//(',' declaredattributes+=SetAttributeNamedFCExpression)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//','
		public Keyword getCommaKeyword_5_2_0() { return cCommaKeyword_5_2_0; }

		//declaredattributes+=SetAttributeNamedFCExpression
		public Assignment getDeclaredattributesAssignment_5_2_1() { return cDeclaredattributesAssignment_5_2_1; }

		//SetAttributeNamedFCExpression
		public RuleCall getDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_2_1_0() { return cDeclaredattributesSetAttributeNamedFCExpressionParserRuleCall_5_2_1_0; }

		//('placed on' initial_location=LocationNamedFCExpression)
		public Group getGroup_6() { return cGroup_6; }

		//'placed on'
		public Keyword getPlacedOnKeyword_6_0() { return cPlacedOnKeyword_6_0; }

		//initial_location=LocationNamedFCExpression
		public Assignment getInitial_locationAssignment_6_1() { return cInitial_locationAssignment_6_1; }

		//LocationNamedFCExpression
		public RuleCall getInitial_locationLocationNamedFCExpressionParserRuleCall_6_1_0() { return cInitial_locationLocationNamedFCExpressionParserRuleCall_6_1_0; }

		//('where' occupiedExpression+=BooleanIsOccuppiedLocationFCExpression)?
		public Group getGroup_7() { return cGroup_7; }

		//'where'
		public Keyword getWhereKeyword_7_0() { return cWhereKeyword_7_0; }

		//occupiedExpression+=BooleanIsOccuppiedLocationFCExpression
		public Assignment getOccupiedExpressionAssignment_7_1() { return cOccupiedExpressionAssignment_7_1; }

		//BooleanIsOccuppiedLocationFCExpression
		public RuleCall getOccupiedExpressionBooleanIsOccuppiedLocationFCExpressionParserRuleCall_7_1_0() { return cOccupiedExpressionBooleanIsOccuppiedLocationFCExpressionParserRuleCall_7_1_0; }

		//outcome_edge+=UnconditionedEdge?
		public Assignment getOutcome_edgeAssignment_8() { return cOutcome_edgeAssignment_8; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_8_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_8_0; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Add");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAddAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameAddKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionFunctionCallExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cToKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cToAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cToAttributeDeclaredAttributesParserRuleCall_2_0 = (RuleCall)cToAttributeAssignment_2.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_3_0 = (RuleCall)cOutcome_edgeAssignment_3.eContents().get(0);
		
		//Add behavior::Add:
		//	{behavior::Add} (name='Add' expression+=FunctionCallExpression 'to') toAttribute=DeclaredAttributes
		//	outcome_edge+=UnconditionedEdge?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Add} (name='Add' expression+=FunctionCallExpression 'to') toAttribute=DeclaredAttributes
		//outcome_edge+=UnconditionedEdge?
		public Group getGroup() { return cGroup; }

		//{behavior::Add}
		public Action getAddAction_0() { return cAddAction_0; }

		//(name='Add' expression+=FunctionCallExpression 'to')
		public Group getGroup_1() { return cGroup_1; }

		//name='Add'
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//'Add'
		public Keyword getNameAddKeyword_1_0_0() { return cNameAddKeyword_1_0_0; }

		//expression+=FunctionCallExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//FunctionCallExpression
		public RuleCall getExpressionFunctionCallExpressionParserRuleCall_1_1_0() { return cExpressionFunctionCallExpressionParserRuleCall_1_1_0; }

		//'to'
		public Keyword getToKeyword_1_2() { return cToKeyword_1_2; }

		//toAttribute=DeclaredAttributes
		public Assignment getToAttributeAssignment_2() { return cToAttributeAssignment_2; }

		//DeclaredAttributes
		public RuleCall getToAttributeDeclaredAttributesParserRuleCall_2_0() { return cToAttributeDeclaredAttributesParserRuleCall_2_0; }

		//outcome_edge+=UnconditionedEdge?
		public Assignment getOutcome_edgeAssignment_3() { return cOutcome_edgeAssignment_3; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_3_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_3_0; }
	}

	public class RemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Remove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRemoveAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameRemoveKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionFunctionCallExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		private final Keyword cFromKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cFromAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFromDeclaredAttributesParserRuleCall_2_0 = (RuleCall)cFromAssignment_2.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_3_0 = (RuleCall)cOutcome_edgeAssignment_3.eContents().get(0);
		
		//Remove behavior::Remove:
		//	{behavior::Remove} (name='Remove' expression+=FunctionCallExpression 'from ') from=DeclaredAttributes
		//	outcome_edge+=UnconditionedEdge?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::Remove} (name='Remove' expression+=FunctionCallExpression 'from ') from=DeclaredAttributes
		//outcome_edge+=UnconditionedEdge?
		public Group getGroup() { return cGroup; }

		//{behavior::Remove}
		public Action getRemoveAction_0() { return cRemoveAction_0; }

		//(name='Remove' expression+=FunctionCallExpression 'from ')
		public Group getGroup_1() { return cGroup_1; }

		//name='Remove'
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//'Remove'
		public Keyword getNameRemoveKeyword_1_0_0() { return cNameRemoveKeyword_1_0_0; }

		//expression+=FunctionCallExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//FunctionCallExpression
		public RuleCall getExpressionFunctionCallExpressionParserRuleCall_1_1_0() { return cExpressionFunctionCallExpressionParserRuleCall_1_1_0; }

		//'from '
		public Keyword getFromKeyword_1_2() { return cFromKeyword_1_2; }

		//from=DeclaredAttributes
		public Assignment getFromAssignment_2() { return cFromAssignment_2; }

		//DeclaredAttributes
		public RuleCall getFromDeclaredAttributesParserRuleCall_2_0() { return cFromDeclaredAttributesParserRuleCall_2_0; }

		//outcome_edge+=UnconditionedEdge?
		public Assignment getOutcome_edgeAssignment_3() { return cOutcome_edgeAssignment_3; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_3_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_3_0; }
	}

	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSetVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameSetKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cAssignmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignmentAssignmentParserRuleCall_1_1_0 = (RuleCall)cAssignmentAssignment_1_1.eContents().get(0);
		private final Assignment cOutcome_edgeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0 = (RuleCall)cOutcome_edgeAssignment_2.eContents().get(0);
		
		//Set behavior::SetVariable:
		//	{behavior::SetVariable} (name='Set' assignment=Assignment) outcome_edge+=UnconditionedEdge?
		@Override public ParserRule getRule() { return rule; }

		//{behavior::SetVariable} (name='Set' assignment=Assignment) outcome_edge+=UnconditionedEdge?
		public Group getGroup() { return cGroup; }

		//{behavior::SetVariable}
		public Action getSetVariableAction_0() { return cSetVariableAction_0; }

		//(name='Set' assignment=Assignment)
		public Group getGroup_1() { return cGroup_1; }

		//name='Set'
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//'Set'
		public Keyword getNameSetKeyword_1_0_0() { return cNameSetKeyword_1_0_0; }

		//assignment=Assignment
		public Assignment getAssignmentAssignment_1_1() { return cAssignmentAssignment_1_1; }

		//Assignment
		public RuleCall getAssignmentAssignmentParserRuleCall_1_1_0() { return cAssignmentAssignmentParserRuleCall_1_1_0; }

		//outcome_edge+=UnconditionedEdge?
		public Assignment getOutcome_edgeAssignment_2() { return cOutcome_edgeAssignment_2; }

		//UnconditionedEdge
		public RuleCall getOutcome_edgeUnconditionedEdgeParserRuleCall_2_0() { return cOutcome_edgeUnconditionedEdgeParserRuleCall_2_0; }
	}
	
	
	public class TypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.cirad.dsl.xtext.Behaviordsl.TypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStringStringKeyword_0_0 = (Keyword)cStringEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFloatFloatKeyword_2_0 = (Keyword)cFloatEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBooleanBooleanKeyword_3_0 = (Keyword)cBooleanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLocationEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLocationLocationKeyword_4_0 = (Keyword)cLocationEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLocationsetEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLocationsetLocationSetKeyword_5_0 = (Keyword)cLocationsetEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEntityEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEntityEntityKeyword_6_0 = (Keyword)cEntityEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cEntitysetEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cEntitysetEntitySetKeyword_7_0 = (Keyword)cEntitysetEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum TypeEnum returns behavior::TypeEnum:
		//	string='String' | integer='Int' | float='Float' | boolean='Boolean' |
		//	location='Location' | locationset='LocationSet' | entity='Entity' | entityset='EntitySet';
		public EnumRule getRule() { return rule; }

		//string='String' | integer='Int' | float='Float' | boolean='Boolean' | location='Location' | locationset='LocationSet' |
		//entity='Entity' | entityset='EntitySet'
		public Alternatives getAlternatives() { return cAlternatives; }

		//string='String'
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_0() { return cStringEnumLiteralDeclaration_0; }

		//'String'
		public Keyword getStringStringKeyword_0_0() { return cStringStringKeyword_0_0; }

		//integer='Int'
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }

		//'Int'
		public Keyword getIntegerIntKeyword_1_0() { return cIntegerIntKeyword_1_0; }

		//float='Float'
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_2() { return cFloatEnumLiteralDeclaration_2; }

		//'Float'
		public Keyword getFloatFloatKeyword_2_0() { return cFloatFloatKeyword_2_0; }

		//boolean='Boolean'
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_3() { return cBooleanEnumLiteralDeclaration_3; }

		//'Boolean'
		public Keyword getBooleanBooleanKeyword_3_0() { return cBooleanBooleanKeyword_3_0; }

		//location='Location'
		public EnumLiteralDeclaration getLocationEnumLiteralDeclaration_4() { return cLocationEnumLiteralDeclaration_4; }

		//'Location'
		public Keyword getLocationLocationKeyword_4_0() { return cLocationLocationKeyword_4_0; }

		//locationset='LocationSet'
		public EnumLiteralDeclaration getLocationsetEnumLiteralDeclaration_5() { return cLocationsetEnumLiteralDeclaration_5; }

		//'LocationSet'
		public Keyword getLocationsetLocationSetKeyword_5_0() { return cLocationsetLocationSetKeyword_5_0; }

		//entity='Entity'
		public EnumLiteralDeclaration getEntityEnumLiteralDeclaration_6() { return cEntityEnumLiteralDeclaration_6; }

		//'Entity'
		public Keyword getEntityEntityKeyword_6_0() { return cEntityEntityKeyword_6_0; }

		//entityset='EntitySet'
		public EnumLiteralDeclaration getEntitysetEnumLiteralDeclaration_7() { return cEntitysetEnumLiteralDeclaration_7; }

		//'EntitySet'
		public Keyword getEntitysetEntitySetKeyword_7_0() { return cEntitysetEntitySetKeyword_7_0; }
	}
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final InitEntityElements pInitEntity;
	private final AssignmentElements pAssignment;
	private final InitSpaceElements pInitSpace;
	private final ParameterClassElements pParameterClass;
	private final AttributeClassElements pAttributeClass;
	private final LocalVariableClassElements pLocalVariableClass;
	private final BehaviorElements pBehavior;
	private final EdgeElements pEdge;
	private final NodeElements pNode;
	private final ControlNodeElements pControlNode;
	private final ExcecutableNodeElements pExcecutableNode;
	private final PrimitiveActivitiesElements pPrimitiveActivities;
	private final QualifiedNameElements pQualifiedName;
	private final EquationBehaviourElements pEquationBehaviour;
	private final ActivityBehaviorElements pActivityBehavior;
	private final ActivityDiagramBehaviorElements pActivityDiagramBehavior;
	private final EquationElements pEquation;
	private final NumericNamedFunctionElements pNumericNamedFunction;
	private final ArithmeticFunctionElements pArithmeticFunction;
	private final ArithmeticFunctionMultiplicationElements pArithmeticFunctionMultiplication;
	private final ArithmeticFunctionPlusElements pArithmeticFunctionPlus;
	private final MathFunctionElements pMathFunction;
	private final UnaryMathBinaryFunctionElements pUnaryMathBinaryFunction;
	private final CountFunctionElements pCountFunction;
	private final LocationNamedFunctionElements pLocationNamedFunction;
	private final SimpleLocationNamedFunctionElements pSimpleLocationNamedFunction;
	private final MaxOneOfLocationFunctionElements pMaxOneOfLocationFunction;
	private final SelectConditionalLocationFunctionElements pSelectConditionalLocationFunction;
	private final OneOfLocationFunctionElements pOneOfLocationFunction;
	private final LocationPrimitiveFunctionElements pLocationPrimitiveFunction;
	private final LocationSetNamedFunctionElements pLocationSetNamedFunction;
	private final NeighborhoodLocationFunctionElements pNeighborhoodLocationFunction;
	private final SpaceLocationFunctionElements pSpaceLocationFunction;
	private final UnionLocationFunctionElements pUnionLocationFunction;
	private final BooleanNamedFunctionElements pBooleanNamedFunction;
	private final BooleanPrimitiveFunctionElements pBooleanPrimitiveFunction;
	private final BooleanSetFunctionElements pBooleanSetFunction;
	private final BooleanGetFunctionElements pBooleanGetFunction;
	private final BooleanNumericComparisonFunctionElements pBooleanNumericComparisonFunction;
	private final BooleanIsOccuppiedLocationFunctionElements pBooleanIsOccuppiedLocationFunction;
	private final BooleanLogicFunctionElements pBooleanLogicFunction;
	private final BooleanUnaryLogicFunctionElements pBooleanUnaryLogicFunction;
	private final BooleanANDBinaryLogicFunctionElements pBooleanANDBinaryLogicFunction;
	private final BooleanORBinaryLogicFunctionElements pBooleanORBinaryLogicFunction;
	private final EntityNamedFunctionElements pEntityNamedFunction;
	private final EntityQuantifierFunctionElements pEntityQuantifierFunction;
	private final EntitySetConditionalFunctionElements pEntitySetConditionalFunction;
	private final EntityAnyQuantifierFunctionElements pEntityAnyQuantifierFunction;
	private final EntityAllQuantifierFunctionElements pEntityAllQuantifierFunction;
	private final EntitySetCreateFunctionElements pEntitySetCreateFunction;
	private final EntitySetOnLocationFunctionElements pEntitySetOnLocationFunction;
	private final SpaceInitFunctionElements pSpaceInitFunction;
	private final EntityOneOfFunctionElements pEntityOneOfFunction;
	private final GetNamedFunctionElements pGetNamedFunction;
	private final GetVariableFunctionElements pGetVariableFunction;
	private final GetEntityNamedFunctionElements pGetEntityNamedFunction;
	private final GetEntityFromLocationNamedFunctionElements pGetEntityFromLocationNamedFunction;
	private final FunctionCallExpressionElements pFunctionCallExpression;
	private final AnonymousFunctionElements pAnonymousFunction;
	private final BooleanNamedFCExpressionElements pBooleanNamedFCExpression;
	private final BooleanQuantifiedEntitySetFCEpressionElements pBooleanQuantifiedEntitySetFCEpression;
	private final BooleanPrimitiveFCExpressionElements pBooleanPrimitiveFCExpression;
	private final BooleanSetValueFCExpressionElements pBooleanSetValueFCExpression;
	private final BooleanGetValueFCExpressionElements pBooleanGetValueFCExpression;
	private final BooleanNumericComparisonFCExpressionElements pBooleanNumericComparisonFCExpression;
	private final BooleanIsOccuppiedLocationFCExpressionElements pBooleanIsOccuppiedLocationFCExpression;
	private final BooleanLogicFCExpressionElements pBooleanLogicFCExpression;
	private final AndExprElements pAndExpr;
	private final OrExprElements pOrExpr;
	private final PrimaryBooleanExpressionElements pPrimaryBooleanExpression;
	private final BooleanUnaryLogicFCExpressionElements pBooleanUnaryLogicFCExpression;
	private final LocationNamedFCExpressionElements pLocationNamedFCExpression;
	private final LocationSetNamedFCExpressionElements pLocationSetNamedFCExpression;
	private final UnionLocationFCExpressionElements pUnionLocationFCExpression;
	private final NeighborFCExpressionElements pNeighborFCExpression;
	private final SpaceFCExpressionElements pSpaceFCExpression;
	private final SpaceInitFCExpressionElements pSpaceInitFCExpression;
	private final EntityNamedFCExpressionElements pEntityNamedFCExpression;
	private final EntitySetCreateFCExpressionElements pEntitySetCreateFCExpression;
	private final EntityOneOfFCExpressionElements pEntityOneOfFCExpression;
	private final EntitySetFunctionCallExpressionElements pEntitySetFunctionCallExpression;
	private final EntitySetOnLocationFCExpressionElements pEntitySetOnLocationFCExpression;
	private final EntitySetConditionalFCExpressionElements pEntitySetConditionalFCExpression;
	private final NumericNamedFCExpressionElements pNumericNamedFCExpression;
	private final ArithmeticFCExpressionElements pArithmeticFCExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryArithmeticExpressionElements pPrimaryArithmeticExpression;
	private final ConstantExpressionElements pConstantExpression;
	private final CountFCExpressionElements pCountFCExpression;
	private final CountVariableFCExpressionElements pCountVariableFCExpression;
	private final CountEntityFCExpressionElements pCountEntityFCExpression;
	private final MathFCExpressionElements pMathFCExpression;
	private final GetNamedFCExpressionElements pGetNamedFCExpression;
	private final GetAttributeFromEntityFCExpressionElements pGetAttributeFromEntityFCExpression;
	private final GetLocalVariableFCExpressionElements pGetLocalVariableFCExpression;
	private final GetEntityNameFCExpressionElements pGetEntityNameFCExpression;
	private final GetParametersFCExpressionElements pGetParametersFCExpression;
	private final MaxOneOfLocationFCExpressionElements pMaxOneOfLocationFCExpression;
	private final OneOfLocationFCExpressionElements pOneOfLocationFCExpression;
	private final SelectConditionalLocationFCExpressionElements pSelectConditionalLocationFCExpression;
	private final LocationPrimitiveFCExpressionElements pLocationPrimitiveFCExpression;
	private final SetNamedFunctionExpressionElements pSetNamedFunctionExpression;
	private final SetAttributeNamedFCExpressionElements pSetAttributeNamedFCExpression;
	private final SetLocationNamedFCExpressionElements pSetLocationNamedFCExpression;
	private final DeclaredLocalVariableElements pDeclaredLocalVariable;
	private final DeclaredAttributesElements pDeclaredAttributes;
	private final DeclaredParameterElements pDeclaredParameter;
	private final DeclaredVariableElements pDeclaredVariable;
	private final DeclaredEntitiesElements pDeclaredEntities;
	private final TypeElements pType;
	private final TypeEnumElements eTypeEnum;
	private final FloatElements pFloat;
	private final StartElements pStart;
	private final EndElements pEnd;
	private final DeclaredBehaviorElements pDeclaredBehavior;
	private final UnconditionedEdgeElements pUnconditionedEdge;
	private final TrueEdgeElements pTrueEdge;
	private final FalseEdgeElements pFalseEdge;
	private final DecisionElements pDecision;
	private final JoinElements pJoin;
	private final ForkElements pFork;
	private final MergeElements pMerge;
	private final MoveElements pMove;
	private final DieElements pDie;
	private final ReproduceElements pReproduce;
	private final AddElements pAdd;
	private final RemoveElements pRemove;
	private final SetElements pSet;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehaviordslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pInitEntity = new InitEntityElements();
		this.pAssignment = new AssignmentElements();
		this.pInitSpace = new InitSpaceElements();
		this.pParameterClass = new ParameterClassElements();
		this.pAttributeClass = new AttributeClassElements();
		this.pLocalVariableClass = new LocalVariableClassElements();
		this.pBehavior = new BehaviorElements();
		this.pEdge = new EdgeElements();
		this.pNode = new NodeElements();
		this.pControlNode = new ControlNodeElements();
		this.pExcecutableNode = new ExcecutableNodeElements();
		this.pPrimitiveActivities = new PrimitiveActivitiesElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pEquationBehaviour = new EquationBehaviourElements();
		this.pActivityBehavior = new ActivityBehaviorElements();
		this.pActivityDiagramBehavior = new ActivityDiagramBehaviorElements();
		this.pEquation = new EquationElements();
		this.pNumericNamedFunction = new NumericNamedFunctionElements();
		this.pArithmeticFunction = new ArithmeticFunctionElements();
		this.pArithmeticFunctionMultiplication = new ArithmeticFunctionMultiplicationElements();
		this.pArithmeticFunctionPlus = new ArithmeticFunctionPlusElements();
		this.pMathFunction = new MathFunctionElements();
		this.pUnaryMathBinaryFunction = new UnaryMathBinaryFunctionElements();
		this.pCountFunction = new CountFunctionElements();
		this.pLocationNamedFunction = new LocationNamedFunctionElements();
		this.pSimpleLocationNamedFunction = new SimpleLocationNamedFunctionElements();
		this.pMaxOneOfLocationFunction = new MaxOneOfLocationFunctionElements();
		this.pSelectConditionalLocationFunction = new SelectConditionalLocationFunctionElements();
		this.pOneOfLocationFunction = new OneOfLocationFunctionElements();
		this.pLocationPrimitiveFunction = new LocationPrimitiveFunctionElements();
		this.pLocationSetNamedFunction = new LocationSetNamedFunctionElements();
		this.pNeighborhoodLocationFunction = new NeighborhoodLocationFunctionElements();
		this.pSpaceLocationFunction = new SpaceLocationFunctionElements();
		this.pUnionLocationFunction = new UnionLocationFunctionElements();
		this.pBooleanNamedFunction = new BooleanNamedFunctionElements();
		this.pBooleanPrimitiveFunction = new BooleanPrimitiveFunctionElements();
		this.pBooleanSetFunction = new BooleanSetFunctionElements();
		this.pBooleanGetFunction = new BooleanGetFunctionElements();
		this.pBooleanNumericComparisonFunction = new BooleanNumericComparisonFunctionElements();
		this.pBooleanIsOccuppiedLocationFunction = new BooleanIsOccuppiedLocationFunctionElements();
		this.pBooleanLogicFunction = new BooleanLogicFunctionElements();
		this.pBooleanUnaryLogicFunction = new BooleanUnaryLogicFunctionElements();
		this.pBooleanANDBinaryLogicFunction = new BooleanANDBinaryLogicFunctionElements();
		this.pBooleanORBinaryLogicFunction = new BooleanORBinaryLogicFunctionElements();
		this.pEntityNamedFunction = new EntityNamedFunctionElements();
		this.pEntityQuantifierFunction = new EntityQuantifierFunctionElements();
		this.pEntitySetConditionalFunction = new EntitySetConditionalFunctionElements();
		this.pEntityAnyQuantifierFunction = new EntityAnyQuantifierFunctionElements();
		this.pEntityAllQuantifierFunction = new EntityAllQuantifierFunctionElements();
		this.pEntitySetCreateFunction = new EntitySetCreateFunctionElements();
		this.pEntitySetOnLocationFunction = new EntitySetOnLocationFunctionElements();
		this.pSpaceInitFunction = new SpaceInitFunctionElements();
		this.pEntityOneOfFunction = new EntityOneOfFunctionElements();
		this.pGetNamedFunction = new GetNamedFunctionElements();
		this.pGetVariableFunction = new GetVariableFunctionElements();
		this.pGetEntityNamedFunction = new GetEntityNamedFunctionElements();
		this.pGetEntityFromLocationNamedFunction = new GetEntityFromLocationNamedFunctionElements();
		this.pFunctionCallExpression = new FunctionCallExpressionElements();
		this.pAnonymousFunction = new AnonymousFunctionElements();
		this.pBooleanNamedFCExpression = new BooleanNamedFCExpressionElements();
		this.pBooleanQuantifiedEntitySetFCEpression = new BooleanQuantifiedEntitySetFCEpressionElements();
		this.pBooleanPrimitiveFCExpression = new BooleanPrimitiveFCExpressionElements();
		this.pBooleanSetValueFCExpression = new BooleanSetValueFCExpressionElements();
		this.pBooleanGetValueFCExpression = new BooleanGetValueFCExpressionElements();
		this.pBooleanNumericComparisonFCExpression = new BooleanNumericComparisonFCExpressionElements();
		this.pBooleanIsOccuppiedLocationFCExpression = new BooleanIsOccuppiedLocationFCExpressionElements();
		this.pBooleanLogicFCExpression = new BooleanLogicFCExpressionElements();
		this.pAndExpr = new AndExprElements();
		this.pOrExpr = new OrExprElements();
		this.pPrimaryBooleanExpression = new PrimaryBooleanExpressionElements();
		this.pBooleanUnaryLogicFCExpression = new BooleanUnaryLogicFCExpressionElements();
		this.pLocationNamedFCExpression = new LocationNamedFCExpressionElements();
		this.pLocationSetNamedFCExpression = new LocationSetNamedFCExpressionElements();
		this.pUnionLocationFCExpression = new UnionLocationFCExpressionElements();
		this.pNeighborFCExpression = new NeighborFCExpressionElements();
		this.pSpaceFCExpression = new SpaceFCExpressionElements();
		this.pSpaceInitFCExpression = new SpaceInitFCExpressionElements();
		this.pEntityNamedFCExpression = new EntityNamedFCExpressionElements();
		this.pEntitySetCreateFCExpression = new EntitySetCreateFCExpressionElements();
		this.pEntityOneOfFCExpression = new EntityOneOfFCExpressionElements();
		this.pEntitySetFunctionCallExpression = new EntitySetFunctionCallExpressionElements();
		this.pEntitySetOnLocationFCExpression = new EntitySetOnLocationFCExpressionElements();
		this.pEntitySetConditionalFCExpression = new EntitySetConditionalFCExpressionElements();
		this.pNumericNamedFCExpression = new NumericNamedFCExpressionElements();
		this.pArithmeticFCExpression = new ArithmeticFCExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimaryArithmeticExpression = new PrimaryArithmeticExpressionElements();
		this.pConstantExpression = new ConstantExpressionElements();
		this.pCountFCExpression = new CountFCExpressionElements();
		this.pCountVariableFCExpression = new CountVariableFCExpressionElements();
		this.pCountEntityFCExpression = new CountEntityFCExpressionElements();
		this.pMathFCExpression = new MathFCExpressionElements();
		this.pGetNamedFCExpression = new GetNamedFCExpressionElements();
		this.pGetAttributeFromEntityFCExpression = new GetAttributeFromEntityFCExpressionElements();
		this.pGetLocalVariableFCExpression = new GetLocalVariableFCExpressionElements();
		this.pGetEntityNameFCExpression = new GetEntityNameFCExpressionElements();
		this.pGetParametersFCExpression = new GetParametersFCExpressionElements();
		this.pMaxOneOfLocationFCExpression = new MaxOneOfLocationFCExpressionElements();
		this.pOneOfLocationFCExpression = new OneOfLocationFCExpressionElements();
		this.pSelectConditionalLocationFCExpression = new SelectConditionalLocationFCExpressionElements();
		this.pLocationPrimitiveFCExpression = new LocationPrimitiveFCExpressionElements();
		this.pSetNamedFunctionExpression = new SetNamedFunctionExpressionElements();
		this.pSetAttributeNamedFCExpression = new SetAttributeNamedFCExpressionElements();
		this.pSetLocationNamedFCExpression = new SetLocationNamedFCExpressionElements();
		this.pDeclaredLocalVariable = new DeclaredLocalVariableElements();
		this.pDeclaredAttributes = new DeclaredAttributesElements();
		this.pDeclaredParameter = new DeclaredParameterElements();
		this.pDeclaredVariable = new DeclaredVariableElements();
		this.pDeclaredEntities = new DeclaredEntitiesElements();
		this.pType = new TypeElements();
		this.eTypeEnum = new TypeEnumElements();
		this.pFloat = new FloatElements();
		this.pStart = new StartElements();
		this.pEnd = new EndElements();
		this.pDeclaredBehavior = new DeclaredBehaviorElements();
		this.pUnconditionedEdge = new UnconditionedEdgeElements();
		this.pTrueEdge = new TrueEdgeElements();
		this.pFalseEdge = new FalseEdgeElements();
		this.pDecision = new DecisionElements();
		this.pJoin = new JoinElements();
		this.pFork = new ForkElements();
		this.pMerge = new MergeElements();
		this.pMove = new MoveElements();
		this.pDie = new DieElements();
		this.pReproduce = new ReproduceElements();
		this.pAdd = new AddElements();
		this.pRemove = new RemoveElements();
		this.pSet = new SetElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.cirad.dsl.xtext.Behaviordsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model behavior::Model:
	//	'Model' name=ID '{' (entities+=Entity* ("Run main as : " mainBehavior=Behavior) init+=InitEntity*
	//	init+=InitSpace*) &
	//	'}'
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Entity behavior::Entity:
	//	{behavior::Entity}
	//	'Entity' name=ID '{' ('Attributes' '{' attributes+=AttributeClass (',' attributes+=AttributeClass)* '}')?
	//	(behavior+=Behavior behavior+=Behavior*)?
	//	'}'
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//InitEntity behavior::InitEntity:
	//	initFunctionCall=EntitySetCreateFCExpression 'as ' initName=ID '{'
	//	'each' entity+=[behavior::Entity] '{' ('position =' initialLocation=LocationNamedFCExpression &
	//	assingnments+=Assignment*)
	//	'}'
	//	'}'
	public InitEntityElements getInitEntityAccess() {
		return pInitEntity;
	}
	
	public ParserRule getInitEntityRule() {
		return getInitEntityAccess().getRule();
	}

	//Assignment behavior::Assignment:
	//	variable=DeclaredVariable ':=' expression=FunctionCallExpression
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//InitSpace behavior::InitSpace:
	//	{behavior::InitSpace} initFunctionCall=SpaceInitFCExpression '{'
	//	'each' entity+=[behavior::Entity] '{'
	//	assingnments+=Assignment*
	//	'}'
	//	'}'
	public InitSpaceElements getInitSpaceAccess() {
		return pInitSpace;
	}
	
	public ParserRule getInitSpaceRule() {
		return getInitSpaceAccess().getRule();
	}

	////Location returns behavior::Location: 
	////	name=ID
	////;
	//ParameterClass behavior::ParameterClass:
	//	{behavior::ParameterClass} name=ID ':' type=TypeEnum
	public ParameterClassElements getParameterClassAccess() {
		return pParameterClass;
	}
	
	public ParserRule getParameterClassRule() {
		return getParameterClassAccess().getRule();
	}

	//AttributeClass behavior::AttributeClass:
	//	{behavior::AttributeClass} name=ID ':' type=TypeEnum
	public AttributeClassElements getAttributeClassAccess() {
		return pAttributeClass;
	}
	
	public ParserRule getAttributeClassRule() {
		return getAttributeClassAccess().getRule();
	}

	//LocalVariableClass behavior::LocalVariable:
	//	{behavior::LocalVariable}
	//	'let' name=ID '<-' expression=FunctionCallExpression
	public LocalVariableClassElements getLocalVariableClassAccess() {
		return pLocalVariableClass;
	}
	
	public ParserRule getLocalVariableClassRule() {
		return getLocalVariableClassAccess().getRule();
	}

	//Behavior behavior::Behavior:
	//	EquationBehaviour | ActivityDiagramBehavior | ActivityBehavior
	public BehaviorElements getBehaviorAccess() {
		return pBehavior;
	}
	
	public ParserRule getBehaviorRule() {
		return getBehaviorAccess().getRule();
	}

	//Edge behavior::Edge:
	//	UnconditionedEdge | TrueEdge | FalseEdge
	public EdgeElements getEdgeAccess() {
		return pEdge;
	}
	
	public ParserRule getEdgeRule() {
		return getEdgeAccess().getRule();
	}

	//Node behavior::Node:
	//	ControlNode | ExcecutableNode | DeclaredBehavior
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}

	//ControlNode behavior::ControlNode:
	//	Decision | Join | Start | End | Fork | Merge
	public ControlNodeElements getControlNodeAccess() {
		return pControlNode;
	}
	
	public ParserRule getControlNodeRule() {
		return getControlNodeAccess().getRule();
	}

	//ExcecutableNode behavior::ExecutableNode:
	//	PrimitiveActivities
	public ExcecutableNodeElements getExcecutableNodeAccess() {
		return pExcecutableNode;
	}
	
	public ParserRule getExcecutableNodeRule() {
		return getExcecutableNodeAccess().getRule();
	}

	//PrimitiveActivities behavior::PrimitiveActivities:
	//	Add | Remove | Move | Reproduce | Die | Set
	public PrimitiveActivitiesElements getPrimitiveActivitiesAccess() {
		return pPrimitiveActivities;
	}
	
	public ParserRule getPrimitiveActivitiesRule() {
		return getPrimitiveActivitiesAccess().getRule();
	}

	////EString returns behavior::ExcecutableNode:
	////	ecore::EString: STRING | ID;
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//EquationBehaviour behavior::EquationBehavior:
	//	{behavior::EquationBehavior}
	//	'EquationBehaviour' name=ID '{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')
	//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
	//	'Equation' '{' equation=Equation '}'
	//	'}'
	public EquationBehaviourElements getEquationBehaviourAccess() {
		return pEquationBehaviour;
	}
	
	public ParserRule getEquationBehaviourRule() {
		return getEquationBehaviourAccess().getRule();
	}

	//ActivityBehavior behavior::ActivityBehavior:
	//	{behavior::ActivityBehavior}
	//	'ActivityBehavior' name=ID
	//	'{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
	//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)? (primitiveaactivities+=PrimitiveActivities
	//	primitiveaactivities+=PrimitiveActivities*)?
	//	'}'
	public ActivityBehaviorElements getActivityBehaviorAccess() {
		return pActivityBehavior;
	}
	
	public ParserRule getActivityBehaviorRule() {
		return getActivityBehaviorAccess().getRule();
	}

	//ActivityDiagramBehavior behavior::ActivityDiagramBehavior:
	//	{behavior::ActivityDiagramBehavior}
	//	'ActivityDiagramBehavior' name=ID
	//	'{' ('Parameters' '(' parameters+=ParameterClass ("," parameters+=ParameterClass)* ')')?
	//	(localvariable+=LocalVariableClass localvariable+=LocalVariableClass*)?
	//	start=Start '}'
	public ActivityDiagramBehaviorElements getActivityDiagramBehaviorAccess() {
		return pActivityDiagramBehavior;
	}
	
	public ParserRule getActivityDiagramBehaviorRule() {
		return getActivityDiagramBehaviorAccess().getRule();
	}

	//Equation behavior::Equation:
	//	left=DeclaredAttributes '='
	//	right=ArithmeticFCExpression
	public EquationElements getEquationAccess() {
		return pEquation;
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	////EInt returns ecore::EInt:
	////	INT;
	///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!NAMED FUNCTIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\\\
	//NumericNamedFunction behavior::NamedFunction:
	//	ArithmeticFunction | MathFunction | CountFunction
	public NumericNamedFunctionElements getNumericNamedFunctionAccess() {
		return pNumericNamedFunction;
	}
	
	public ParserRule getNumericNamedFunctionRule() {
		return getNumericNamedFunctionAccess().getRule();
	}

	//ArithmeticFunction behavior::NamedFunction:
	//	ArithmeticFunctionMultiplication | ArithmeticFunctionPlus
	public ArithmeticFunctionElements getArithmeticFunctionAccess() {
		return pArithmeticFunction;
	}
	
	public ParserRule getArithmeticFunctionRule() {
		return getArithmeticFunctionAccess().getRule();
	}

	//ArithmeticFunctionMultiplication behavior::NamedFunction:
	//	name=('+' | '-')
	public ArithmeticFunctionMultiplicationElements getArithmeticFunctionMultiplicationAccess() {
		return pArithmeticFunctionMultiplication;
	}
	
	public ParserRule getArithmeticFunctionMultiplicationRule() {
		return getArithmeticFunctionMultiplicationAccess().getRule();
	}

	//ArithmeticFunctionPlus behavior::NamedFunction:
	//	name=('/' | '*')
	public ArithmeticFunctionPlusElements getArithmeticFunctionPlusAccess() {
		return pArithmeticFunctionPlus;
	}
	
	public ParserRule getArithmeticFunctionPlusRule() {
		return getArithmeticFunctionPlusAccess().getRule();
	}

	//MathFunction behavior::NamedFunction:
	//	UnaryMathBinaryFunction
	public MathFunctionElements getMathFunctionAccess() {
		return pMathFunction;
	}
	
	public ParserRule getMathFunctionRule() {
		return getMathFunctionAccess().getRule();
	}

	//UnaryMathBinaryFunction behavior::NamedFunction:
	//	name=('sqrt' | 'random' | 'floor' | 'exp')
	public UnaryMathBinaryFunctionElements getUnaryMathBinaryFunctionAccess() {
		return pUnaryMathBinaryFunction;
	}
	
	public ParserRule getUnaryMathBinaryFunctionRule() {
		return getUnaryMathBinaryFunctionAccess().getRule();
	}

	//CountFunction behavior::NamedFunction:
	//	name='count'
	public CountFunctionElements getCountFunctionAccess() {
		return pCountFunction;
	}
	
	public ParserRule getCountFunctionRule() {
		return getCountFunctionAccess().getRule();
	}

	//LocationNamedFunction behavior::NamedFunction:
	//	SimpleLocationNamedFunction | LocationSetNamedFunction
	public LocationNamedFunctionElements getLocationNamedFunctionAccess() {
		return pLocationNamedFunction;
	}
	
	public ParserRule getLocationNamedFunctionRule() {
		return getLocationNamedFunctionAccess().getRule();
	}

	//SimpleLocationNamedFunction behavior::NamedFunction:
	//	MaxOneOfLocationFunction | SelectConditionalLocationFunction | OneOfLocationFunction | LocationPrimitiveFunction
	public SimpleLocationNamedFunctionElements getSimpleLocationNamedFunctionAccess() {
		return pSimpleLocationNamedFunction;
	}
	
	public ParserRule getSimpleLocationNamedFunctionRule() {
		return getSimpleLocationNamedFunctionAccess().getRule();
	}

	//MaxOneOfLocationFunction behavior::NamedFunction:
	//	name='max-one-of'
	public MaxOneOfLocationFunctionElements getMaxOneOfLocationFunctionAccess() {
		return pMaxOneOfLocationFunction;
	}
	
	public ParserRule getMaxOneOfLocationFunctionRule() {
		return getMaxOneOfLocationFunctionAccess().getRule();
	}

	//SelectConditionalLocationFunction behavior::NamedFunction:
	//	name='select location'
	public SelectConditionalLocationFunctionElements getSelectConditionalLocationFunctionAccess() {
		return pSelectConditionalLocationFunction;
	}
	
	public ParserRule getSelectConditionalLocationFunctionRule() {
		return getSelectConditionalLocationFunctionAccess().getRule();
	}

	//OneOfLocationFunction behavior::NamedFunction:
	//	name='one-of'
	public OneOfLocationFunctionElements getOneOfLocationFunctionAccess() {
		return pOneOfLocationFunction;
	}
	
	public ParserRule getOneOfLocationFunctionRule() {
		return getOneOfLocationFunctionAccess().getRule();
	}

	//LocationPrimitiveFunction behavior::NamedFunction:
	//	name=('here' | 'top' | 'left' | 'right' | 'grid' | 'bottom' | 'neighborhood')
	public LocationPrimitiveFunctionElements getLocationPrimitiveFunctionAccess() {
		return pLocationPrimitiveFunction;
	}
	
	public ParserRule getLocationPrimitiveFunctionRule() {
		return getLocationPrimitiveFunctionAccess().getRule();
	}

	//////////////////////////////////////////////////////////////
	//LocationSetNamedFunction behavior::NamedFunction:
	//	NeighborhoodLocationFunction | SpaceLocationFunction | UnionLocationFunction
	public LocationSetNamedFunctionElements getLocationSetNamedFunctionAccess() {
		return pLocationSetNamedFunction;
	}
	
	public ParserRule getLocationSetNamedFunctionRule() {
		return getLocationSetNamedFunctionAccess().getRule();
	}

	//NeighborhoodLocationFunction behavior::NamedFunction:
	//	name='neighborhood'
	public NeighborhoodLocationFunctionElements getNeighborhoodLocationFunctionAccess() {
		return pNeighborhoodLocationFunction;
	}
	
	public ParserRule getNeighborhoodLocationFunctionRule() {
		return getNeighborhoodLocationFunctionAccess().getRule();
	}

	//SpaceLocationFunction behavior::NamedFunction:
	//	name='grid'
	public SpaceLocationFunctionElements getSpaceLocationFunctionAccess() {
		return pSpaceLocationFunction;
	}
	
	public ParserRule getSpaceLocationFunctionRule() {
		return getSpaceLocationFunctionAccess().getRule();
	}

	//UnionLocationFunction behavior::NamedFunction:
	//	name='union-location'
	public UnionLocationFunctionElements getUnionLocationFunctionAccess() {
		return pUnionLocationFunction;
	}
	
	public ParserRule getUnionLocationFunctionRule() {
		return getUnionLocationFunctionAccess().getRule();
	}

	////////////////////////////////////////////////////////////////
	//BooleanNamedFunction behavior::NamedFunction:
	//	BooleanGetFunction | BooleanPrimitiveFunction | BooleanSetFunction | BooleanNumericComparisonFunction |
	//	BooleanIsOccuppiedLocationFunction | BooleanLogicFunction
	public BooleanNamedFunctionElements getBooleanNamedFunctionAccess() {
		return pBooleanNamedFunction;
	}
	
	public ParserRule getBooleanNamedFunctionRule() {
		return getBooleanNamedFunctionAccess().getRule();
	}

	//BooleanPrimitiveFunction behavior::NamedFunction:
	//	name=('true' | 'false')
	public BooleanPrimitiveFunctionElements getBooleanPrimitiveFunctionAccess() {
		return pBooleanPrimitiveFunction;
	}
	
	public ParserRule getBooleanPrimitiveFunctionRule() {
		return getBooleanPrimitiveFunctionAccess().getRule();
	}

	//BooleanSetFunction behavior::NamedFunction:
	//	name='set'
	public BooleanSetFunctionElements getBooleanSetFunctionAccess() {
		return pBooleanSetFunction;
	}
	
	public ParserRule getBooleanSetFunctionRule() {
		return getBooleanSetFunctionAccess().getRule();
	}

	//BooleanGetFunction behavior::NamedFunction:
	//	name='get'
	public BooleanGetFunctionElements getBooleanGetFunctionAccess() {
		return pBooleanGetFunction;
	}
	
	public ParserRule getBooleanGetFunctionRule() {
		return getBooleanGetFunctionAccess().getRule();
	}

	//BooleanNumericComparisonFunction behavior::NamedFunction:
	//	name=('>=' | '>' | '!=' | '<' | '<=' | '=')
	public BooleanNumericComparisonFunctionElements getBooleanNumericComparisonFunctionAccess() {
		return pBooleanNumericComparisonFunction;
	}
	
	public ParserRule getBooleanNumericComparisonFunctionRule() {
		return getBooleanNumericComparisonFunctionAccess().getRule();
	}

	//BooleanIsOccuppiedLocationFunction behavior::NamedFunction:
	//	name='occupied'
	public BooleanIsOccuppiedLocationFunctionElements getBooleanIsOccuppiedLocationFunctionAccess() {
		return pBooleanIsOccuppiedLocationFunction;
	}
	
	public ParserRule getBooleanIsOccuppiedLocationFunctionRule() {
		return getBooleanIsOccuppiedLocationFunctionAccess().getRule();
	}

	//BooleanLogicFunction behavior::NamedFunction:
	//	BooleanUnaryLogicFunction | BooleanANDBinaryLogicFunction | BooleanORBinaryLogicFunction
	public BooleanLogicFunctionElements getBooleanLogicFunctionAccess() {
		return pBooleanLogicFunction;
	}
	
	public ParserRule getBooleanLogicFunctionRule() {
		return getBooleanLogicFunctionAccess().getRule();
	}

	//BooleanUnaryLogicFunction behavior::NamedFunction:
	//	name='NOT'
	public BooleanUnaryLogicFunctionElements getBooleanUnaryLogicFunctionAccess() {
		return pBooleanUnaryLogicFunction;
	}
	
	public ParserRule getBooleanUnaryLogicFunctionRule() {
		return getBooleanUnaryLogicFunctionAccess().getRule();
	}

	//BooleanANDBinaryLogicFunction behavior::NamedFunction:
	//	name='AND'
	public BooleanANDBinaryLogicFunctionElements getBooleanANDBinaryLogicFunctionAccess() {
		return pBooleanANDBinaryLogicFunction;
	}
	
	public ParserRule getBooleanANDBinaryLogicFunctionRule() {
		return getBooleanANDBinaryLogicFunctionAccess().getRule();
	}

	//BooleanORBinaryLogicFunction behavior::NamedFunction:
	//	name='OR'
	public BooleanORBinaryLogicFunctionElements getBooleanORBinaryLogicFunctionAccess() {
		return pBooleanORBinaryLogicFunction;
	}
	
	public ParserRule getBooleanORBinaryLogicFunctionRule() {
		return getBooleanORBinaryLogicFunctionAccess().getRule();
	}

	//EntityNamedFunction behavior::NamedFunction:
	//	EntityOneOfFunction | EntityQuantifierFunction
	public EntityNamedFunctionElements getEntityNamedFunctionAccess() {
		return pEntityNamedFunction;
	}
	
	public ParserRule getEntityNamedFunctionRule() {
		return getEntityNamedFunctionAccess().getRule();
	}

	//EntityQuantifierFunction behavior::NamedFunction:
	//	EntityAllQuantifierFunction | EntityAnyQuantifierFunction
	public EntityQuantifierFunctionElements getEntityQuantifierFunctionAccess() {
		return pEntityQuantifierFunction;
	}
	
	public ParserRule getEntityQuantifierFunctionRule() {
		return getEntityQuantifierFunctionAccess().getRule();
	}

	//EntitySetConditionalFunction behavior::NamedFunction:
	//	name='has'
	public EntitySetConditionalFunctionElements getEntitySetConditionalFunctionAccess() {
		return pEntitySetConditionalFunction;
	}
	
	public ParserRule getEntitySetConditionalFunctionRule() {
		return getEntitySetConditionalFunctionAccess().getRule();
	}

	//EntityAnyQuantifierFunction behavior::NamedFunction:
	//	name='any'
	public EntityAnyQuantifierFunctionElements getEntityAnyQuantifierFunctionAccess() {
		return pEntityAnyQuantifierFunction;
	}
	
	public ParserRule getEntityAnyQuantifierFunctionRule() {
		return getEntityAnyQuantifierFunctionAccess().getRule();
	}

	//EntityAllQuantifierFunction behavior::NamedFunction:
	//	name='all'
	public EntityAllQuantifierFunctionElements getEntityAllQuantifierFunctionAccess() {
		return pEntityAllQuantifierFunction;
	}
	
	public ParserRule getEntityAllQuantifierFunctionRule() {
		return getEntityAllQuantifierFunctionAccess().getRule();
	}

	//EntitySetCreateFunction behavior::NamedFunction:
	//	name='Create '
	public EntitySetCreateFunctionElements getEntitySetCreateFunctionAccess() {
		return pEntitySetCreateFunction;
	}
	
	public ParserRule getEntitySetCreateFunctionRule() {
		return getEntitySetCreateFunctionAccess().getRule();
	}

	//EntitySetOnLocationFunction behavior::NamedFunction:
	//	name='on'
	public EntitySetOnLocationFunctionElements getEntitySetOnLocationFunctionAccess() {
		return pEntitySetOnLocationFunction;
	}
	
	public ParserRule getEntitySetOnLocationFunctionRule() {
		return getEntitySetOnLocationFunctionAccess().getRule();
	}

	//SpaceInitFunction behavior::NamedFunction:
	//	name='Create grid'
	public SpaceInitFunctionElements getSpaceInitFunctionAccess() {
		return pSpaceInitFunction;
	}
	
	public ParserRule getSpaceInitFunctionRule() {
		return getSpaceInitFunctionAccess().getRule();
	}

	//EntityOneOfFunction behavior::NamedFunction:
	//	name='one-of'
	public EntityOneOfFunctionElements getEntityOneOfFunctionAccess() {
		return pEntityOneOfFunction;
	}
	
	public ParserRule getEntityOneOfFunctionRule() {
		return getEntityOneOfFunctionAccess().getRule();
	}

	//GetNamedFunction behavior::NamedFunction:
	//	GetVariableFunction | GetEntityNamedFunction
	public GetNamedFunctionElements getGetNamedFunctionAccess() {
		return pGetNamedFunction;
	}
	
	public ParserRule getGetNamedFunctionRule() {
		return getGetNamedFunctionAccess().getRule();
	}

	//GetVariableFunction behavior::NamedFunction:
	//	name='of'
	public GetVariableFunctionElements getGetVariableFunctionAccess() {
		return pGetVariableFunction;
	}
	
	public ParserRule getGetVariableFunctionRule() {
		return getGetVariableFunctionAccess().getRule();
	}

	//GetEntityNamedFunction behavior::NamedFunction:
	//	name='entity'
	public GetEntityNamedFunctionElements getGetEntityNamedFunctionAccess() {
		return pGetEntityNamedFunction;
	}
	
	public ParserRule getGetEntityNamedFunctionRule() {
		return getGetEntityNamedFunctionAccess().getRule();
	}

	//GetEntityFromLocationNamedFunction behavior::NamedFunction:
	//	name='from'
	public GetEntityFromLocationNamedFunctionElements getGetEntityFromLocationNamedFunctionAccess() {
		return pGetEntityFromLocationNamedFunction;
	}
	
	public ParserRule getGetEntityFromLocationNamedFunctionRule() {
		return getGetEntityFromLocationNamedFunctionAccess().getRule();
	}

	///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!EXPRESSIONS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\\\\\\\\\\
	//FunctionCallExpression behavior::FunctionCallExpression:
	//	NumericNamedFCExpression | LocationNamedFCExpression | BooleanNamedFCExpression | EntityNamedFCExpression |
	//	GetNamedFCExpression
	public FunctionCallExpressionElements getFunctionCallExpressionAccess() {
		return pFunctionCallExpression;
	}
	
	public ParserRule getFunctionCallExpressionRule() {
		return getFunctionCallExpressionAccess().getRule();
	}

	//AnonymousFunction behavior::AnonymousFunction:
	//	'function' ('(' (parameters+=ParameterClass (',' parameters+=ParameterClass)*)? ')')
	//	'{'
	//	expression=FunctionCallExpression
	//	'}'
	public AnonymousFunctionElements getAnonymousFunctionAccess() {
		return pAnonymousFunction;
	}
	
	public ParserRule getAnonymousFunctionRule() {
		return getAnonymousFunctionAccess().getRule();
	}

	////////// BOOLEAN FUNCTION EXPRESSION DEFINITION\\\\\\\\\\\\\\\\
	//BooleanNamedFCExpression behavior::FunctionCallExpression:
	//	BooleanPrimitiveFCExpression | BooleanSetValueFCExpression | BooleanGetValueFCExpression |
	//	BooleanNumericComparisonFCExpression | BooleanIsOccuppiedLocationFCExpression | BooleanQuantifiedEntitySetFCEpression
	//	| BooleanUnaryLogicFCExpression
	public BooleanNamedFCExpressionElements getBooleanNamedFCExpressionAccess() {
		return pBooleanNamedFCExpression;
	}
	
	public ParserRule getBooleanNamedFCExpressionRule() {
		return getBooleanNamedFCExpressionAccess().getRule();
	}

	//BooleanQuantifiedEntitySetFCEpression behavior::FunctionCallExpression:
	//	function=EntityQuantifierFunction
	//	arguments+=DeclaredEntities 'on'
	//	arguments+=LocationPrimitiveFCExpression
	//	'has' arguments+=BooleanNumericComparisonFCExpression
	public BooleanQuantifiedEntitySetFCEpressionElements getBooleanQuantifiedEntitySetFCEpressionAccess() {
		return pBooleanQuantifiedEntitySetFCEpression;
	}
	
	public ParserRule getBooleanQuantifiedEntitySetFCEpressionRule() {
		return getBooleanQuantifiedEntitySetFCEpressionAccess().getRule();
	}

	//BooleanPrimitiveFCExpression behavior::FunctionCallExpression:
	//	function=BooleanPrimitiveFunction
	public BooleanPrimitiveFCExpressionElements getBooleanPrimitiveFCExpressionAccess() {
		return pBooleanPrimitiveFCExpression;
	}
	
	public ParserRule getBooleanPrimitiveFCExpressionRule() {
		return getBooleanPrimitiveFCExpressionAccess().getRule();
	}

	//BooleanSetValueFCExpression behavior::FunctionCallExpression:
	//	function=BooleanSetFunction arguments+=DeclaredVariable 'as true'
	public BooleanSetValueFCExpressionElements getBooleanSetValueFCExpressionAccess() {
		return pBooleanSetValueFCExpression;
	}
	
	public ParserRule getBooleanSetValueFCExpressionRule() {
		return getBooleanSetValueFCExpressionAccess().getRule();
	}

	//BooleanGetValueFCExpression behavior::FunctionCallExpression:
	//	function=BooleanGetFunction arguments+=DeclaredVariable 'true'
	public BooleanGetValueFCExpressionElements getBooleanGetValueFCExpressionAccess() {
		return pBooleanGetValueFCExpression;
	}
	
	public ParserRule getBooleanGetValueFCExpressionRule() {
		return getBooleanGetValueFCExpressionAccess().getRule();
	}

	//BooleanNumericComparisonFCExpression behavior::FunctionCallExpression:
	//	arguments+=(DeclaredVariable | ConstantExpression) function=BooleanNumericComparisonFunction
	//	arguments+=(DeclaredVariable | ConstantExpression)
	public BooleanNumericComparisonFCExpressionElements getBooleanNumericComparisonFCExpressionAccess() {
		return pBooleanNumericComparisonFCExpression;
	}
	
	public ParserRule getBooleanNumericComparisonFCExpressionRule() {
		return getBooleanNumericComparisonFCExpressionAccess().getRule();
	}

	//BooleanIsOccuppiedLocationFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} arguments+=LocationPrimitiveFCExpression 'is '
	//	arguments+=BooleanUnaryLogicFCExpression?
	//	function=BooleanIsOccuppiedLocationFunction ('by' '(' arguments+=EntitySetConditionalFCExpression (','
	//	arguments+=EntitySetConditionalFCExpression)* ')')?
	public BooleanIsOccuppiedLocationFCExpressionElements getBooleanIsOccuppiedLocationFCExpressionAccess() {
		return pBooleanIsOccuppiedLocationFCExpression;
	}
	
	public ParserRule getBooleanIsOccuppiedLocationFCExpressionRule() {
		return getBooleanIsOccuppiedLocationFCExpressionAccess().getRule();
	}

	//BooleanLogicFCExpression behavior::FunctionCallExpression:
	//	OrExpr
	public BooleanLogicFCExpressionElements getBooleanLogicFCExpressionAccess() {
		return pBooleanLogicFCExpression;
	}
	
	public ParserRule getBooleanLogicFCExpressionRule() {
		return getBooleanLogicFCExpressionAccess().getRule();
	}

	//AndExpr behavior::FunctionCallExpression:
	//	PrimaryBooleanExpression ({behavior::FunctionCallExpression.arguments+=current}
	//	function=BooleanANDBinaryLogicFunction arguments+=PrimaryBooleanExpression)*
	public AndExprElements getAndExprAccess() {
		return pAndExpr;
	}
	
	public ParserRule getAndExprRule() {
		return getAndExprAccess().getRule();
	}

	//OrExpr behavior::FunctionCallExpression:
	//	AndExpr ({behavior::FunctionCallExpression.arguments+=current} function=BooleanORBinaryLogicFunction
	//	arguments+=AndExpr)*
	public OrExprElements getOrExprAccess() {
		return pOrExpr;
	}
	
	public ParserRule getOrExprRule() {
		return getOrExprAccess().getRule();
	}

	//PrimaryBooleanExpression behavior::FunctionCallExpression:
	//	'(' BooleanNamedFCExpression ')'
	public PrimaryBooleanExpressionElements getPrimaryBooleanExpressionAccess() {
		return pPrimaryBooleanExpression;
	}
	
	public ParserRule getPrimaryBooleanExpressionRule() {
		return getPrimaryBooleanExpressionAccess().getRule();
	}

	//BooleanUnaryLogicFCExpression behavior::FunctionCallExpression:
	//	function=BooleanUnaryLogicFunction
	public BooleanUnaryLogicFCExpressionElements getBooleanUnaryLogicFCExpressionAccess() {
		return pBooleanUnaryLogicFCExpression;
	}
	
	public ParserRule getBooleanUnaryLogicFCExpressionRule() {
		return getBooleanUnaryLogicFCExpressionAccess().getRule();
	}

	//////// LOCATION FUNCTION EXPRESSION DEFINITION \\\\\\\\
	//LocationNamedFCExpression behavior::FunctionCallExpression:
	//	MaxOneOfLocationFCExpression | SelectConditionalLocationFCExpression | OneOfLocationFCExpression |
	//	LocationPrimitiveFCExpression
	public LocationNamedFCExpressionElements getLocationNamedFCExpressionAccess() {
		return pLocationNamedFCExpression;
	}
	
	public ParserRule getLocationNamedFCExpressionRule() {
		return getLocationNamedFCExpressionAccess().getRule();
	}

	//LocationSetNamedFCExpression behavior::FunctionCallExpression:
	//	NeighborFCExpression | UnionLocationFCExpression | SpaceFCExpression
	public LocationSetNamedFCExpressionElements getLocationSetNamedFCExpressionAccess() {
		return pLocationSetNamedFCExpression;
	}
	
	public ParserRule getLocationSetNamedFCExpressionRule() {
		return getLocationSetNamedFCExpressionAccess().getRule();
	}

	//UnionLocationFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=UnionLocationFunction ('(' arguments+=LocationNamedFCExpression (","
	//	arguments+=LocationNamedFCExpression)* ')')
	public UnionLocationFCExpressionElements getUnionLocationFCExpressionAccess() {
		return pUnionLocationFCExpression;
	}
	
	public ParserRule getUnionLocationFCExpressionRule() {
		return getUnionLocationFCExpressionAccess().getRule();
	}

	//NeighborFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=NeighborhoodLocationFunction
	public NeighborFCExpressionElements getNeighborFCExpressionAccess() {
		return pNeighborFCExpression;
	}
	
	public ParserRule getNeighborFCExpressionRule() {
		return getNeighborFCExpressionAccess().getRule();
	}

	//SpaceFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=SpaceLocationFunction ('of' arguments+=DeclaredEntities) ('having ' '('
	//	arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
	public SpaceFCExpressionElements getSpaceFCExpressionAccess() {
		return pSpaceFCExpression;
	}
	
	public ParserRule getSpaceFCExpressionRule() {
		return getSpaceFCExpressionAccess().getRule();
	}

	//SpaceInitFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=SpaceInitFunction ('of' arguments+=DeclaredEntities) ('('
	//	arguments+=ConstantExpression ',' arguments+=ConstantExpression ')')
	public SpaceInitFCExpressionElements getSpaceInitFCExpressionAccess() {
		return pSpaceInitFCExpression;
	}
	
	public ParserRule getSpaceInitFCExpressionRule() {
		return getSpaceInitFCExpressionAccess().getRule();
	}

	///////////ENTITY FUNCTION DEFINITION////
	//EntityNamedFCExpression behavior::FunctionCallExpression:
	//	EntityOneOfFCExpression
	public EntityNamedFCExpressionElements getEntityNamedFCExpressionAccess() {
		return pEntityNamedFCExpression;
	}
	
	public ParserRule getEntityNamedFCExpressionRule() {
		return getEntityNamedFCExpressionAccess().getRule();
	}

	//EntitySetCreateFCExpression behavior::FunctionCallExpression:
	//	function=EntitySetCreateFunction
	//	arguments+=DeclaredEntities arguments+=ConstantExpression
	public EntitySetCreateFCExpressionElements getEntitySetCreateFCExpressionAccess() {
		return pEntitySetCreateFCExpression;
	}
	
	public ParserRule getEntitySetCreateFCExpressionRule() {
		return getEntitySetCreateFCExpressionAccess().getRule();
	}

	//EntityOneOfFCExpression behavior::FunctionCallExpression:
	//	function=EntityOneOfFunction ('(' arguments+=DeclaredEntities ('from ' arguments+=LocationNamedFCExpression))
	//	('having ' '(' arguments+=BooleanLogicFCExpression (',' arguments+=BooleanLogicFCExpression)* ')')?
	//	')'
	public EntityOneOfFCExpressionElements getEntityOneOfFCExpressionAccess() {
		return pEntityOneOfFCExpression;
	}
	
	public ParserRule getEntityOneOfFCExpressionRule() {
		return getEntityOneOfFCExpressionAccess().getRule();
	}

	////EntityFromLocationFCExpression returns behavior::FunctionCallExpression :
	////	function=GetAttributeFunction '(' arguments+=DeclaredAttributes 'from' arguments+=LocationNamedFCExpression ')'
	////;
	///////////ENTITY SET FUNCTION DEFINITION////
	//EntitySetFunctionCallExpression behavior::FunctionCallExpression:
	//	EntitySetOnLocationFCExpression | EntitySetConditionalFCExpression
	public EntitySetFunctionCallExpressionElements getEntitySetFunctionCallExpressionAccess() {
		return pEntitySetFunctionCallExpression;
	}
	
	public ParserRule getEntitySetFunctionCallExpressionRule() {
		return getEntitySetFunctionCallExpressionAccess().getRule();
	}

	//EntitySetOnLocationFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredEntities
	//	function=EntitySetOnLocationFunction arguments+=LocationPrimitiveFCExpression
	public EntitySetOnLocationFCExpressionElements getEntitySetOnLocationFCExpressionAccess() {
		return pEntitySetOnLocationFCExpression;
	}
	
	public ParserRule getEntitySetOnLocationFCExpressionRule() {
		return getEntitySetOnLocationFCExpressionAccess().getRule();
	}

	//EntitySetConditionalFCExpression behavior::FunctionCallExpression:
	//	function=EntityNamedFunction? (arguments+=DeclaredEntities arguments+=LocationPrimitiveFCExpression) ('having '
	//	arguments+=BooleanLogicFCExpression)?
	public EntitySetConditionalFCExpressionElements getEntitySetConditionalFCExpressionAccess() {
		return pEntitySetConditionalFCExpression;
	}
	
	public ParserRule getEntitySetConditionalFCExpressionRule() {
		return getEntitySetConditionalFCExpressionAccess().getRule();
	}

	////NUMERIC FUNCTION DEFINITION\\\\\\\
	//NumericNamedFCExpression behavior::FunctionCallExpression:
	//	ArithmeticFCExpression | MathFCExpression | CountFCExpression
	public NumericNamedFCExpressionElements getNumericNamedFCExpressionAccess() {
		return pNumericNamedFCExpression;
	}
	
	public ParserRule getNumericNamedFCExpressionRule() {
		return getNumericNamedFCExpressionAccess().getRule();
	}

	//ArithmeticFCExpression behavior::FunctionCallExpression:
	//	'-'? Addition
	public ArithmeticFCExpressionElements getArithmeticFCExpressionAccess() {
		return pArithmeticFCExpression;
	}
	
	public ParserRule getArithmeticFCExpressionRule() {
		return getArithmeticFCExpressionAccess().getRule();
	}

	//Addition behavior::FunctionCallExpression:
	//	Multiplication ({behavior::FunctionCallExpression.arguments+=current} function=ArithmeticFunctionPlus
	//	arguments+=Multiplication)*
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication behavior::FunctionCallExpression:
	//	PrimaryArithmeticExpression ({behavior::FunctionCallExpression.arguments+=current}
	//	function=ArithmeticFunctionMultiplication arguments+=PrimaryArithmeticExpression)*
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryArithmeticExpression behavior::FunctionCallExpression:
	//	'(' NumericNamedFCExpression ')' | arguments+=DeclaredVariable | arguments+=ConstantExpression
	public PrimaryArithmeticExpressionElements getPrimaryArithmeticExpressionAccess() {
		return pPrimaryArithmeticExpression;
	}
	
	public ParserRule getPrimaryArithmeticExpressionRule() {
		return getPrimaryArithmeticExpressionAccess().getRule();
	}

	//ConstantExpression behavior::ConstantExpression:
	//	{behavior::ConstantExpression} value=Float
	public ConstantExpressionElements getConstantExpressionAccess() {
		return pConstantExpression;
	}
	
	public ParserRule getConstantExpressionRule() {
		return getConstantExpressionAccess().getRule();
	}

	//CountFCExpression behavior::FunctionCallExpression:
	//	CountVariableFCExpression | CountEntityFCExpression
	public CountFCExpressionElements getCountFCExpressionAccess() {
		return pCountFCExpression;
	}
	
	public ParserRule getCountFCExpressionRule() {
		return getCountFCExpressionAccess().getRule();
	}

	//CountVariableFCExpression behavior::FunctionCallExpression:
	//	function=CountFunction
	//	'(' arguments+=DeclaredVariable ')'
	public CountVariableFCExpressionElements getCountVariableFCExpressionAccess() {
		return pCountVariableFCExpression;
	}
	
	public ParserRule getCountVariableFCExpressionRule() {
		return getCountVariableFCExpressionAccess().getRule();
	}

	//CountEntityFCExpression behavior::FunctionCallExpression:
	//	function=CountFunction
	//	'(' arguments+=EntitySetConditionalFCExpression ')'
	public CountEntityFCExpressionElements getCountEntityFCExpressionAccess() {
		return pCountEntityFCExpression;
	}
	
	public ParserRule getCountEntityFCExpressionRule() {
		return getCountEntityFCExpressionAccess().getRule();
	}

	//MathFCExpression behavior::FunctionCallExpression:
	//	function=MathFunction '(' arguments+=NumericNamedFCExpression ')'
	public MathFCExpressionElements getMathFCExpressionAccess() {
		return pMathFCExpression;
	}
	
	public ParserRule getMathFCExpressionRule() {
		return getMathFCExpressionAccess().getRule();
	}

	/////////////////////////////////////GET FUNCTION\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
	//GetNamedFCExpression behavior::FunctionCallExpression:
	//	GetAttributeFromEntityFCExpression
	public GetNamedFCExpressionElements getGetNamedFCExpressionAccess() {
		return pGetNamedFCExpression;
	}
	
	public ParserRule getGetNamedFCExpressionRule() {
		return getGetNamedFCExpressionAccess().getRule();
	}

	//GetAttributeFromEntityFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredVariable
	//	function=GetVariableFunction
	//	arguments+=(EntityNamedFCExpression | DeclaredEntities) ('from ' arguments+=LocationNamedFCExpression)?
	public GetAttributeFromEntityFCExpressionElements getGetAttributeFromEntityFCExpressionAccess() {
		return pGetAttributeFromEntityFCExpression;
	}
	
	public ParserRule getGetAttributeFromEntityFCExpressionRule() {
		return getGetAttributeFromEntityFCExpressionAccess().getRule();
	}

	//GetLocalVariableFCExpression behavior::FunctionCallExpression:
	//	function=GetVariableFunction arguments+=DeclaredVariable
	public GetLocalVariableFCExpressionElements getGetLocalVariableFCExpressionAccess() {
		return pGetLocalVariableFCExpression;
	}
	
	public ParserRule getGetLocalVariableFCExpressionRule() {
		return getGetLocalVariableFCExpressionAccess().getRule();
	}

	//GetEntityNameFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredEntities
	public GetEntityNameFCExpressionElements getGetEntityNameFCExpressionAccess() {
		return pGetEntityNameFCExpression;
	}
	
	public ParserRule getGetEntityNameFCExpressionRule() {
		return getGetEntityNameFCExpressionAccess().getRule();
	}

	//GetParametersFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredParameter function=GetVariableFunction
	//	arguments+=EntityNamedFCExpression
	public GetParametersFCExpressionElements getGetParametersFCExpressionAccess() {
		return pGetParametersFCExpression;
	}
	
	public ParserRule getGetParametersFCExpressionRule() {
		return getGetParametersFCExpressionAccess().getRule();
	}

	///// LOCATION FUNCTION DEFINITION\\\\\
	//MaxOneOfLocationFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=MaxOneOfLocationFunction ('['
	//	arguments+=DeclaredAttributes
	//	','
	//	arguments+=(SelectConditionalLocationFCExpression | UnionLocationFCExpression) arguments+=UnionLocationFCExpression?
	//	']')
	public MaxOneOfLocationFCExpressionElements getMaxOneOfLocationFCExpressionAccess() {
		return pMaxOneOfLocationFCExpression;
	}
	
	public ParserRule getMaxOneOfLocationFCExpressionRule() {
		return getMaxOneOfLocationFCExpressionAccess().getRule();
	}

	//OneOfLocationFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=OneOfLocationFunction ('['
	//	arguments+=SelectConditionalLocationFCExpression?
	//	arguments+=LocationSetNamedFCExpression?
	//	arguments+=DeclaredLocalVariable?
	//	']')
	public OneOfLocationFCExpressionElements getOneOfLocationFCExpressionAccess() {
		return pOneOfLocationFCExpression;
	}
	
	public ParserRule getOneOfLocationFCExpressionRule() {
		return getOneOfLocationFCExpressionAccess().getRule();
	}

	//SelectConditionalLocationFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=SelectConditionalLocationFunction 'from ['
	//	arguments+=LocationPrimitiveFCExpression ']'
	//	'such that' arguments+=BooleanLogicFCExpression
	public SelectConditionalLocationFCExpressionElements getSelectConditionalLocationFCExpressionAccess() {
		return pSelectConditionalLocationFCExpression;
	}
	
	public ParserRule getSelectConditionalLocationFCExpressionRule() {
		return getSelectConditionalLocationFCExpressionAccess().getRule();
	}

	//LocationPrimitiveFCExpression behavior::FunctionCallExpression:
	//	{behavior::FunctionCallExpression} function=LocationPrimitiveFunction
	public LocationPrimitiveFCExpressionElements getLocationPrimitiveFCExpressionAccess() {
		return pLocationPrimitiveFCExpression;
	}
	
	public ParserRule getLocationPrimitiveFCExpressionRule() {
		return getLocationPrimitiveFCExpressionAccess().getRule();
	}

	/////LOCATION SET FUNCTIONS\\\\\\\\
	//////SET FUNCTIONS
	//SetNamedFunctionExpression behavior::FunctionCallExpression:
	//	SetAttributeNamedFCExpression | SetLocationNamedFCExpression
	public SetNamedFunctionExpressionElements getSetNamedFunctionExpressionAccess() {
		return pSetNamedFunctionExpression;
	}
	
	public ParserRule getSetNamedFunctionExpressionRule() {
		return getSetNamedFunctionExpressionAccess().getRule();
	}

	//SetAttributeNamedFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredAttributes '(' (arguments+=ConstantExpression | STRING) ')'
	public SetAttributeNamedFCExpressionElements getSetAttributeNamedFCExpressionAccess() {
		return pSetAttributeNamedFCExpression;
	}
	
	public ParserRule getSetAttributeNamedFCExpressionRule() {
		return getSetAttributeNamedFCExpressionAccess().getRule();
	}

	//SetLocationNamedFCExpression behavior::FunctionCallExpression:
	//	arguments+=DeclaredAttributes '(' arguments+=LocationNamedFCExpression ')'
	public SetLocationNamedFCExpressionElements getSetLocationNamedFCExpressionAccess() {
		return pSetLocationNamedFCExpression;
	}
	
	public ParserRule getSetLocationNamedFCExpressionRule() {
		return getSetLocationNamedFCExpressionAccess().getRule();
	}

	//DeclaredLocalVariable behavior::DeclaredLocalVariable:
	//	{behavior::DeclaredLocalVariable} localvariable=[behavior::LocalVariable]
	public DeclaredLocalVariableElements getDeclaredLocalVariableAccess() {
		return pDeclaredLocalVariable;
	}
	
	public ParserRule getDeclaredLocalVariableRule() {
		return getDeclaredLocalVariableAccess().getRule();
	}

	//DeclaredAttributes behavior::DeclaredAttributes:
	//	attributeclass=[behavior::AttributeClass]
	public DeclaredAttributesElements getDeclaredAttributesAccess() {
		return pDeclaredAttributes;
	}
	
	public ParserRule getDeclaredAttributesRule() {
		return getDeclaredAttributesAccess().getRule();
	}

	//DeclaredParameter behavior::DeclaredParameter:
	//	{behavior::DeclaredParameter} parameterclass=[behavior::ParameterClass|QualifiedName]
	public DeclaredParameterElements getDeclaredParameterAccess() {
		return pDeclaredParameter;
	}
	
	public ParserRule getDeclaredParameterRule() {
		return getDeclaredParameterAccess().getRule();
	}

	//DeclaredVariable behavior::DeclaredVariable:
	//	{behavior::DeclaredVariable} variableclass=[behavior::VariableClass|QualifiedName]
	public DeclaredVariableElements getDeclaredVariableAccess() {
		return pDeclaredVariable;
	}
	
	public ParserRule getDeclaredVariableRule() {
		return getDeclaredVariableAccess().getRule();
	}

	//DeclaredEntities behavior::DeclaredEntities:
	//	entity=[behavior::Entity|QualifiedName]
	public DeclaredEntitiesElements getDeclaredEntitiesAccess() {
		return pDeclaredEntities;
	}
	
	public ParserRule getDeclaredEntitiesRule() {
		return getDeclaredEntitiesAccess().getRule();
	}

	////DeclaredLocation returns behavior::DeclaredLocation:
	////	location=[behavior::Location]
	////;
	////DeclaredNode returns behavior::DeclaredNode:
	////	node=[behavior::Node]
	////;
	//Type behavior::Type:
	//	type=TypeEnum
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//enum TypeEnum returns behavior::TypeEnum:
	//	string='String' | integer='Int' | float='Float' | boolean='Boolean' |
	//	location='Location' | locationset='LocationSet' | entity='Entity' | entityset='EntitySet';
	public TypeEnumElements getTypeEnumAccess() {
		return eTypeEnum;
	}
	
	public EnumRule getTypeEnumRule() {
		return getTypeEnumAccess().getRule();
	}

	//Float ecore::EFloat:
	//	INT ('.' INT)?
	public FloatElements getFloatAccess() {
		return pFloat;
	}
	
	public ParserRule getFloatRule() {
		return getFloatAccess().getRule();
	}

	///////////////////////////////////////////////!!!!!!!!!!!!!!!!!!!!!!DIAGRAMME D'ACTIVITE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\\\\\\\\\\\\\\
	//Start behavior::Start:
	//	{behavior::Start} name='Start' outcome_edge+=UnconditionedEdge
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}

	//End behavior::End:
	//	{behavior::End} name='End'
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}

	//DeclaredBehavior behavior::DeclaredBehavior:
	//	behavior=[behavior::Behavior] outcome_edge+=UnconditionedEdge
	public DeclaredBehaviorElements getDeclaredBehaviorAccess() {
		return pDeclaredBehavior;
	}
	
	public ParserRule getDeclaredBehaviorRule() {
		return getDeclaredBehaviorAccess().getRule();
	}

	//UnconditionedEdge behavior::UnconditionedEdge:
	//	{behavior::UnconditionedEdge} name='->' (target_node+=DeclaredBehavior | target_node+=End | target_node+=Decision |
	//	target_node+=Fork | target_node+=Merge | target_node+=Join | target_node+=PrimitiveActivities)
	public UnconditionedEdgeElements getUnconditionedEdgeAccess() {
		return pUnconditionedEdge;
	}
	
	public ParserRule getUnconditionedEdgeRule() {
		return getUnconditionedEdgeAccess().getRule();
	}

	//TrueEdge behavior::IfTrueEdge:
	//	{behavior::IfTrueEdge} name='then' target_node+=Node
	public TrueEdgeElements getTrueEdgeAccess() {
		return pTrueEdge;
	}
	
	public ParserRule getTrueEdgeRule() {
		return getTrueEdgeAccess().getRule();
	}

	//FalseEdge behavior::IfFalseEdge:
	//	{behavior::IfFalseEdge} name='else' target_node+=Node
	public FalseEdgeElements getFalseEdgeAccess() {
		return pFalseEdge;
	}
	
	public ParserRule getFalseEdgeRule() {
		return getFalseEdgeAccess().getRule();
	}

	//Decision behavior::Decision:
	//	{behavior::Decision} name='Decide ' '{' 'if' '(' (booleanexpression+=BooleanNamedFCExpression
	//	booleanexpression+=BooleanLogicFCExpression*)?
	//	')' (outcome_edge+=TrueEdge outcome_edge+=FalseEdge?)
	//	'}'
	public DecisionElements getDecisionAccess() {
		return pDecision;
	}
	
	public ParserRule getDecisionRule() {
		return getDecisionAccess().getRule();
	}

	//Join behavior::Join:
	//	{behavior::Join} name='Join with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
	//	'and goes to' outcome_edge+=UnconditionedEdge
	public JoinElements getJoinAccess() {
		return pJoin;
	}
	
	public ParserRule getJoinRule() {
		return getJoinAccess().getRule();
	}

	//Fork behavior::Fork:
	//	{behavior::Fork} name='Fork into (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
	public ForkElements getForkAccess() {
		return pFork;
	}
	
	public ParserRule getForkRule() {
		return getForkAccess().getRule();
	}

	//Merge behavior::Merge:
	//	{behavior::Merge} name='Merge with (' outcome_edge+=UnconditionedEdge ("," outcome_edge+=UnconditionedEdge)* ')'
	//	'and goes to' outcome_edge+=UnconditionedEdge
	public MergeElements getMergeAccess() {
		return pMerge;
	}
	
	public ParserRule getMergeRule() {
		return getMergeAccess().getRule();
	}

	//Move behavior::Move:
	//	{behavior::Move} name='Move to ' '{' (locationexpression=DeclaredLocalVariable |
	//	locationexpression=LocationNamedFCExpression)
	//	'}'
	//	outcome_edge+=UnconditionedEdge
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Die behavior::Die:
	//	{behavior::Die} name='Die'
	//	outcome_edge+=UnconditionedEdge?
	public DieElements getDieAccess() {
		return pDie;
	}
	
	public ParserRule getDieRule() {
		return getDieAccess().getRule();
	}

	//Reproduce behavior::Reproduce:
	//	{behavior::Reproduce} name='Reproduce' '(' offspring_quantity=ConstantExpression ')' ('with '
	//	declaredattributes+=SetAttributeNamedFCExpression (',' declaredattributes+=SetAttributeNamedFCExpression)*)
	//	('placed on' initial_location=LocationNamedFCExpression) ('where'
	//	occupiedExpression+=BooleanIsOccuppiedLocationFCExpression)?
	//	outcome_edge+=UnconditionedEdge?
	public ReproduceElements getReproduceAccess() {
		return pReproduce;
	}
	
	public ParserRule getReproduceRule() {
		return getReproduceAccess().getRule();
	}

	//Add behavior::Add:
	//	{behavior::Add} (name='Add' expression+=FunctionCallExpression 'to') toAttribute=DeclaredAttributes
	//	outcome_edge+=UnconditionedEdge?
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//Remove behavior::Remove:
	//	{behavior::Remove} (name='Remove' expression+=FunctionCallExpression 'from ') from=DeclaredAttributes
	//	outcome_edge+=UnconditionedEdge?
	public RemoveElements getRemoveAccess() {
		return pRemove;
	}
	
	public ParserRule getRemoveRule() {
		return getRemoveAccess().getRule();
	}

	//Set behavior::SetVariable:
	//	{behavior::SetVariable} (name='Set' assignment=Assignment) outcome_edge+=UnconditionedEdge?
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
